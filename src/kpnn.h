#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (16)

int OUTPUT_BIAS1 = -15;
int OUTPUT_BIAS2 = 5;
int HIDDEN_BIAS[N_HIDDEN] = {-5, 29, 11, -15, 17, 13, -28, 26, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {34, -9, 49, 9, -35, 17, 56, -40, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {-13, -23, -15, 30, 17, 16, -12, 10, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -12, -24, -44, -56, -27, 3, 18, 31, 16,
          35, 22, 4, 26, 14, -8, -34, 14,
          19, 19, 9, 4, 6, -9, -20, 14,
          14, 14, 5, -4, -3, -12, -32, -7,
          4, 15, -2, -15, -27, -6, -12, 11,
          21, 33, 29, 26, -15, -6, -17, 35,
          28, 38, 44, -8, 4, -8, -9, 26,
          3, 19, 4, 24, 13, -18, -12, 2,
          -2, 3, 2, 0, -4, 3, -3, 4,
          -1, -6, -12, 5, -63, -31, -17, -3,
          -12, -11, -19, -31, 3, 34, -40, -11,
          -1, -4, 0, 13, 20, 14, 1, 14,
          -2, 18, 25, 5, 12, 11, -4, 27,
          25, 25, 21, -3, 7, -1, -9, 8,
          25, 24, 21, -9, -8, 9, 9, 0,
          1, 4, -4, -4, 2, -4, 3, -19,
          -7, -15, -13, -8, 25, 48, 64, 2,
          -12, -16, -15, 42, 25, 8, -10, -9,
          -20, 3, 23, 2, 9, 10, 24, -17,
          -20, -3, -11, -4, 12, 1, 5, -26,
          -26, -19, -12, 9, 14, 10, 9, -31,
          -37, -43, -10, 3, 21, 19, -2, -39,
          -21, -46, -13, -0, 26, 29, -25, 40,
          53, 53, 36, 11, -3, -11, -16, -3,
          -1, 2, 5, 1, -4, -1, 5, -23,
          -15, -55, -28, -13, 55, 40, 43, -24,
          -34, -57, 36, 61, 60, 62, 32, -23,
          -4, 1, 21, 36, 40, 15, 30, -1,
          5, 12, 12, 3, 15, 9, 24, -2,
          8, 1, -6, -13, -8, 4, -0, -0,
          7, -15, 5, -0, -12, -2, 5, 0,
          2, 0, 0, -1, -2, 1, -1, 84,
          96, 74, 44, 3, -17, -24, -24, -27,
          -20, -16, -29, -8, 0, 22, 50, -18,
          -23, -19, 4, -3, 19, 28, 35, -21,
          -17, -18, -7, 1, 23, 21, 14, -23,
          -21, -10, -15, -4, 7, 19, 2, -7,
          -2, -2, 24, 33, 25, 10, -3, 1,
          -8, 3, -1, -19, 23, -29, 12, -6,
          -17, -8, 8, 15, 0, 17, -6, 4,
          3, 5, 4, -3, 3, -2, -3, 39,
          -11, 56, -41, -26, -34, 18, 37, 25,
          26, 40, -8, -52, -24, -34, 28, 19,
          17, 15, 9, -20, -22, -6, 40, 14,
          9, 4, -3, -4, -1, 8, 29, 10,
          -0, 1, 4, 7, 9, 25, 24, 8,
          7, -16, 13, 20, 12, 14, 27, -2,
          -3, 3, -1, -4, 2, -3, 0, -67,
          -47, -30, -22, -11, 5, 20, 16, -9,
          -28, -13, 15, -11, 5, -7, -23, -29,
          -30, -7, 2, 0, 4, -12, -15, -34,
          -38, -8, 0, 7, 4, -0, -2, -32,
          -33, -12, 7, 21, 5, 17, 11, -20,
          -15, 11, 20, 28, 25, 30, 14, -10,
          1, 51, 11, 40, 24, 36, 23, 18,
          16, 15, 5, -1, -7, -21, -7, 4,
          2, 3, -4, 2, 3, 5, -4, -11,
          -56, -55, -34, -16, -37, 7, 13, -22,
          -45, -56, -22, -46, 39, 44, 40, -27,
          -32, -7, -14, 4, 17, 14, 28, -11,
          -0, -7, 7, 5, -1, -17, 17, 19,
          5, 14, 10, -2, -8, -47, -5, 8,
          4, -15, -3, 4, 6, -10, -12, 1,
          5, 1, -1, 0, -4, 4, 1, -18,
          11, -10, -24, 29, 6, -10, -2, 11,
          2, 1, 17, 0, 6, 2, -0, 7,
          1, -2, -5, 8, 35, 16, 1, 22,
          16, -5, -10, 2, -3, 1, -18, 9,
          13, 7, -19, -20, -14, 38, -17, 32,
          54, 38, -5, -44, -12, -44, -27, -4,
          53, 66, -10, -23, -69, -11, 15, 95,
          94, 69, 52, -16, -26, -12, -28, 3,
          0, -2, 3, 5, 1, 3, 3, 42,
          -1, -28, -23, 1, -11, -13, -64, -18,
          -16, -19, -10, 18, -12, -18, -3, -16,
          -12, -13, -17, -7, 12, 1, 11, -13,
          -9, -4, -18, 1, 41, 15, -2, -6,
          -15, -8, 26, -12, 13, 34, 16, -13,
          6, -1, -14, -10, 7, 54, 21, 0,
          2, 4, 5, -1, 5, -3, 1, -5,
          -2, -12, -3, -6, 10, 2, 3, 13,
          -5, 3, -31, -10, 25, 10, -10, 7,
          8, 3, 8, 3, 16, 5, 5, 1,
          1, 2, -10, -19, -1, -4, -5, 17,
          51, 15, -33, -32, -3, -11, -10, 16,
          71, 81, 28, -36, -6, -9, -20, 41,
          70, 51, 40, -11, -0, -46, -21, 61,
          33, 32, 45, 56, -8, -15, -15, 1,
          2, 2, 2, 2, 4, 5, 2, 13,
          -11, 23, 15, 2, -3, -44, -5, 15,
          17, 28, 19, 10, -26, -25, -24, 1,
          37, 44, -8, 4, 1, -12, -5, -1,
          37, 21, 25, 4, -4, -5, 2, 0,
          44, 20, -18, -9, 1, -7, 9, 5,
          55, 29, -5, -2, -14, -9, 12, 5,
          0, 2, 1, 0, 1, 3, 4, -3,
          9, 12, 9, -8, -8, -8, 8, -3,
          -11, 10, 3, 13, -10, -7, -19, -4,
          -11, 0, 1, 1, -4, -18, -28, -10,
          -27, -4, 11, 8, 5, 0, -20, -41,
          -13, -23, -5, 14, 13, 8, -22, -9,
          -14, 12, -12, 18, 39, 12, -54, 6,
          -3, 5, 24, 11, 20, 19, -54, -41,
          -65, -77, -36, -19, 24, 22, 14, -1,
          5, 1, -3, -2, 5, -3, -2, 4,
          20, -20, -32, -45, -15, -54, -41, 13,
          -22, -4, 15, 66, -41, -12, -14, 18,
          -0, 17, 5, -2, -18, -27, -21, 19,
          13, 8, 8, 1, -3, -25, -32, 24,
          21, 4, 11, 3, 1, -22, -31, 21,
          19, 8, 10, 12, 3, -10, -40, 0,
          -1, -3, 1, 1, 3, -3, 1, 36,
          17, 31, -4, 29, 21, -5, -6, 2,
          12, 13, -8, -20, -5, 6, 4, 8,
          0, 10, 6, -1, 1, -0, -7, -2,
          -11, 3, 5, 4, 14, 6, -11, -9,
          -19, -3, -7, 6, 19, 18, -13, -20,
          -22, -20, -21, -16, 10, 16, -56, -7,
          -30, -27, -67, 3, -9, 18, -43, -15,
          -47, -41, -41, -20, 15, 24, 29, 5,
          0, -2, 2, 3, 5, -4, -3, 28,
          30, 64, 33, -1, 3, -20, -26, 21,
          9, 20, 2, 30, -10, 4, -16, 8,
          4, 16, 14, -3, -24, -22, -8, 17,
          19, 16, 17, -1, -8, -14, -40, 23,
          34, 22, 8, -2, -4, -21, -29, 16,
          34, 11, 21, -5, -3, -24, -29, 2,
          1, 4, 0, 2, -4, -3, -4, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif