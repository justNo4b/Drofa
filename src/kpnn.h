#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)


int OUTPUT_BIAS1 = -1;
int OUTPUT_BIAS2 = -9;
int HIDDEN_BIAS[N_HIDDEN] = {24, 15, 9, -4, 4, 6, -16, 3, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {16, -16, 22, 21, -22, -21, -26, 13, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {4, 6, 6, -4, -8, 7, -2, 1, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -23, 4, -3, -8, -11, 17, 8, -14, 17, 15, -14, 15, 6, -2, -5, -12, 12, 22, 3, -1, 2, -12, -3, -9, 17, 14, 2, -9, 10, -5, 15, -5, 19,
          7, 44, -2, -5, 27, -4, 23, 13, 20, 46, -14, -3, 3, 8, 36, 36, 51, 3, -3, -9, 26, -4, 2, 8, -0, 30, 34, -3, -10, 25, -0, -3,
          3, 2, 2, -1, -4, -4, 4, -16, -17, -5, 5, 2, 8, -12, 20, -1, 6, 4, 0, 18, 11, 18, -6, -10, -9, 28, 17, 12, 17, 15, -14, -9,
          -2, -4, 10, 7, 2, 15, 2, -5, -4, 9, -8, -17, 8, -10, 0, -3, 4, 25, -12, -8, -3, -1, 3, 2, 0, -1, 4, -3, 5, -2, -1, -19,
          -14, -6, 3, 33, 19, -0, -22, -4, -2, -15, 5, 8, 42, 16, 1, 0, -5, -8, 5, 3, 3, 16, 9, -2, 0, -15, -18, -16, -1, 11, 9, -3,
          11, -6, -3, -7, -4, 14, 5, -8, 11, 23, 4, -20, -12, -13, 21, -6, -13, 8, 9, 25, -50, 2, 15, 13, 5, -15, 8, -3, -3, 33, 28, 2,
          0, 2, 5, 4, -2, 1, -2, -17, -37, -50, -3, 17, -10, -22, -22, -12, 38, -20, -14, 3, 4, 14, -11, 8, 16, -17, 3, -6, 28, -18, -2, -12,
          -8, -0, -2, 3, 21, 15, -8, -6, -9, -2, -9, 1, 8, 10, -3, -2, -6, -4, -10, -3, 0, 4, 13, 4, 0, -1, 4, 2, 3, 0, -4, -14,
          14, -1, -3, -25, -14, -2, -8, 5, -7, -2, -39, 51, 39, 10, 0, 11, -2, 8, 6, 39, 1, -2, -4, 3, 6, -1, 4, -6, -2, -3, -6, 6,
          43, 10, -6, -13, -7, -3, -8, 13, 26, 28, 11, 4, -8, 28, -1, 12, 22, 27, 25, -4, -5, 5, 36, 21, -3, 7, -6, 9, -0, 13, 3, 5,
          3, 0, -2, -2, 4, -3, 1, 2, 14, -20, -19, -20, -21, -19, -20, 2, 15, 11, -13, -18, -16, -21, -16, 2, 31, 19, -2, -10, 6, -15, -12, 4,
          26, 2, -10, 4, 29, -12, -9, 3, 30, 15, 6, 3, -0, -6, 2, 1, 20, 9, 11, 5, -8, -7, 3, 2, 2, 3, 3, 1, -2, 3, -3, -5,
          -8, 21, 1, 5, -15, -15, -6, -11, -11, -14, 10, 3, 7, 15, -6, -7, -7, -3, -1, -9, -5, 3, 1, -12, -9, -11, 7, -1, -20, 2, 5, -14,
          -9, -8, 35, 11, 10, -32, 5, 5, 4, 15, -6, 6, 17, 23, 8, 2, -5, 12, 12, -1, 13, 11, 23, 19, 14, -4, 7, 4, -9, -7, 1, 4,
          2, -2, -2, 3, 3, 2, -2, 1, -35, -25, 11, -8, -3, -12, 16, -0, 13, 8, 3, -47, 5, 1, -9, 3, 2, 7, -10, -4, -1, 3, 12, 10,
          -0, 1, 6, -1, -0, 14, 4, 5, 1, 5, -39, 16, -15, 4, -7, 8, -11, -11, 8, -2, -7, -40, -7, 0, 3, 3, 5, -4, 4, -1, -3, 12,
          -2, -6, 0, -3, 4, -11, 10, 9, 5, -3, -4, -0, 12, 10, 8, 2, 3, 1, -2, -2, 9, 18, 13, 17, 24, -6, -6, 1, -6, 9, 7, 29,
          10, 18, -2, -18, -13, 7, 8, 5, 18, -22, -10, -31, -7, 1, 23, 25, -17, -25, -12, -16, 7, 19, 5, 10, 6, -16, 9, 2, 5, 3, -30, 3,
          -1, -3, 2, -1, 0, 0, -1, 21, -5, 10, 8, -0, -3, 26, 6, 10, -2, -13, -3, -57, -1, 0, -12, -19, -11, -6, -9, -4, 13, 16, 6, -13,
          -9, -8, -5, -4, 22, 19, 12, -17, -14, -0, -0, -6, -0, 9, 19, -15, -7, 6, 11, -8, -9, 12, 22, -4, -2, 0, -1, 5, 2, -2, 4, 12,
          -13, 29, -10, -8, -3, -19, 7, -5, 0, -12, -22, -14, -34, 1, 16, -1, -4, -0, -7, -0, -12, 4, 6, -2, -13, 1, 3, 1, -10, 14, 9, -7,
          -7, -22, 7, 14, 18, 12, 7, 1, -14, -27, -38, -48, 8, 4, -1, -2, -5, 0, -38, 3, -16, 20, -11, -4, -6, 16, -12, -1, 9, 6, -12, 4,
          -2, 4, 1, 4, 2, 1, 0, 23, 4, 12, 15, 16, 12, 4, 6, 9, 13, 21, 5, 6, -17, -3, 6, -13, -0, 16, -6, -11, -7, -8, -7, -3,
          4, -17, -98, -18, -3, 2, -8, -6, -12, -25, -6, -5, -1, 7, 2, -3, -26, -11, -9, -5, 1, 0, -6, -3, -4, 1, 5, -2, 1, 1, 1, 13,
          1, 2, -5, -8, 6, -14, 27, 15, 8, 3, 25, 12, 3, -4, -21, 14, 18, 11, -3, -7, -10, -8, -8, 10, 13, 15, 6, -3, -17, -10, -17, 15,
          5, 14, 9, 12, -24, -8, -8, 19, -8, 14, -5, 3, 7, 20, -6, 19, 21, -8, -26, 13, -16, 14, 11, -12, 8, 1, -4, -5, -16, 16, -19, -2,
          4, 0, -4, -1, 0, 2, -4, 16, -36, 20, 17, 10, 21, 18, -2, -3, 8, 4, 13, 31, 9, 10, -23, -2, -7, -4, 6, 19, 6, -10, -0, -3,
          -11, 10, 4, 7, 5, -10, -11, -6, 7, 1, 5, -3, -3, -17, -11, -6, 2, 13, -18, -33, -25, -17, -9, 2, -4, 3, -2, -4, -4, -4, 0, -2,
          -4, -3, -6, -22, -9, -11, -27, 0, 4, -1, 11, 8, 7, -10, 5, 1, 3, -32, -41, -1, 5, 2, 10, 5, 1, 8, -7, -4, -10, -1, -2, 9,
          -2, 4, -5, -22, -35, 11, 14, 18, 10, -6, 12, -27, 1, 27, 12, 15, -25, 14, 9, -23, -0, -2, 32, 32, 8, -13, 13, -5, 4, 11, 5, 3,
          0, -4, -2, 2, -4, 2, -4, 7, -39, -38, 12, 5, -20, -5, 6, -9, -13, -11, 36, -36, 15, -3, -20, -10, 1, -20, -28, 11, 9, -1, 2, -10,
          -11, -4, -25, -3, 7, 4, 10, -8, -12, -10, 3, -1, 25, -3, 10, -6, -12, -7, 11, 6, -12, 3, 19, 4, -4, -3, 3, 1, 1, -3, -1, };



int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif