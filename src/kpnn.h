#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS1 = -30;
int OUTPUT_BIAS2 = -16;
int HIDDEN_BIAS[N_HIDDEN] = {-9, -5, 19, 4, 25, 25, -5, 16, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {15, 30, -26, 13, 11, -14, 27, 18, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {4, 3, 7, 9, 11, -1, -8, 3, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -4, 2, 1, 3, 3, 3, 2, -2, -22,
          18, 29, 28, 27, 29, 13, -3, -15,
          8, -30, 41, -6, 40, 10, 5, -8,
          12, -26, -1, 4, 15, 7, 7, -9,
          12, 1, -20, -20, -19, -28, -2, -8,
          -0, 93, -27, 73, 10, -11, 2, -7,
          -21, 86, -36, -9, 15, -7, 13, 1,
          5, 3, 4, -3, -2, -1, -1, -1,
          0, -2, 5, -4, -2, -4, -2, 13,
          -32, -45, -13, -1, -40, -10, -22, 10,
          23, -20, -2, -20, -26, -2, -26, 55,
          14, 50, -41, 14, -19, 0, 5, 5,
          38, 9, 36, 13, -8, 2, -3, 26,
          0, 80, -9, -18, -16, -9, -4, 9,
          72, -9, -6, 50, 4, 8, 17, -4,
          -4, 5, -2, -4, 2, 0, 1, 1,
          2, 4, 1, 3, 1, -4, 5, -13,
          -8, -1, -3, 7, -27, -15, -9, -10,
          -12, 6, -1, 0, -25, -25, -16, -28,
          -41, -4, 14, 7, -1, -17, -10, -39,
          -17, -16, 3, 20, 13, -6, -15, -50,
          -21, 25, 8, 39, 6, 2, -35, -2,
          1, 39, -3, 14, 11, -17, 7, 2,
          2, 1, -4, 3, -3, 4, -1, 1,
          -2, 1, 1, 1, 3, 5, 1, 18,
          16, -17, -19, 12, -36, -56, -49, 8,
          5, 27, -7, 11, -11, 6, 24, 18,
          3, 18, 1, -5, -28, 2, -17, 22,
          29, 8, 22, 6, -30, -35, -16, 19,
          29, 5, 10, 11, -2, -20, -25, 25,
          16, -3, 3, 9, 12, -26, -37, 3,
          5, 3, 2, 2, 1, -2, 1, 3,
          5, -3, 3, 2, -4, 0, -4, 20,
          11, 17, 15, 40, -9, 0, 8, 23,
          27, 23, 25, 13, 7, -2, 0, 9,
          19, 17, 14, 27, 15, -2, -14, 18,
          24, 3, -26, 12, 9, 8, -1, -8,
          7, -4, -19, -45, 4, 17, -41, -13,
          -78, -61, -37, 5, -49, 40, -32, -2,
          5, 0, 4, 3, -1, -2, -1, -3,
          -2, 4, 5, 2, -4, 2, -2, 7,
          -45, 7, 31, 3, 9, -27, -25, 6,
          4, 6, 20, 44, -4, 29, -25, -5,
          -1, 12, 4, -0, -6, -36, -41, -26,
          -6, -9, 33, 15, 2, -24, -29, -23,
          -13, -24, 49, -13, 3, 0, -17, -15,
          -4, 14, -15, -19, 24, 3, -13, -1,
          2, 0, -4, 4, 4, 3, 0, 2,
          0, 1, 2, 4, 3, 0, 5, -4,
          1, -12, 12, 18, 17, -4, -3, -2,
          -8, -2, -12, -8, -14, -12, 4, -1,
          5, -11, -11, -12, -16, -43, -37, 4,
          16, 11, -13, -44, 5, -64, -37, -9,
          20, 20, 9, -14, -55, -36, -48, 12,
          -23, 26, 11, -30, 7, -34, 3, -3,
          3, 4, -2, 2, 3, 4, 4, -1,
          -1, -3, 2, -4, 5, 4, -1, 0,
          -11, -49, -1, 13, -63, 9, -20, -1,
          11, -30, -19, -50, -12, 17, -5, -31,
          -2, -34, -10, -0, 26, -19, 1, -28,
          -24, -35, -14, -2, 9, 9, 12, -47,
          -38, -18, -3, 15, -0, 2, 11, -28,
          -26, -3, -19, 7, 3, 7, 24, 0,
          -4, 4, -4, -4, 2, 3, -1, -1,
          5, -1, -3, -4, 3, -3, 4, 31,
          23, -5, 21, 24, 10, -1, -15, 26,
          16, 1, -4, 10, 3, 4, -20, 40,
          19, 25, -1, 7, -2, 11, -6, 30,
          14, 26, 2, 7, -10, 9, -8, 39,
          19, 34, -13, -22, 28, 34, 41, -50,
          29, -4, 27, -10, -23, 7, 13, 3,
          3, 4, 3, 2, -4, 5, -1, 1,
          -3, -4, 5, 0, 0, -2, 3, -18,
          -4, 11, 29, 26, 16, 12, 35, 6,
          0, 42, 38, 19, 35, 3, -25, -4,
          -9, 36, 42, 14, 15, 9, 2, -8,
          -8, 8, 3, -4, -6, 1, 1, -3,
          -9, 14, 3, -22, 2, -11, -6, -6,
          -15, 73, -22, -23, -25, -16, -6, 4,
          -4, 4, -2, -4, 2, 0, 5, 1,
          -3, -4, 3, -1, 5, -3, 5, 1,
          13, -14, -15, 7, 16, 31, 10, -3,
          -24, 55, 22, -1, -17, 12, 17, 7,
          -1, -7, 43, -16, -15, 14, 25, 5,
          -11, -5, 0, 16, 10, -24, -5, 9,
          -14, -37, -28, -1, 7, 2, 12, -11,
          -9, -21, 6, -1, 22, 33, -28, 4,
          -3, 1, -3, -1, 3, -3, 3, -4,
          2, -1, -1, -4, 2, -2, 0, -36,
          15, -21, 12, 22, 47, 9, -52, -11,
          7, -32, 16, -83, -27, 50, -2, -13,
          -8, 10, 39, 34, -7, 34, -21, -10,
          1, 25, 13, 16, -9, 8, -13, -12,
          7, 4, -27, 17, -23, 21, -9, -24,
          -1, 14, -36, -16, -5, 4, 2, 5,
          5, 2, 2, 3, 0, 0, -2, 3,
          0, 1, 2, 2, -2, 0, -2, 14,
          5, 15, 16, 65, 51, 4, -23, 1,
          14, 32, 16, 7, 2, -4, -18, -5,
          8, 8, 9, -12, -6, -3, -24, -14,
          9, 45, -17, -6, -19, -36, -10, 42,
          33, 41, 45, 26, 9, -15, 47, 63,
          54, 58, 59, -1, 33, 5, 16, 5,
          4, 1, 5, 1, -2, 2, 3, -1,
          3, -2, 0, -1, -4, -3, 3, -28,
          10, -26, -27, -25, 4, 23, 17, -22,
          -7, -23, -2, -24, -13, -2, -22, 3,
          15, -18, 21, 59, 4, 11, -9, 16,
          5, 31, 32, 32, -7, -8, 3, 17,
          33, 17, 12, 4, -10, -13, 2, 8,
          54, 42, 31, 11, -17, -4, 1, -1,
          -1, -2, 4, 5, 3, 0, -4, 4,
          2, 1, 1, 5, 2, 5, 2, -17,
          -11, 10, -30, -6, -11, 8, 44, -13,
          -26, -12, -7, 17, 30, 21, 26, -14,
          -22, -10, -0, 7, 46, 21, 25, -5,
          -27, -31, -13, -0, 12, 23, 6, -24,
          1, -18, 42, -5, 30, 32, 1, 28,
          -22, 15, 37, -10, -10, -30, -11, 5,
          4, 2, 0, 4, 0, -1, 0, 4,
          -4, -4, 2, 0, -3, 2, -4, -12,
          30, 48, -33, -32, 12, 16, 20, -13,
          -22, -19, -24, -67, -21, -13, 40, -4,
          6, -10, 9, -28, -12, -6, -7, 9,
          3, -15, -20, -1, 4, 6, 17, 7,
          -7, -15, -13, 15, 17, 16, 27, 6,
          -25, -20, 76, 35, 27, 18, 19, 1,
          5, 0, 2, -1, 4, 0, 4, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif