#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS1 = -22;
int OUTPUT_BIAS2 = -12;
int HIDDEN_BIAS[N_HIDDEN] = {-4, -6, 10, 4, 19, 12, -1, 12, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {15, 34, -27, 11, 11, -11, 25, 13, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {4, 1, 7, 6, 10, -2, -10, 1, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -4, 2, 1, 3, 3, 3, 2, -2, -8,
          11, 15, 14, 21, 29, 12, 0, -10,
          10, -17, 22, 2, 23, -1, 2, -10,
          19, -27, -2, 3, 3, -0, 5, -5,
          5, -14, -7, -17, -5, -4, -4, -4,
          8, 73, -17, 44, 5, -9, 6, 1,
          -17, 57, -27, -2, 8, -17, 7, 1,
          5, 3, 4, -3, -2, -1, -1, -1,
          0, -2, 5, -4, -2, -4, -2, 12,
          -18, -26, -8, -11, -21, -14, -20, 8,
          12, -21, -6, -19, -18, -12, -14, 35,
          10, 27, -13, 9, -13, -13, -16, 5,
          21, 8, 33, 0, -8, 1, -10, 13,
          5, 75, -3, -12, -8, 1, 1, 18,
          65, -3, -14, 42, 4, -3, 12, -4,
          -4, 5, -2, -4, 2, 0, 1, 1,
          2, 4, 1, 3, 1, -4, 5, -14,
          -8, 2, 3, -0, -22, -10, -5, -7,
          -9, 2, -10, -0, -20, -23, -8, -21,
          -15, -0, 12, 3, -11, -8, -5, -34,
          -3, -10, -4, 15, 16, -12, -0, -44,
          3, 23, 10, 16, 7, 10, -20, 3,
          -6, 31, 9, 15, 10, -9, 5, 2,
          2, 1, -4, 3, -3, 4, -1, 1,
          -2, 1, 1, 1, 3, 5, 1, 9,
          9, -19, -13, 0, -26, -33, -32, 7,
          4, 22, -9, -8, -6, -3, 15, 18,
          7, 11, -6, -6, -25, 3, -8, 13,
          16, -1, 12, 5, -23, -25, -7, 15,
          22, -2, 7, 8, -3, -16, -21, 12,
          7, -16, 7, 7, 8, -20, -25, 3,
          5, 3, 2, 2, 1, -2, 1, 3,
          5, -3, 3, 2, -4, 0, -4, 14,
          15, 13, 10, 20, -8, 1, 7, 11,
          15, 22, 18, 6, -2, 0, -7, 7,
          16, 16, 14, 26, 11, -9, -12, 7,
          8, 3, -23, 8, 6, 7, 6, -7,
          -9, -1, -19, -39, 3, 7, -27, -8,
          -56, -16, -34, 15, -20, 14, -13, -2,
          5, 0, 4, 3, -1, -2, -1, -3,
          -2, 4, 5, 2, -4, 2, -2, 0,
          -18, 7, 24, 7, 9, -16, -5, 19,
          9, 3, 21, 34, 1, 25, -9, -3,
          -1, 26, 10, 3, -8, -21, -32, -17,
          -6, -11, 39, 4, 0, -17, -18, -10,
          -2, -11, 31, -6, 5, -6, -8, -8,
          -4, 17, -15, -9, 20, 6, -8, -1,
          2, 0, -4, 4, 4, 3, 0, 2,
          0, 1, 2, 4, 3, 0, 5, -5,
          -1, -5, 12, 0, 13, -2, -2, 2,
          -3, -1, -8, -4, -12, -13, 3, -1,
          15, -5, -5, -9, -7, -25, -27, 5,
          15, 18, -16, -29, 2, -45, -41, -8,
          9, 14, -3, -6, -45, -31, -40, 7,
          -21, 12, 8, -24, 1, -26, 3, -3,
          3, 4, -2, 2, 3, 4, 4, -1,
          -1, -3, 2, -4, 5, 4, -1, -2,
          -3, -21, -5, 11, -43, 4, -15, -2,
          12, -22, -10, -29, -21, 9, -5, -10,
          -7, -33, -6, 6, 16, -16, 4, -27,
          -20, -13, -7, 3, 2, 10, 6, -31,
          -30, -15, 4, 6, -2, 0, 8, -21,
          -21, -4, -11, 3, 6, 8, 20, 0,
          -4, 4, -4, -4, 2, 3, -1, -1,
          5, -1, -3, -4, 3, -3, 4, 24,
          21, -3, -1, 19, -1, -3, -10, 21,
          13, 4, 6, 1, 3, 4, -15, 29,
          17, 25, -4, 10, -5, 10, 0, 17,
          9, 15, -1, -1, -17, 10, -5, 27,
          21, 14, -13, -16, 25, 17, 20, -41,
          23, 1, 12, -15, -15, -2, 8, 3,
          3, 4, 3, 2, -4, 5, -1, 1,
          -3, -4, 5, 0, 0, -2, 3, -1,
          -6, 15, 19, 22, 11, 10, 30, 2,
          -1, 28, 27, 17, 16, 3, -15, -2,
          -1, 23, 20, 16, 16, 4, 4, -6,
          -8, 1, 10, 4, 1, 1, 7, -2,
          -3, 16, -1, -14, 14, -6, -7, -0,
          -11, 55, -14, -19, -18, -11, -9, 4,
          -4, 4, -2, -4, 2, 0, 5, 1,
          -3, -4, 3, -1, 5, -3, 5, -10,
          10, -11, -15, -12, 13, 21, -0, 1,
          -13, 35, 26, 7, -14, -6, 17, 11,
          10, -4, 10, -1, -9, 6, 19, -4,
          -2, -7, 5, 22, 14, -12, -15, -5,
          -7, -20, -23, 3, 10, 6, 10, -4,
          2, -22, 5, 4, -6, 32, -17, 4,
          -3, 1, -3, -1, 3, -3, 3, -4,
          2, -1, -1, -4, 2, -2, 0, -19,
          14, -25, 2, -3, 23, 12, -27, 1,
          19, -4, 6, -44, -18, 26, -7, -8,
          -18, 18, 45, 23, 3, 31, -12, -2,
          -1, 18, 19, 6, -6, 10, -16, -16,
          2, 6, -23, 1, -18, 20, -11, -11,
          -5, 18, -17, -13, -2, -2, -2, 5,
          5, 2, 2, 3, 0, 0, -2, 3,
          0, 1, 2, 2, -2, 0, -2, 11,
          8, 4, 4, 46, 39, -1, -14, 4,
          16, 18, 16, -0, 3, -11, -17, 0,
          13, 8, 13, -5, -3, -8, -12, -2,
          4, 28, -17, -4, -21, -25, 0, 25,
          23, 33, 29, 15, 5, 3, 29, 35,
          35, 23, 38, -4, 32, 4, 20, 5,
          4, 1, 5, 1, -2, 2, 3, -1,
          3, -2, 0, -1, -4, -3, 3, -8,
          -4, -8, -21, -15, 12, 14, 20, -15,
          -0, -9, 2, -19, -3, -9, -25, 2,
          -2, -1, 11, 48, 2, 3, -13, 9,
          -1, 24, 30, 13, -1, 8, -1, 8,
          21, 17, 11, -4, -7, -10, -3, -1,
          43, 37, 17, 5, -12, -3, -1, -1,
          -1, -2, 4, 5, 3, 0, -4, 4,
          2, 1, 1, 5, 2, 5, 2, -8,
          0, -1, -21, -1, -11, -0, 24, -14,
          -25, -6, -1, 17, 30, 24, 13, -0,
          -10, 1, 2, 22, 12, 0, 4, 5,
          -20, -6, -17, 21, 19, 16, -19, -16,
          -8, -20, 30, 1, 35, 32, 2, 19,
          -15, 4, 18, 8, -3, -0, -10, 5,
          4, 2, 0, 4, 0, -1, 0, 4,
          -4, -4, 2, 0, -3, 2, -4, -10,
          22, 37, -15, -23, 12, 24, 29, 5,
          -23, -5, -18, -25, -18, -8, 31, -12,
          5, -1, 3, -19, -12, -9, 12, 11,
          -6, -1, -13, -15, 3, -1, 20, 7,
          -6, -19, -6, 24, 10, 6, 16, 5,
          -26, -13, 63, 14, 15, 4, 12, 1,
          5, 0, 2, -1, 4, 0, 4, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif