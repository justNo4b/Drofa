#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS = -18;
int HIDDEN_BIAS[N_HIDDEN] = {-3, 4, -16, -33, 5, 24, 24, -12, };
int OUTPUT_WEIGHTS[N_HIDDEN] = {-35, 29, -14, -30, 28, 21, 18, -30, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          21, -19, -18, 5, -17, -34, -43, 19, 24,
          21, 27, -68, 19, -16, 8, -1, 20,
          40, 19, 7, 22, 8, 12, 8, 36,
          49, 16, -2, 27, 57, 33, -10, 63,
          40, -0, 1, -36, -14, 13, -41, -7,
          -57, -22, -12, -28, -19, -54, -28, -2,
          94, -61, -56, -23, 17, 27, -38, -24,
          -6, -3, 9, -10, 41, 2, 9, 2,
          -1, 5, 4, 1, 1, 1, -4, 14,
          52, 25, 13, 79, 64, 21, 15, 1,
          -4, -31, 46, 92, 14, -23, 11, 4,
          1, -15, 3, -1, -16, -8, -11, -14,
          -1, 4, -43, -18, -9, -10, -17, -11,
          -20, 21, -4, -9, -1, 18, 31, -9,
          38, 86, 11, 34, 18, 118, 27, 5,
          0, -4, 0, 4, 1, 0, 1, -95,
          -21, -12, 1, -19, -9, -34, 19, -11,
          -4, 10, -27, -36, -42, -14, -25, -23,
          -13, 15, -8, -10, -29, -29, -29, -24,
          -17, -11, 22, 14, -1, -12, -27, -21,
          -19, 8, 0, 30, 21, -0, -7, -46,
          -17, 35, -8, 79, 21, 51, 160, 54,
          0, 42, -20, 16, -43, 27, -15, -15,
          15, 5, 9, 22, -35, 33, 34, -1,
          -2, 4, 1, -2, -1, 1, -1, 25,
          18, 21, -24, -27, 18, 76, 61, 26,
          24, 26, 26, 28, -23, -1, -1, 21,
          25, 27, -22, -8, -60, -28, -20, 31,
          29, 20, 18, -17, -52, -28, -32, 34,
          30, 12, 9, 1, -15, -23, -55, 30,
          20, 14, 31, 15, 8, -28, -66, 4,
          5, -2, -1, 2, 2, 3, 3, -84,
          -77, -88, -4, 59, 43, 50, 27, -12,
          -23, 17, -17, -27, -14, 11, -10, -14,
          -7, 72, -14, -28, -15, -12, -0, -18,
          -9, -11, 5, -25, -9, -6, 7, -37,
          -8, -28, -12, 29, 2, -25, -4, -72,
          -9, 41, -12, -50, 36, 13, 3, -114,
          104, -16, -10, -48, 38, -42, 30, 17,
          -14, 17, 60, -19, -46, -47, 4, 1,
          4, -4, -3, 2, 4, 5, 1, -8,
          6, -44, -36, 7, -13, -13, -85, -4,
          40, -52, -85, -35, -40, -9, -66, -6,
          8, 72, 43, 5, 8, -10, -22, 31,
          25, -61, 79, 32, 3, -27, -37, 17,
          34, 16, -8, 8, 10, 6, -15, 22,
          43, 10, -12, 1, 9, -2, -18, -3,
          -2, -1, 0, 1, 2, -3, 0, 5,
          -4, -41, -104, -40, -47, 2, 49, -51,
          -24, -26, -47, -18, -32, -27, -7, -38,
          -8, -2, -1, -21, -12, -22, -1, 17,
          -60, 37, 18, 9, -10, -25, -12, 42,
          -42, -13, 25, 84, -49, 42, 4, 37,
          -37, -119, 23, -100, -33, 36, 1, -31,
          41, -69, -30, -5, -68, -57, -30, 19,
          9, 17, -13, -7, 44, 24, -18, 1,
          4, 2, 4, 0, 4, -4, 5, 1,
          19, 103, 2, 38, 39, 11, 42, -45,
          8, -32, 16, 39, 5, 10, -47, 5,
          -43, -15, -8, -1, 15, 6, -15, 6,
          -5, 12, -44, -5, 15, 25, 21, -10,
          3, -125, 7, 35, -13, 4, 7, -19,
          -83, 11, 39, -112, -15, 3, -12, -3,
          -4, 5, 0, -2, -1, -3, 0, 9,
          -4, 12, 3, -6, 24, -35, -14, -6,
          -1, 9, -62, 123, 99, -8, -42, 6,
          18, 1, 9, 20, 14, -31, -35, -7,
          30, -5, 23, -20, -6, -40, -41, 6,
          51, -10, -16, -5, -27, -16, -34, 20,
          44, 31, 62, 20, 3, -10, -27, 31,
          -45, 57, 57, 9, 7, -36, 22, -5,
          -12, 2, 22, -22, 6, -37, 28, -3,
          5, -4, 3, -2, 2, 3, 3, 5,
          -35, 2, -61, 14, -70, -36, -37, 6,
          -14, -12, -26, -23, 59, 92, -27, -2,
          42, 43, -16, 21, 89, -14, -29, 16,
          47, 35, 16, 43, 10, -25, -15, 23,
          77, 48, 29, 21, -7, -23, 9, 14,
          74, 29, 50, 25, -9, -8, 17, 3,
          -1, 3, -4, -2, -4, 1, -4, -10,
          23, 9, 63, 44, -9, 12, 5, -31,
          -21, -4, -63, -31, -17, -7, 52, -32,
          -6, -5, -25, 35, 19, 23, 47, 9,
          3, -28, 17, 2, 116, 59, 32, -12,
          -21, -29, -38, 40, 47, 90, 7, -20,
          32, 47, 51, 17, 73, 26, -31, -31,
          -95, 65, 86, 8, -5, -54, -24, 1,
          -12, 23, -31, 10, -13, -28, -47, -4,
          1, 4, -4, 0, 3, -4, -2, -11,
          12, -46, -37, -70, -18, -19, 19, 2,
          35, -33, -36, -111, -7, -74, 46, 29,
          -11, 42, 20, -27, 3, -19, -7, -11,
          22, -64, 5, -1, -10, 15, 9, 7,
          -23, 39, -21, 26, 11, 8, 33, 14,
          -9, -18, 52, 65, 34, 23, 31, 3,
          -3, -2, 5, -3, 4, -3, 3, 14,
          14, 11, 41, 36, -43, 50, -4, 36,
          21, 7, 57, 29, 27, -14, -49, 25,
          36, 20, -44, -13, 18, -16, -16, 54,
          39, 43, -20, -5, -6, -1, -24, 1,
          14, 36, -13, 13, -16, -14, -22, 1,
          30, 73, 1, 1, 25, 68, 23, 36,
          -55, 47, -13, -57, 24, -29, 47, 14,
          2, 6, 7, -6, 30, -33, -14, 4,
          -4, 3, -4, -3, -2, -3, 2, -33,
          -63, -35, 19, 50, -83, 3, -13, -91,
          -0, -61, 49, 66, 26, 28, -42, 4,
          -11, 15, 114, 46, 28, 30, -6, 4,
          -33, -3, 125, 33, 13, 9, 13, -10,
          -9, 60, 1, -2, 28, -20, 7, 10,
          21, 92, -17, -6, -33, -6, 6, -1,
          -2, 5, 2, 4, -2, 2, 1, 9,
          19, -15, 5, 19, 12, 24, 44, 39,
          21, -25, 16, 20, 6, -39, -51, 35,
          20, 10, 2, 3, -66, -41, -55, 33,
          39, 9, 15, -2, -52, -5, -29, 23,
          -1, 36, 0, -5, -7, -1, 14, 22,
          54, 29, -56, -20, 66, 36, 42, 21,
          22, -97, -45, 61, -6, 50, -39, -94,
          -28, -50, 16, -21, -33, -22, 7, 0,
          -2, -4, 0, 4, -2, -1, 3, 65,
          5, 71, 24, 23, 54, 28, -47, -21,
          -14, 37, 34, 74, 36, 22, -48, -50,
          -30, 33, -24, 28, 27, 6, -20, -48,
          -15, 16, 14, -18, -32, 24, -16, -8,
          -6, 21, -13, -37, -20, -14, -28, -19,
          -3, 24, -102, -55, -36, -14, -8, 4,
          2, 5, 2, 0, -1, 3, -1, };
int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif