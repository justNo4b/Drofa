#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)


int OUTPUT_BIAS1 = 0;
int OUTPUT_BIAS2 = -12;
int HIDDEN_BIAS[N_HIDDEN] = {29, 17, 12, -7, 7, 9, -16, 1, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {16, -16, 22, 23, -22, -22, -26, 14, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {6, 8, 6, -4, -8, 7, -2, 2, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -39, 9, -18, 0, -5, 16, 6, -15, 19, 22, -18, 19, 2, -3, -7, -12, 18, 24, -2, -6, 0, -13, -8, -11, 22, 19, 1, -9, 7, -5, 12, -8, 26,
          10, 49, -4, -5, 23, 2, 29, 17, 21, 63, -25, -5, 24, 15, 47, 45, 58, 8, -13, -2, 21, -2, 2, 19, 4, 41, 41, -4, -15, 20, -1, -3,
          3, 2, 2, -1, -4, -4, 4, -19, -18, -6, 19, 7, 15, -13, 27, 1, -3, 12, 1, 21, 12, 24, -14, -12, -8, 37, 15, 9, 9, 11, -15, -13,
          -2, -4, 13, 4, 0, 17, 3, -8, -3, 12, -9, -20, 8, -7, 5, -5, -0, 18, -13, -8, -6, -5, 4, 2, 0, -1, 4, -3, 5, -2, -1, -16,
          -10, -8, 1, 31, 23, -9, -21, -4, -0, -23, -3, 2, 43, 16, 2, 2, -4, -7, 15, -3, 5, 18, 7, 2, 6, -16, -21, -21, 2, 11, 12, 1,
          15, -6, -2, -10, -8, 21, 5, -17, 14, 21, 13, -22, -9, -12, 32, -9, -21, 9, 8, 19, -62, 3, 14, 6, 0, -19, 17, -1, -2, 38, 31, 2,
          0, 2, 5, 4, -2, 1, -2, -15, -49, -64, -2, 27, -16, -21, -35, -11, 44, -22, -16, 4, 8, 23, -19, 0, 17, -19, -2, -7, 39, -24, -4, -19,
          -17, -7, 0, 12, 28, 3, -12, -9, -16, 2, -5, -1, 7, 16, -6, -4, -4, -6, -9, -7, 0, 8, 12, 4, 0, -1, 4, 2, 3, 0, -4, -8,
          17, -4, -2, -32, -14, 2, -6, 6, -5, 0, -48, 50, 47, 11, -3, 11, -1, 15, 7, 49, 3, -3, -4, 5, 5, -4, 3, -7, -3, -7, -6, 0,
          50, 13, -7, -13, -5, -3, -8, 14, 33, 33, 16, -4, -7, 36, -3, 21, 34, 28, 41, -9, -7, 3, 40, 20, -6, 4, -13, 14, 0, 17, -9, 5,
          3, 0, -2, -2, 4, -3, 1, -2, 21, -28, -30, -20, -26, -24, -20, 7, 17, 16, -22, -16, -17, -26, -20, -2, 39, 24, -3, -7, 14, -13, -7, 4,
          30, 4, -12, 2, 40, -13, -11, 4, 40, 20, 7, 1, -2, -9, 3, 1, 27, 11, 19, 12, -9, -6, 5, 2, 2, 3, 3, 1, -2, 3, -3, 4,
          -10, 26, 1, -3, -14, -24, -15, -13, -15, -14, 20, 8, 8, 18, -7, -12, -13, -1, 3, -19, -11, 7, -1, -15, -5, -12, 5, -6, -27, 11, 8, -21,
          -8, -4, 33, 12, 10, -38, 9, 4, 15, 14, -3, 6, 19, 34, 14, 4, -5, 19, 20, 7, 17, 20, 35, 21, 17, -8, 10, 2, -11, -6, -1, 4,
          2, -2, -2, 3, 3, 2, -2, 3, -49, -29, 21, -11, 2, -7, 17, 2, 18, 4, 2, -63, 12, -9, -19, 3, 2, 6, -9, -8, -1, 4, 14, 12,
          -6, 1, 9, -1, 1, 11, 8, 9, -1, 5, -44, 16, -16, 4, -8, 11, -13, -14, 10, -9, -10, -39, -11, 0, 3, 3, 5, -4, 4, -1, -3, 20,
          -5, -10, 7, -8, 14, -10, 7, 10, 6, -4, -1, 7, 17, 15, 9, 5, 4, 2, -9, 3, 14, 17, 15, 17, 30, -3, -2, -1, -11, 10, 8, 31,
          16, 27, -4, -19, -17, 4, 8, 25, 22, -24, -9, -38, -9, 4, 35, 29, -13, -29, -19, -19, 8, 21, 6, 31, 4, -21, 4, 2, 10, 1, -38, 3,
          -1, -3, 2, -1, 0, 0, -1, 28, -6, 7, 5, -2, -5, 33, 1, 17, -8, -11, -4, -61, -4, -1, -19, -23, -11, -5, -7, -11, 12, 18, 12, -17,
          -10, -8, -7, -8, 20, 23, 11, -22, -17, -4, -3, -9, 2, 6, 23, -18, -11, 4, 17, -6, -8, 15, 24, -4, -2, 0, -1, 5, 2, -2, 4, 10,
          -21, 20, -10, -8, -6, -21, 3, -1, -1, -17, -30, -17, -35, 2, 20, -5, -8, 3, -13, 3, -17, 0, 13, -1, -11, -1, -1, 1, -13, 18, 12, -4,
          -11, -11, 7, 17, 27, 24, 3, 3, -19, -30, -46, -68, 5, -3, -2, -7, -4, 3, -44, 8, -15, 15, -14, 2, -9, 10, -7, 1, 4, 12, -4, 4,
          -2, 4, 1, 4, 2, 1, 0, 27, 5, 5, 12, 23, 16, 5, 17, 5, 13, 27, 4, 7, -26, -4, 9, -17, -2, 21, -5, -22, -2, -17, -10, -4,
          8, -22, -120, -25, -7, 4, -7, -5, -10, -26, -13, -3, -3, 12, 3, -2, -30, -20, -13, -5, 5, -1, -6, -3, -4, 1, 5, -2, 1, 1, 1, 9,
          4, -4, -4, -5, 5, -8, 29, 18, 11, 8, 24, 14, -0, -3, -22, 19, 23, 12, -0, -9, -8, -11, -13, 14, 15, 20, 10, 1, -25, -6, -23, 6,
          2, 26, 11, 16, -28, -14, -7, 29, -20, 1, -20, -0, 5, 31, -1, 21, 23, -13, -29, 19, -16, 13, 9, -8, 4, 11, 0, -7, -15, 14, -28, -2,
          4, 0, -4, -1, 0, 2, -4, 14, -42, 30, 13, 7, 27, 23, -4, -12, 9, 2, 23, 41, 13, 8, -12, -8, -2, -1, 5, 21, 5, -4, -6, -8,
          -16, 11, 5, 9, 8, -12, -9, -8, 6, 3, 6, -6, -10, -23, -12, -9, -0, 13, -17, -32, -25, -19, -11, 2, -4, 3, -2, -4, -4, -4, 0, -13,
          1, -1, 0, -18, -14, -16, -40, 5, -0, -2, 15, 9, 7, -10, 6, 4, 1, -39, -43, -1, 11, 1, 9, 5, 2, 10, -9, -6, -14, -1, 5, 11,
          1, 15, -5, -22, -48, 6, 13, 11, 22, -6, 13, -37, -4, 41, 23, 14, -14, 12, 11, -22, 3, 4, 45, 35, -1, 2, 18, -7, 4, 14, 11, 3,
          0, -4, -2, 2, -4, 2, -4, 8, -52, -48, 9, 3, -7, -5, -3, -15, -25, -11, 45, -48, 22, -13, -28, -14, 3, -15, -34, 15, 11, 3, 9, -14,
          -17, -7, -28, -0, 2, 4, 15, -11, -20, -10, 3, 7, 25, -3, 14, -8, -15, -9, 13, 9, -11, 5, 20, 4, -4, -3, 3, 1, 1, -3, -1, };


int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif