#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x8x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS1 = 20;
int OUTPUT_BIAS2 = -2;
int HIDDEN_BIAS[N_HIDDEN] = {-43, -66, 3, -29, -26, 28, 12, 54, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {19, -17, -9, -7, 14, 14, -15, -19, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {2, -5, -3, 18, -10, -2, -0, 2, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -23, 13, -3, -14, -9, 13, 12, -26, 7, -5, -11, -20, -13, -4, 17, -27, 14, 15, 18, -8, -38, -32, -18, -33, 30, 35, 15, 4, 3, 10, 18, 12, -9, 
          -3, 32, 35, 17, 22, 5, 23, -17, 38, 41, 38, 38, 37, 4, -18, -13, 35, 41, 38, 69, 9, 18, 30, 25, -4, 14, 24, 26, 15, 22, 29, 3, 
          -1, -2, -1, 1, -1, -4, 5, 46, -37, 2, -51, -80, -93, 61, 44, 38, 18, -19, -35, -49, -70, -29, 36, 26, 36, 25, 11, -44, -90, -47, -60, -7, 
          20, 19, 26, -4, -22, -57, -23, -11, 11, 0, 4, 11, -5, -18, -20, 3, -12, -23, -11, 37, 0, -4, -59, 2, 5, 2, 2, 4, 4, 0, -3, 64, 
          -2, -12, -6, 40, -1, 3, 20, 4, 28, 25, -8, 25, 13, -15, -43, 9, 20, 16, 4, 11, 14, -7, -26, -1, 17, 10, 12, -5, -18, -22, -23, -21, 
          8, 18, 11, -22, -19, -8, 0, 13, 6, 13, -9, -46, -11, 4, 34, -46, -31, -2, -66, -61, -81, -102, -88, -7, 20, 18, 4, -12, -7, 25, -26, 3, 
          -3, -3, 0, 0, 4, 2, 5, 28, 39, 42, 51, 53, 35, 31, 44, 10, 42, 29, 44, 45, 37, 22, -21, 43, 20, 16, 40, 36, 23, -10, -15, 24, 
          5, 22, 11, 5, -7, -19, 12, -4, 16, 9, 11, -12, -8, -17, 2, -4, 12, 15, -3, -3, -73, -34, 7, 4, 5, 1, 0, -2, 3, 1, 2, 23, 
          26, 8, 34, 37, 25, 15, 90, 0, 4, 11, 16, -2, -27, -12, 3, -12, 9, 3, -12, -8, -18, -11, -11, -21, 4, 5, -12, 10, -23, -23, -8, 5, 
          2, 6, 1, -78, 30, 116, 46, 16, 12, 8, -16, -150, -4, 38, 12, 23, 3, -48, -75, -68, 14, 26, 11, -56, -26, 12, 5, -15, 34, 8, -26, 5, 
          3, 1, -1, 2, -4, 4, 0, -13, 92, 73, -12, -5, 64, 20, 11, -4, 40, 50, 23, 5, 22, -7, -113, 26, 39, 21, 15, 21, 14, -15, -5, 39, 
          34, 25, 12, -19, -7, 10, -11, 22, 16, 8, 23, -18, 52, -4, 16, 25, 19, 2, 38, -7, -5, 183, -16, 5, -3, -4, 5, 1, 4, 4, 1, 9, 
          7, 11, 5, 81, 69, 2, -23, 18, 13, 22, 15, 14, 22, 12, 20, 17, 14, 14, 13, 18, 23, 26, 28, 11, 17, 15, 16, 24, 23, 25, 25, 4, 
          19, 14, 20, 23, 17, 21, 24, 15, 4, 18, 23, 24, 21, 22, 25, -36, -23, -43, 15, 9, 5, -18, -36, -2, -13, -12, -13, -49, -108, -6, 10, 0, 
          5, -4, 0, -1, 1, -4, -3, 61, 49, 40, -39, 39, 44, 22, 41, 10, 42, -10, 3, 11, 46, 57, -19, 29, 11, -6, -13, -39, 44, -31, -35, 4, 
          -1, -6, -24, -21, -25, -27, -34, 4, -4, -16, -2, -15, -21, -26, -28, -1, -1, -16, -2, -11, -27, -21, -26, 3, -4, 4, 0, 0, 3, 1, 3, -2, 
          6, -17, 12, 10, 13, -3, -8, 7, -21, -12, -1, 2, -24, -26, -25, 13, 9, -48, -14, 1, -16, -19, -20, 6, 27, 14, -215, -5, -27, -16, -33, 49, 
          24, 14, 43, -39, -23, -33, -38, 20, 90, 60, 35, 33, -20, 55, -45, 83, 62, 96, 44, 49, 90, 49, 77, -5, 2, 2, 13, -0, -23, -11, -31, 2, 
          2, 1, 2, -1, 4, -1, -2, -62, -21, -57, -38, -11, -54, -65, -56, 8, -46, -43, -7, 19, 18, 15, 16, 0, 5, -15, -75, 19, 18, 19, 18, -2, 
          -14, 13, 17, 11, 14, 11, 16, 3, -6, 22, 15, 14, 9, 15, 19, 16, 3, 15, 11, 8, 17, 33, 17, -3, 2, -4, 0, 0, 1, -3, 2, -40, 
          -5, -14, -39, 6, 4, 12, -4, 16, 16, 0, -2, 23, 13, -23, -7, 25, 19, -14, -13, 9, 11, -19, -10, 16, 11, -3, -6, 12, 3, -6, 10, -14, 
          5, 26, 55, -1, -4, -8, 14, -47, 63, 71, 27, -7, 59, 26, 30, 82, 101, 82, 50, 37, 87, -9, 46, 32, 6, -2, -21, -0, -14, -13, 32, 5, 
          3, 1, 4, 1, -1, -1, 3, -150, -118, -116, -90, -150, -170, -77, -67, -17, -46, -37, -26, -66, 51, -59, 29, 11, -9, -10, -0, 43, -1, -10, -20, -8, 
          -12, -17, 103, -9, -5, -4, -24, -27, 1, 107, 13, -25, -7, -18, 0, -16, 79, 26, -24, -11, -5, 13, -3, -3, -1, -1, 4, 2, 5, -2, 5, 29, 
          -12, -2, 6, 11, -20, -33, -8, 12, -6, -17, -27, 2, -7, 9, -12, 30, 49, 25, 20, -5, -5, 12, 8, -23, -2, 3, -3, 9, 4, -13, 6, -31, 
          3, -35, -13, 24, 47, 4, 23, -26, -18, -22, -8, 10, 47, 11, 50, -107, -62, -63, -44, 25, -106, 41, 25, -53, -28, -2, -12, 19, 8, 22, 21, 4, 
          -3, -3, 2, 5, -3, 5, 1, 63, 63, 50, 16, 77, 76, 8, -34, -14, 44, 23, 63, 21, 49, -19, -14, 58, 51, 46, 43, -18, -31, -24, -16, 41, 
          44, 32, 22, -4, -1, -25, -20, 16, 22, 22, 12, 2, -18, -8, -20, 20, 10, 2, -5, 13, 39, -16, -29, 0, -2, 0, 5, 1, 3, -3, 4, 7, 
          4, -27, 2, 8, 33, 7, 33, -8, -23, -21, -8, -5, 94, 88, 1, 4, -19, -7, -16, 5, -9, 2, -20, -20, -26, -39, -11, 9, 16, 32, 8, -25, 
          -25, -38, -34, -15, -16, 11, 37, 1, -52, -64, -53, -46, -22, -19, 20, 10, -29, -95, -47, -43, -65, -26, -53, -9, -6, -4, -15, -22, 5, 7, 11, 3, 
          -4, 2, 3, -3, 5, -3, 2, 34, 41, 47, 10, 119, 106, 72, 100, -17, -2, 11, 32, 60, -13, -29, -21, 32, 5, 12, 10, 39, -13, -3, -55, 7, 
          9, -8, 18, 12, 8, 11, 6, -16, -23, -13, -1, -1, -1, 1, 19, -10, -12, -10, -12, -25, -12, 5, 22, -3, 3, 0, 3, -2, 4, 2, 3, };





int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif
