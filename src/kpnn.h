#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x8x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS1 = 17;
int OUTPUT_BIAS2 = -3;
int HIDDEN_BIAS[N_HIDDEN] = {-20, -39, -2, -19, -15, 8, 6, 25, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {14, -19, -10, -6, 15, 14, -15, -17, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {3, -2, -3, 15, -10, -4, -3, 4, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -13, 2, -2, -8, -5, -0, 22, -14, 5, -4, -11, -5, -17, -1, 13, -18, 8, 18, 10, -3, -12, -16, -10, -23, 17, 18, 7, 5, 3, 3, 14, 3, -2, 
          1, 20, 16, 10, 15, -2, 14, -12, 16, 24, 12, 21, 15, -16, 6, -11, 8, 23, 7, 25, 8, -10, 5, 18, -13, 9, 10, 9, -1, 7, 12, 3, 
          -1, -2, -1, 1, -1, -4, 5, 23, -32, -16, -44, -45, -59, 29, 25, 22, 10, -16, -15, -30, -38, 4, 21, 12, 16, 10, 4, -53, -50, -35, -25, -5, 
          10, 10, 18, -2, -16, -37, -18, -6, 10, 4, 4, 7, -2, -9, -8, 1, -14, -17, -10, 23, -3, -2, -34, 2, 5, 2, 2, 4, 4, 0, -3, 28, 
          -7, -4, 0, 18, 6, 6, 17, -0, 12, 8, -2, 17, 9, -13, -24, 5, 13, 8, 4, 0, 6, -4, -18, -1, 7, 8, -3, -2, -7, -15, -10, -18, 
          -1, 8, -4, -10, -9, -6, 3, 10, -3, 3, -11, -29, -5, 9, 14, -11, -18, -23, -22, -27, -32, -58, -45, -4, 14, 15, 9, -5, -7, 8, -15, 3, 
          -3, -3, 0, 0, 4, 2, 5, 19, 10, 13, 24, 23, 25, 6, 28, -4, 33, 18, 34, 28, 29, 9, -16, 22, 10, 6, 21, 19, 12, -9, -18, 7, 
          3, 15, 6, 4, -5, -13, 11, -4, 4, 3, 7, -10, -2, -13, 7, -3, 13, 8, -4, -8, -51, -25, 2, 4, 5, 1, 0, -2, 3, 1, 2, 10, 
          7, -4, 21, 19, -4, 1, 48, 5, 3, -1, 9, -8, -13, 2, 2, 7, 6, 4, -4, -10, -0, -5, -11, -9, -2, 5, -12, -0, -16, -2, -13, 7, 
          11, 2, -8, -46, 18, 85, 54, 15, -2, -11, -14, -62, -4, 12, 1, 20, -4, -46, -53, -47, -0, 26, 12, -26, -12, 1, -3, 1, 17, 20, -2, 5, 
          3, 1, -1, 2, -4, 4, 0, -7, 52, 38, 1, 1, 26, 22, 20, -9, 12, 5, 13, 5, -4, -5, -41, 23, 16, 15, 11, 8, -4, -13, -3, 26, 
          10, 13, 8, -11, -4, 10, -8, 10, 8, 6, 23, -11, 36, -8, 12, 19, 12, 1, 22, -5, -6, 97, -9, 5, -3, -4, 5, 1, 4, 4, 1, -2, 
          6, 12, 6, 41, 55, -1, -17, 12, 6, 16, 9, 5, 17, 9, 10, 11, 9, 10, 11, 9, 16, 17, 18, 10, 13, 17, 12, 15, 13, 15, 14, 4, 
          14, 11, 13, 16, 7, 17, 14, 9, -3, 10, 19, 15, 14, 11, 15, -43, -11, -32, 5, 10, -7, -9, -21, -4, -3, 1, 0, -22, -55, -2, -1, 0, 
          5, -4, 0, -1, 1, -4, -3, 34, 30, 27, -11, 18, 31, 20, 26, 6, 29, -3, 9, 6, 28, 36, -14, 20, 8, -5, -9, -21, 29, -22, -25, 5, 
          -0, -1, -12, -16, -19, -14, -20, 2, -3, -9, -0, -10, -16, -16, -16, 0, 2, -7, -1, -7, -16, -12, -14, 3, -4, 4, 0, 0, 3, 1, 3, -9, 
          -8, -22, -4, -3, 7, -0, -5, 4, -13, -9, -3, 6, -15, -12, -6, 6, 2, -20, -3, 1, -9, -13, -18, 10, 17, 8, -123, -3, -18, -12, -14, 24, 
          8, 18, 23, -29, -16, -17, -21, 3, 51, 35, 23, 15, -17, 32, -32, 55, 53, 61, 36, 45, 44, 24, 57, 4, -3, 20, 5, 1, -14, -8, -16, 2, 
          2, 1, 2, -1, 4, -1, -2, -39, -32, -30, -33, -33, -35, -29, -28, 5, -21, -33, 0, 11, 10, -1, 9, 3, -8, -12, -40, 9, 14, 9, 6, -1, 
          -14, 6, 6, 2, 7, 8, 10, 5, -4, 16, 6, 6, 3, 10, 11, 5, 6, 12, 6, 0, 15, 21, 9, -3, 2, -4, 0, 0, 1, -3, 2, -15, 
          -2, 2, -25, -6, 5, 2, 8, 15, 9, -4, 1, 4, 7, -11, -4, 23, 9, -7, -11, 3, -2, -8, -16, 16, 5, 4, -1, 4, -0, 1, 9, -13, 
          9, 20, 39, 3, 2, 7, 16, -13, 31, 45, 16, 3, 21, 14, -4, 43, 54, 48, 36, 17, 53, 3, 47, 19, 6, 0, -2, -5, 1, -7, 12, 5, 
          3, 1, 4, 1, -1, -1, 3, -82, -59, -70, -39, -77, -89, -34, -43, -4, -26, -53, -30, -15, 22, -25, 39, 10, -1, -3, -2, 30, 1, -7, -6, -1, 
          -4, -5, 48, -0, -10, 5, -2, -12, -3, 59, 12, -21, -4, -1, 0, -10, 59, 11, -7, -3, -3, 9, -3, -3, -1, -1, 4, 2, 5, -2, 5, 27, 
          8, -1, 0, 7, -19, -20, -0, 4, 1, -8, -19, -7, -7, 4, -6, 18, 25, 24, 10, -2, 0, 6, 5, -13, -4, 3, 1, 11, 10, -4, 2, -22, 
          -0, -13, -6, 8, 35, -1, 6, -13, -13, -3, -10, 9, 37, 18, 52, -59, -30, -59, -30, -13, -51, 20, 16, -27, -12, 3, -5, 6, 9, 15, 10, 4, 
          -3, -3, 2, 5, -3, 5, 1, 31, 48, 28, 18, 45, 51, 10, -9, -9, 35, 14, 24, 17, 9, -12, -15, 33, 21, 33, 24, -7, -6, -32, -12, 25, 
          31, 31, 16, -8, -7, -16, -11, 12, 14, 11, 2, -6, -12, -1, -19, 13, 5, 4, -7, 5, 18, -12, -18, 0, -2, 0, 5, 1, 3, -3, 4, 3, 
          -5, -12, 1, -4, 27, 5, 18, -1, -13, -14, -5, 2, 73, 43, -2, 11, -11, -5, -4, 6, -15, 5, -12, -12, -10, -22, -12, 7, 4, 20, 2, -24, 
          -18, -26, -22, -10, -6, 7, 25, 4, -29, -33, -36, -23, -17, -16, 19, 8, -18, -27, -29, -26, -43, -27, -32, -7, -9, -7, -4, -22, -0, 7, -1, 3, 
          -4, 2, 3, -3, 5, -3, 2, 13, 10, 22, 13, 69, 63, 40, 28, -10, 7, 15, 17, 37, -9, -2, -10, 24, -8, 7, 5, 10, -17, -8, -18, 8, 
          2, -1, 7, 1, 7, 6, 9, -6, -14, -7, -2, -5, -2, 5, 8, -9, -9, -8, -8, -15, -4, -2, 13, -3, 3, 0, 3, -2, 4, 2, 3, };



int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif
