#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS1 = -34;
int OUTPUT_BIAS2 = -17;
int HIDDEN_BIAS[N_HIDDEN] = {-10, -10, 22, 4, 30, 38, -7, 22, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {15, 32, -26, 15, 10, -14, 26, 22, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {4, 4, 8, 10, 12, -1, -8, 4, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -4, 2, 1, 3, 3, 3, 2, -2, -25,
          22, 42, 36, 32, 40, 11, 3, -22,
          4, -34, 46, -3, 41, 13, 8, -23,
          39, -29, -2, 10, 19, 3, 21, -3,
          -1, 2, -16, -22, -34, -30, 6, -15,
          -1, 105, -6, 84, 9, -14, 10, 2,
          -20, 106, -51, -8, 16, -7, 12, 1,
          5, 3, 4, -3, -2, -1, -1, -1,
          0, -2, 5, -4, -2, -4, -2, 13,
          -42, -54, -7, -18, -55, -19, -27, 12,
          1, -21, -8, -25, -33, 11, -44, 71,
          16, 39, -48, 14, -14, 1, -6, 7,
          51, 23, 52, 12, -18, -2, -5, 32,
          6, 101, -13, -9, -18, -15, 3, 10,
          84, -3, -14, 46, -5, 7, 27, -4,
          -4, 5, -2, -4, 2, 0, 1, 1,
          2, 4, 1, 3, 1, -4, 5, -18,
          -10, -1, -11, 4, -39, -15, -10, -9,
          -14, 2, 2, -1, -25, -40, -18, -34,
          -46, -4, 14, 6, -11, -18, -11, -50,
          -22, -18, -2, 23, 25, -17, -11, -68,
          -27, 29, 12, 53, 13, 6, -37, 4,
          1, 43, 1, 20, 12, -1, -4, 2,
          2, 1, -4, 3, -3, 4, -1, 1,
          -2, 1, 1, 1, 3, 5, 1, 13,
          17, -26, -29, 19, -44, -72, -55, 10,
          13, 34, 1, 16, -1, -3, 26, 30,
          16, 21, 5, -12, -35, -4, -22, 31,
          23, -2, 27, 9, -36, -35, -14, 25,
          29, 6, 11, 12, -9, -26, -32, 30,
          16, -10, 7, 14, 13, -29, -42, 3,
          5, 3, 2, 2, 1, -2, 1, 3,
          5, -3, 3, 2, -4, 0, -4, 18,
          20, 22, 39, 56, -10, 1, 11, 19,
          32, 31, 27, 9, 5, -0, -1, 11,
          25, 26, 11, 31, 16, -2, -11, 19,
          17, -1, -35, 10, 16, 9, 5, -2,
          13, -38, -27, -53, 7, 13, -43, -19,
          -90, -65, -36, -6, -61, 55, -45, -2,
          5, 0, 4, 3, -1, -2, -1, -3,
          -2, 4, 5, 2, -4, 2, -2, 41,
          -48, 4, 56, 9, 11, -42, -35, 15,
          5, -1, 25, 50, 2, 34, -45, -22,
          -5, 25, 12, -7, -8, -44, -41, -32,
          -13, -13, 53, 9, -3, -21, -27, -34,
          -11, -25, 46, -13, -12, 0, -19, -20,
          -14, 22, -24, -18, 29, 9, -14, -1,
          2, 0, -4, 4, 4, 3, 0, 2,
          0, 1, 2, 4, 3, 0, 5, -6,
          -6, -28, 11, 30, 26, -10, -7, -0,
          3, -14, -4, -5, -19, -14, -3, 2,
          15, -12, -9, -21, -20, -51, -46, -12,
          25, 12, -15, -57, -1, -74, -36, -16,
          22, 14, -7, -20, -62, -52, -62, 18,
          -36, 31, 11, -35, 4, -33, 11, -3,
          3, 4, -2, 2, 3, 4, 4, -1,
          -1, -3, 2, -4, 5, 4, -1, 1,
          -15, -62, -1, 29, -80, 19, -31, -0,
          8, -33, -8, -66, -20, 24, -2, -37,
          -0, -34, -4, 3, 45, -28, 8, -41,
          -33, -44, -15, -1, 16, 11, 14, -34,
          -40, -15, -4, 20, -3, 3, 11, -33,
          -32, 1, -13, 6, 3, 11, 29, 0,
          -4, 4, -4, -4, 2, 3, -1, -1,
          5, -1, -3, -4, 3, -3, 4, 35,
          34, 3, 49, 2, 7, 2, -17, 33,
          21, 7, -0, 11, 4, 1, -15, 43,
          23, 35, -2, 17, 3, 12, 3, 37,
          13, 45, -3, 9, -11, 7, -10, 58,
          35, 37, -17, -31, 31, 36, 50, -54,
          35, -11, 27, -2, -27, -1, 28, 3,
          3, 4, 3, 2, -4, 5, -1, 1,
          -3, -4, 5, 0, 0, -2, 3, -12,
          -6, 25, 22, 36, 22, 25, 31, 2,
          2, 31, 56, 24, 54, 3, -28, -12,
          2, 40, 37, 6, 13, 10, -5, -18,
          -11, 3, 4, -4, 9, -2, 4, -12,
          -14, 9, -9, -25, 3, -12, -13, -8,
          -20, 86, -31, -26, -25, -19, -10, 4,
          -4, 4, -2, -4, 2, 0, 5, 1,
          -3, -4, 3, -1, 5, -3, 5, -3,
          13, -13, -1, 16, 18, 42, 6, -3,
          -23, 63, 24, 9, -18, 14, 21, 5,
          -4, -12, 30, -18, -16, 17, 27, -14,
          -12, -21, 12, 26, 5, -37, -0, -2,
          -19, -40, -37, -1, -20, -3, -3, -10,
          -18, -41, -16, -16, 24, 29, -43, 4,
          -3, 1, -3, -1, 3, -3, 3, -4,
          2, -1, -1, -4, 2, -2, 0, -41,
          10, -22, -8, 19, 67, 29, -71, -44,
          -1, -23, 20, -107, -62, 79, -3, -32,
          -11, 10, 62, 36, -0, 22, -21, -18,
          -11, 8, 26, 22, -11, -8, -7, -12,
          6, 19, -34, 23, -25, 19, -11, -30,
          -3, 8, -41, -6, -9, -4, -12, 5,
          5, 2, 2, 3, 0, 0, -2, 3,
          0, 1, 2, 2, -2, 0, -2, 10,
          8, 20, 18, 76, 60, 6, -29, -2,
          8, 39, -2, 6, 13, -11, -23, -2,
          8, -0, 10, -16, 0, -13, -30, -20,
          18, 60, -22, -7, -26, -39, -13, 56,
          47, 47, 66, 45, 26, -12, 36, 72,
          66, 70, 70, -2, 34, 7, 14, 5,
          4, 1, 5, 1, -2, 2, 3, -1,
          3, -2, 0, -1, -4, -3, 3, -19,
          18, -25, -39, -30, 0, 13, 7, -38,
          -25, -40, -9, -32, -14, -6, -27, 5,
          13, -25, 24, 65, 7, 16, -3, 17,
          1, 33, 49, 46, -8, -1, -1, 18,
          39, 26, 20, 6, -11, -15, 2, 4,
          60, 63, 49, 12, -20, -5, -1, -1,
          -1, -2, 4, 5, 3, 0, -4, 4,
          2, 1, 1, 5, 2, 5, 2, -21,
          -16, 12, -32, -8, -12, 18, 54, -15,
          -33, -16, -8, 17, 9, 26, 26, -24,
          -20, -17, -6, 2, 51, 40, 35, -15,
          -28, -40, -13, 4, 30, 42, 17, -27,
          -4, -1, 46, -6, 48, 37, -15, 39,
          -33, 25, 62, -28, -11, -49, -19, 5,
          4, 2, 0, 4, 0, -1, 0, 4,
          -4, -4, 2, 0, -3, 2, -4, -13,
          29, 60, -32, -34, -11, -16, 26, 1,
          -17, -20, -37, -80, -35, -2, 36, 17,
          11, -8, 8, -33, -21, -5, 6, 14,
          21, -12, -11, 2, -2, -4, 28, 5,
          0, -22, -17, 22, 9, 18, 22, 7,
          -14, -22, 87, 46, 42, 19, 20, 1,
          5, 0, 2, -1, 4, 0, 4, };
int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif