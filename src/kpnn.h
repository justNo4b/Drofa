#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS = -17;
int HIDDEN_BIAS[N_HIDDEN] = {11, 9, 40, -6, 1, 37, 17, 2, };
int OUTPUT_WEIGHTS[N_HIDDEN] = {27, 14, 17, -33, 34, -19, -19, 21, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {-1, -3, -1, 1, 0, -4, 2, 4, -22, -13, -2, -13, -13, -8, 12, 40, -22, -28, -19, -7, 8, 7, 21, 21, -26, -27, -24, -15, -1, 24, 16, 36, -25, -27, -37, -7, -12, 25, 26, 18, -53, -10, -23, 21, -4, 3, -23, -8, -15, -55, 11, -40, -14, 29, -22, -7, 2, 4, 1, -3, -3, 2, -4, 2, -2, 1, -1, 3, 1, 4, -4, -3, -12, 44, -33, -13, -6, -27, 11, 34, 16, -22, 5, -26, -51, -22, 1, 28, 12, 2, 2, -3, -24, -6, -4, 26, 13, 16, -17, -6, -14, -6, 14, 20, 7, 2, -7, -0, 7, 29, 28, 23, 9, 3, -22, 9, 70, 39, 21, 13, 0, -3, 2, 1, 4, 4, 2, 4, -2, 0, 0, 0, 0, -2, 2, 1, 5, 10, 12, 94, 15, 25, -21, -7, 9, 1, -7, -7, -6, 15, -8, -10, 2, 8, -3, 10, 31, 18, 26, -17, 5, -8, 6, -43, -22, -18, -9, -13, -14, 38, 79, 4, 119, 70, -24, 101, -10, -19, 96, 41, -18, -5, -35, -8, 4, 5, 0, -2, 5, -3, 2, -1, 1, -1, -3, 4, 3, 0, 4, 2, -8, -1, -50, -4, 7, -18, -24, -33, -54, -5, -11, -11, 40, 39, 6, -15, -12, 7, -13, 23, 42, 9, -5, -25, -7, -10, -7, 110, 32, -22, 8, -4, -7, -17, 106, 9, 4, -4, -8, -2, -6, 31, 9, -14, 82, -11, 2, 5, -4, 2, -3, 0, -2, 2, -3, 0, -2, 2, -3, -4, -4, -1, 2, 5, 30, 19, -4, 28, -1, -2, -1, -19, 20, 20, 9, 0, 7, -12, -1, -17, 30, 7, 31, -6, 7, -7, 23, -2, 36, 8, 70, 0, -2, -13, -16, 42, 31, 42, 87, -1, -15, 57, 58, 45, -39, 97, -2, 1, -24, 16, -1, -2, 0, -3, -1, 5, 1, 3, 3, 2, -4, -1, 0, 3, 2, -3, 0, 0, 0, 26, -11, 38, 20, 16, -15, 51, 4, -12, -8, 50, 32, 27, 7, -46, -5, -22, 33, 36, 14, 36, 14, -10, -8, -13, 1, -3, -2, -5, 14, 6, -7, 7, 7, 1, -29, 17, -22, 6, -7, 3, 52, -14, -27, -15, -21, -1, 2, 4, 2, -4, 1, 3, -4, 1, -1, 5, 5, 5, -2, -4, -4, 0, -5, -3, -14, -33, -66, -60, -12, 28, -12, -6, -28, -17, -14, -20, 5, 8, -2, -13, 5, 13, 27, 1, 31, 3, -2, -11, 15, 12, 21, 30, 24, 26, 4, -15, -51, -74, -10, 34, 29, 19, 7, 18, -25, -34, 16, -1, 35, -23, 0, 0, -2, -3, 0, 1, -3, -1, -4, 4, -1, 0, 3, 4, 1, 5, -15, 34, 51, 62, 18, 53, 55, 31, 2, 1, -21, 13, 47, 46, -14, 26, -29, -20, -14, 7, 2, -7, 3, 2, -17, -17, -27, -51, -20, 1, -11, 1, -21, -58, -31, -15, 2, 11, 5, -3, -21, -109, -20, -10, -3, 2, 1, -14, 1, -3, 4, -1, -4, -1, -4, 2, -2, -4, -4, 4, 4, -3, 2, -1, -6, -7, 2, -45, -10, -20, -8, -17, -6, -15, 7, -7, -0, -15, -25, -23, -12, -13, -8, 16, 1, -2, -11, -19, -31, -12, -2, -7, 17, 24, -1, -15, -43, -18, 2, -13, 37, 24, 13, -47, 23, -54, 52, 20, 24, -24, 3, -0, -4, 0, -3, 5, 5, 4, -2, 0, 1, -3, 1, -1, 2, -4, 4, -3, 13, 15, -14, -12, -18, -54, -47, -7, 1, 26, 31, 33, -22, 8, -18, 24, 18, 15, 8, 11, 2, -29, -15, -12, 20, 18, -4, 13, 0, -42, -29, -22, 17, 15, -4, 4, 16, -16, -16, -33, 15, 0, -6, 3, -4, 4, -23, -36, 3, 3, 0, -4, 5, -2, 2, 5, 2, 2, 3, -3, -1, 2, -3, 2, 13, -6, -9, 17, 25, 66, 40, -9, 4, -5, 40, 13, 11, -17, 15, 20, 9, 9, -14, 1, -8, -6, 8, 13, 11, 7, -45, -12, 25, -9, -15, 6, -0, -25, -45, -25, -13, -10, -25, -18, -23, -9, -31, -12, -7, -40, 12, -32, 0, 5, 5, 5, 3, 2, -2, 3, 4, 0, -3, 4, 4, -4, 3, -2, -45, 25, -53, 62, -39, 13, 46, -6, -41, -24, 57, 58, 31, -7, 17, -16, -13, -26, 11, 80, -9, 25, -12, -11, -27, -10, 13, 26, -4, -7, -1, -6, -15, -17, 3, -25, -2, -0, 18, -19, -19, -18, 2, -29, -6, 14, 6, -8, -3, -4, 4, -4, 2, -1, 2, -4, -4, 4, -4, 1, -4, 0, -1, 4, 2, -8, 31, -12, -21, -23, -14, 0, -2, -3, 17, 0, -5, -2, -3, -3, -6, -31, 11, -3, 10, 10, 15, 6, 2, -23, -6, 13, 18, 26, 16, -22, 6, -26, -7, 6, 14, 18, 33, -41, 20, 29, 19, -12, 38, 23, 41, -21, -2, 0, 0, 5, 1, -2, 1, -1, -1, 2, -3, 2, -4, 3, 1, 4, 26, 86, -36, 6, 18, 33, -44, -55, 5, 18, -18, -7, 65, -13, 44, 50, 31, -2, 35, 6, 10, -19, -21, -1, 26, 12, 39, 10, -4, -18, -14, -38, 29, 25, 15, 13, -21, 4, -1, -14, 28, 36, 8, 11, -4, 7, -3, -25, 0, 0, -1, -1, 1, 2, -1, -1, 5, -4, 4, -3, -2, -1, -4, 2, -13, -20, 4, -26, 4, 9, 9, -9, -27, -7, -23, -6, -6, -8, 2, 1, -21, -35, -7, -6, -16, -7, 9, -3, -24, 9, -28, 46, 18, 1, 7, -1, 125, -37, -3, 22, 2, 6, 48, 1, 138, 86, 41, 30, 4, 5, 1, 5, -1, -3, -2, -1, 2, 5, -2, -2, 0, -4, 3, 1, -4, -3, -1, 4, 9, 2, 81, 62, 15, -32, 47, 9, -0, 3, -55, -8, 83, 14, 5, 2, 12, -1, -17, -14, 3, 11, -1, 7, 9, -18, 34, -19, -2, 3, -4, -1, 27, -7, 29, -79, -24, 4, -11, -13, 19, -15, 6, 31, 1, -7, -14, -10, 4, 1, -1, 3, -4, 2, -3, 0, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif