#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS outputs
// inputs = passersColumn + AllPawns
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS = -34;
int HIDDEN_BIAS[N_HIDDEN] = {20, 7, 1, 6, 3, 2, 16, -3, };
int OUTPUT_WEIGHTS[N_HIDDEN] = {13, -35, 30, 16, 21, 22, 14, -15, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {-34, -18, -53, -6, -23, -33, -25, -52, -4, 17, -4, 14, 15, -12, -7, 10, -1, 4, 8, 3, 31, -4, 7, 8, 8, 8, 12, 1, 26, 5, 29, 29, 8, 2, -4, 12, -11, 19, -15, 59, 13, 5, 58, 2, 12, 27, 83, -14, -23, -44, 48, -34, -22, 11, -50, 6, 55, -12, 46, 6, 17, 46, 25, 18, 3, -2, -3, -2, 4, -2, -4, -4, -20, 41, 12, -16, -11, -31, 37, 4, 33, 7, 16, 7, -14, 1, -51, 7, -0, 2, 42, -2, -7, -17, -3, 5, -7, 36, -14, -28, -30, -4, 1, 29, -7, -16, -18, 6, -18, -1, -8, 16, -9, -23, -14, 15, -7, -5, 3, 16, 5, 2, 5, 4, 5, 3, 0, -2, 19, 4, -19, 11, 11, 33, -2, -12, 6, 10, -2, 5, -2, 24, 3, 12, 6, 7, -1, -4, 4, 20, 26, 15, 21, 21, 1, -9, -6, -1, 5, 7, 30, 12, 8, 0, -26, -13, -6, 17, 23, -2, -16, -14, -34, -10, -11, 29, 1, 15, 4, 10, -29, -11, -6, 8, -3, 15, -51, 14, 7, -7, 10, -40, 3, 4, -2, -4, 3, 2, -1, 4, -7, -13, 4, 6, 17, 23, 41, -1, -6, -11, -26, -17, -10, -3, 1, -14, -17, 5, -13, -8, 7, 28, 7, 17, -14, -16, 2, -15, -3, 25, 22, 13, -20, -19, -6, -9, -9, 8, 11, 25, -11, -12, 25, -3, -8, -7, 27, 34, -1, 4, -4, 3, 3, -4, 2, 1, 6, -11, 14, -12, -22, 2, 0, -24, -8, 5, 20, 1, 51, 57, 10, -11, -5, -2, 26, 11, 21, 34, 8, -6, -2, 1, 6, 2, -1, -7, -13, -1, 2, 11, -18, -15, -23, -3, -10, -9, -4, 1, 56, 86, -4, 6, -9, -22, -3, -18, 34, 30, -8, 4, 7, 7, -5, 10, 25, -9, 53, 6, 11, -6, 0, 1, -2, 4, 5, -2, 1, -4, 24, -31, -14, -16, 1, -34, -51, -18, 11, -10, -1, -11, -39, -44, -5, -15, 30, 30, 16, -24, 3, -3, -2, -13, 23, 29, 17, 25, 8, -10, -2, 0, 18, 33, 42, 6, -15, -10, -13, 1, 10, 38, 26, 13, 13, -9, 3, 23, 2, 4, 4, 1, -1, 3, -3, -3, -30, 5, 35, 10, 7, -13, 28, -11, 21, 16, 2, 30, 29, 27, -7, -23, 1, 20, 4, -3, 2, 8, -9, -21, 12, 33, 7, 0, -7, 14, -16, -17, 9, 17, 26, 9, -5, -30, -35, -15, -7, 9, 44, 14, 13, 9, 80, 21, -14, -2, 21, 25, -22, 10, -40, 25, 26, -4, -3, 21, -16, -0, -14, 10, 1, 4, 1, 3, 2, -2, -4, -2, -6, -20, -23, 30, -38, -39, -5, 20, -28, 3, -31, -21, -14, 3, 21, -7, 6, -1, -33, 24, 21, 21, 42, -12, 4, -17, 7, 70, 16, 12, -8, -3, -4, 18, 10, 10, -7, -7, -25, 5, 8, 37, 29, -5, -6, -4, -5, -2, 2, 4, 3, 0, 5, -2, 4, 1, 6, 6, -5, 6, 2, 0, 5, -23, -6, -16, -32, -35, -37, 16, -1, -10, -23, -28, -34, -15, -18, -3, -2, 1, 9, -24, -16, -3, -26, -4, -3, -9, 5, 2, -24, -7, -18, -23, 6, -1, -14, 22, 7, 24, -7, -29, -17, 43, 30, -22, 35, 9, -28, 2, 5, 5, 59, 15, -31, 33, 39, 16, 7, 6, 0, -1, -4, -4, -1, -3, -1, 5, -2, -59, -59, -15, 27, -5, 34, 51, -0, -21, -2, -14, -43, 19, 1, 30, 3, 15, -25, -10, -2, 4, 7, 26, -5, -10, -11, -21, 5, 10, 13, 16, -4, -26, 5, -13, 8, -2, 9, 10, -3, -4, 2, 38, 4, -23, 1, 17, 4, -2, -1, -1, 0, 1, -4, 3, -41, -8, -30, -9, 3, -30, 22, -18, -24, -7, 13, -23, -12, -5, 13, 27, -11, -17, -20, -12, 13, 41, 23, 13, -18, -14, -15, -1, -6, 43, 9, 2, -20, -13, -28, -5, -12, 15, -6, 0, -16, -1, -2, 26, -6, -27, -6, -21, -18, -23, 31, 52, -9, 7, -57, 4, 15, -6, -2, 8, 20, 14, -10, -9, 0, 3, 1, -2, -4, 0, -1, -2, -3, -48, -7, -11, -7, -20, 7, 30, 8, 1, 2, -18, -51, -16, 15, 11, 26, 19, 3, -8, -21, 2, 6, 19, 16, 15, -8, -9, 6, 3, 1, 11, 12, -0, -11, -5, 18, 15, 26, 9, 19, 2, -19, 53, 24, 42, 21, 6, 5, -4, -2, 3, 1, -4, 5, 3, -31, -14, -28, -3, -17, 22, -24, -10, 25, 30, 6, 34, 24, 2, -8, -20, 26, 31, -4, -7, 3, 2, -14, -3, 29, 16, 9, -8, 16, -2, 8, -23, 4, 8, 26, -16, -4, -13, 8, 8, 21, 19, 24, 5, 41, 52, 38, 50, -23, -38, 34, 11, -12, -7, -6, 5, 15, 7, 2, 24, -17, -1, 32, -14, -2, -2, 1, 1, 5, -4, 1, 5, 1, 2, -31, -11, 3, -38, -19, -11, 7, 0, 2, 46, 19, 22, 22, -13, -16, -4, 42, 32, 33, 6, 8, -1, -11, -9, -1, 26, 8, -6, 17, 6, -5, 1, 31, -20, -7, 18, -7, -6, 2, 7, 37, -16, 7, -23, -13, 1, 0, 0, -4, -4, 4, 3, 0, -2, 8, 9, 1, 12, 10, -4, 6, 51, 11, 11, 8, -4, -8, -15, -10, 4, 3, 12, 1, -7, 27, 12, -2, 5, 13, -17, 7, 7, 9, 15, 10, 11, 7, -20, -40, -9, 7, 1, 21, 4, -20, -16, -15, 19, 8, -13, 44, -36, 11, 24, -31, -46, 14, -1, 33, -26, -55, -20, -29, -25, 13, 21, -5, -4, 5, -4, 0, 1, -4, 5, -4, -2, 22, 44, -28, -17, -6, 56, -15, 4, -2, 27, -16, 3, -90, 13, -2, -0, 7, 28, 14, 9, 33, -14, -1, -16, 17, 25, 4, 10, -6, -3, -14, -19, 21, 26, 7, 10, -15, 11, 3, -8, 15, 34, 11, 14, -9, -0, -1, -16, 3, 0, 3, -4, 0, 3, -4, 2, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif