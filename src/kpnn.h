#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS outputs
// inputs = passersColumn + AllPawns
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS = -18;
int HIDDEN_BIAS[N_HIDDEN] = {-3, 31, 15, 7, 2, -3, 2, -37, };
int OUTPUT_WEIGHTS[N_HIDDEN] = {-19, 16, 13, 18, 34, -35, 13, -38, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {55, 9, -12, 23, -6, 27, -20, 18, 11, 5, 30, 38, -21, -16, 7, -14, 7, 28, 48, 76, 20, -35, -12, -5, 5, 19, 40, 18, 42, -5, -5, 3, -16, 15, -5, -20, 60, 1, -22, -18, 2, 28, -17, -39, -10, 22, -19, -51, 20, 27, 18, -30, 39, -45, 8, -22, 4, 9, -12, 17, -21, -2, -55, -6, -3, -3, -2, -1, -3, 1, 4, -3, -2, 45, 32, 14, -11, 9, -19, -55, -0, -0, 42, 59, 55, -5, -2, -14, -20, -16, 51, 53, 32, -14, -20, -19, -5, -8, 0, 36, 6, -7, -21, -18, -3, 10, 16, 15, -8, -3, -3, -13, -14, -4, 26, -38, -33, 65, -3, -19, 1, -2, -1, 2, 3, 5, 4, 3, 40, -15, -12, 18, 6, 17, -18, 31, 28, 26, 6, 58, 24, 12, -11, -38, 27, 27, 11, -16, 4, 15, -23, -14, 19, 18, 42, -6, 10, 3, -28, 5, 4, 24, 40, 2, 1, 35, -20, 37, 12, 41, 57, -4, 5, 97, -11, 59, 35, -76, 38, 10, -12, 57, -49, 11, 4, 5, -7, 9, 4, -12, -18, -10, 0, 4, 5, -2, 4, 2, -4, 3, -30, 17, -3, 12, 25, 15, 0, -21, -34, -34, -41, 27, 10, 35, -7, -20, 1, -21, -1, 32, 39, 19, -2, -6, -14, -27, -11, 89, 20, 6, 22, 26, -13, -7, 41, -11, -20, 5, -24, -6, -2, 6, 59, -7, -18, -19, -6, 1, 1, -2, -3, 2, 0, 0, -1, -1, 34, 93, 0, 10, -3, -6, -49, 41, -2, 22, -7, 27, 6, -27, -12, 19, -6, 9, -6, 1, 31, -14, 19, 11, 9, 21, 7, 0, 37, 25, 1, 49, -0, 0, -24, 7, 19, -3, 21, 28, -7, 7, -33, -30, 26, 79, 18, 36, 63, 32, 20, -4, -12, 1, 37, -43, -55, 91, -22, -17, 11, 16, 22, -14, 4, 0, 5, -4, -2, 3, 0, -1, -12, -52, 53, 38, -14, -32, -6, 77, -49, -2, 23, -15, -15, -22, -21, 52, -39, -21, -6, -31, 6, -63, -27, 29, 2, -24, -7, -13, -23, -21, -2, 61, -14, -34, -6, -1, -15, 21, -11, 5, -7, -53, -9, -18, -0, 44, 0, -2, 0, -4, 3, 5, -2, 3, -4, 5, -35, -13, -4, -7, 11, -3, 92, -11, -3, 11, 4, -23, 20, 162, -17, -20, 19, 26, -2, 10, 12, -8, -13, -33, -2, 40, 18, 24, 15, -20, -16, -22, -13, 36, 32, -4, 13, -32, -25, -16, 20, 86, 5, 77, 11, 4, 72, 10, 21, -40, 70, 91, -1, 5, -53, 99, -8, -5, 14, 25, -10, 14, -18, 2, 4, 1, 3, -3, 1, -1, -1, 2, 24, -2, 14, -63, -38, -29, -61, -31, 22, 18, 33, 31, 60, -3, 44, -10, 6, 19, 16, -7, 30, 45, -11, -39, 24, 21, 37, 10, -3, -20, 4, -21, 29, 31, 35, 40, -4, -16, -24, -11, 19, 46, 14, 8, -17, -12, -23, -12, -4, -2, 3, -4, 2, -1, 5, 0, -6, -17, 18, 37, -6, 22, -1, -9, -25, 0, 33, 43, 10, 65, 5, 18, -4, -1, 8, -10, -9, -9, 6, 7, -19, -0, -5, 22, 10, 25, -4, -9, -7, -28, -46, -35, 50, -24, 30, -25, -1, 29, 76, 74, 29, -18, -7, -34, -1, -8, 56, 49, 23, -23, 4, 4, -7, 54, 5, -9, -29, -12, -20, 5, -2, 5, 1, -3, 3, 2, 1, 3, 48, -22, -9, -40, -12, -70, -42, -45, -30, -2, -24, -21, -34, -44, -74, -16, 39, 9, -2, -19, 19, 18, -8, 13, -5, 12, -0, 12, 50, 18, 7, -5, 10, 22, 19, 10, 45, -18, -10, 6, 22, 62, 75, 24, 93, -8, 18, 25, 2, 4, -4, -1, 4, 1, -1, 2, 56, 15, -10, 8, -3, 19, 23, 4, 21, 15, -5, 39, 14, 10, 16, 14, 19, 5, 11, 21, 18, 23, 52, 15, 42, 33, 27, -10, -4, 6, 1, 17, 24, 36, 13, -8, -15, -30, 8, 31, 56, 37, -18, -35, -24, -32, -56, 23, -3, 13, -64, -31, -17, -27, -10, -13, -33, -1, -8, 2, 3, -7, 7, -12, -2, 2, 1, 2, 0, 3, 4, -2, -6, 31, -3, 18, 12, 90, 82, -27, -25, 8, -39, 38, 73, -25, -8, -27, -15, -11, -19, 9, 6, 34, 1, -14, -19, -15, -6, -22, 1, -2, 25, 8, -26, -44, 8, -16, -15, 1, 23, 44, -22, 3, 41, 34, -18, -5, 56, 44, 1, 0, 2, 5, 5, 1, 2, -1, 84, 91, 28, -12, -25, -13, -10, 4, -0, -19, -11, -13, -14, -7, 24, -34, -5, -2, 15, 37, -29, -20, -5, -21, -7, 2, 4, 14, -24, 1, 7, -20, -49, 29, 45, 13, 20, 12, -7, -2, -6, -4, 71, 2, 41, 7, -31, 20, 103, -102, 1, 39, 4, 12, 49, 12, 13, -5, 3, -1, -5, -31, 13, -19, -3, -1, -1, 5, -1, -3, 5, 4, 1, -62, 80, -12, 17, -56, 6, 26, 12, 20, 15, -21, 76, -71, 14, 8, 8, 6, 27, 41, -6, 10, -9, -83, -0, -2, 3, 11, -8, -14, -8, -5, -8, -21, 2, -43, 11, -3, 8, -14, -2, -28, -63, 4, 8, -6, -8, -21, 4, 5, 2, 0, -2, -4, -1, 2, 12, -3, -12, -42, -10, -2, -11, 16, -39, -24, -41, -30, -63, -31, -19, 18, -4, -16, -32, -36, -28, -15, -7, 14, -1, -32, 14, 18, 36, 9, 13, 25, 4, -32, -19, 20, 48, 14, 37, 23, 5, -63, -43, 15, 26, 21, 25, 29, -46, 25, -38, -17, 38, 20, 28, 1, 16, 12, 6, -3, 14, 11, 31, 12, 3, -2, 1, 5, 1, 1, -4, -4, 13, 32, 86, 15, -13, 47, 3, -2, -13, -7, -13, 7, 70, -3, -44, -0, -25, -25, 1, -1, -15, 12, -44, 4, -11, -16, -27, -47, -34, 4, 8, 2, -13, -49, -15, -2, 17, -15, -5, 5, -24, -39, -23, -39, 7, -4, -2, -4, 1, -4, -1, 0, -1, 0, 2, -4, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif