#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS1 = -5;
int OUTPUT_BIAS2 = -9;
int HIDDEN_BIAS[N_HIDDEN] = {-4, -15, -27, -3, 4, 9, -14, 24, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {-26, -52, -10, -17, 13, -43, 26, 14, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {-4, -65, -8, -2, 14, 24, -8, 9, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          0, -1, 5, 5, 5, 5, 0, 4, 10,
          10, -10, 26, 0, 17, 9, 9, 11,
          10, -1, 3, 7, 20, 24, 14, 25,
          25, -2, -17, -1, 4, 13, 10, 38,
          11, -2, 7, -21, -25, -13, -7, 18,
          12, -20, -14, -34, -4, -17, 32, -26,
          39, -36, -14, -14, -4, 5, 1, 1,
          4, 1, -3, -2, 5, 5, 3, -3,
          3, -3, 0, 3, -3, 0, 2, 0,
          4, 16, 13, 15, 23, 48, -7, -11,
          -1, -18, -13, -21, 6, -0, 2, -20,
          -13, -20, -20, 11, 29, 13, 5, -16,
          -13, -2, -17, 1, 23, 33, 9, -18,
          -22, 2, -6, -8, -1, 13, 24, -16,
          -10, 5, 3, -6, -12, 28, 38, 1,
          4, -4, 0, 3, 2, -2, -1, 0,
          -1, 2, -2, 4, -1, 0, 1, -14,
          -28, -20, -21, -1, -7, -37, -34, -7,
          -25, -41, 7, -2, -13, -13, 1, -6,
          -6, -38, 14, -13, 0, -22, 14, -2,
          -2, -31, -43, -43, 5, -9, 15, 23,
          -33, -0, -41, -34, 12, 14, 12, 22,
          23, -28, -33, -28, -26, -21, 3, 5,
          -2, 3, -3, -3, 4, 2, -2, 1,
          -2, -3, 3, -1, 1, -3, -4, -9,
          -7, 11, -5, -12, 15, -23, -24, -6,
          -7, -24, -4, -26, -27, -7, -10, -28,
          -13, -9, -28, -6, -9, -6, -6, -34,
          -35, -29, -23, -8, -3, -9, -30, 1,
          -13, -14, -8, 6, -4, -17, -3, -3,
          -21, 15, -6, -1, 11, -26, -1, -4,
          4, 4, -4, 4, -3, 1, 2, 0,
          2, 5, -4, 5, -4, 4, 1, 15,
          -3, -1, -1, -3, 22, -5, -25, 11,
          4, 13, 8, -23, -3, -17, -16, 4,
          5, 1, 11, -27, -14, -39, -42, -3,
          4, 1, 4, 0, -15, -39, -12, -15,
          19, -1, 31, -12, -42, 35, -8, -3,
          46, 11, 31, 20, 11, 69, 17, 4,
          -3, 0, -1, -4, -1, -1, 5, -1,
          -1, 1, -2, -1, 3, 1, -2, 24,
          -37, -21, -6, 8, 3, -14, -39, 1,
          21, -4, -7, -3, 18, -2, -44, -5,
          1, -16, -6, 21, 17, 2, -2, 2,
          -7, 17, 14, 20, 9, 0, -39, 0,
          25, 8, 11, 7, -5, -1, -16, 1,
          23, 26, -7, -27, -5, -4, -20, -3,
          3, -3, 0, -1, -4, 4, -1, -2,
          0, 0, 5, -1, 3, -3, 3, 8,
          4, 19, 5, -4, -25, -1, 7, 11,
          12, 16, 5, 4, 6, 6, 4, 0,
          -14, 15, 6, 11, 15, 40, 13, 6,
          -19, -5, 13, 44, 8, 5, -10, -24,
          -12, -20, -34, 17, -1, 26, -43, 7,
          37, -19, -30, 31, -2, 28, -16, 3,
          1, 4, -2, 4, 5, 3, 1, -1,
          -1, 0, 2, -4, 5, 4, -2, 21,
          63, 64, 13, -8, -19, -11, -0, -2,
          -5, 0, 19, 31, -18, -2, 30, 10,
          5, 38, 6, 17, -12, -11, -4, 23,
          17, 14, 21, -3, -9, -22, -15, 16,
          35, 4, 8, -12, 6, -3, -21, 17,
          38, -6, -5, -10, 11, -8, -27, 2,
          1, -3, 0, -4, 4, 2, 2, 3,
          -2, 1, 0, 2, -1, 3, 5, -12,
          -4, 4, -44, 15, 34, -4, 3, -8,
          -4, 11, 34, 50, 50, 15, 18, -10,
          -4, -7, 5, -8, 4, -9, -13, 11,
          16, -4, -10, -25, -19, -23, -6, 13,
          27, 34, 25, -9, -3, 26, -25, -4,
          -23, 14, 24, -20, -0, -5, 54, 2,
          -3, 3, -4, 5, -4, -3, 2, 5,
          2, -2, -4, 4, -1, 4, 5, 27,
          13, 18, -28, -6, 25, -20, -7, 21,
          55, 22, -31, -28, -18, -24, -18, 23,
          19, 34, -22, -3, -3, 1, -7, 8,
          41, -1, -24, 9, 15, -11, -17, 22,
          50, 21, -0, 15, -6, -4, 4, 9,
          23, 8, 37, 36, 13, 2, 12, 5,
          3, -4, 1, -3, -1, 5, -1, 2,
          -2, -1, 0, -1, -4, 3, 5, -30,
          -29, -20, -28, -21, -24, -9, 5, -14,
          -25, -4, -11, 9, -12, 9, -14, 3,
          -30, -17, 6, 5, -12, -21, -16, -31,
          -13, -7, 12, 14, -12, -12, -37, -18,
          -30, -5, -16, -19, -38, -33, -26, -26,
          -15, -7, -13, 15, -34, -10, -43, 4,
          3, -3, 0, 1, -1, 3, 0, 2,
          -1, 4, -3, 2, -4, -3, 4, 10,
          -16, 20, 47, 7, -14, 12, -45, 6,
          28, 23, 5, 18, 14, 15, 25, 6,
          -2, -37, -13, 10, 9, -8, 32, -12,
          -8, -40, -11, -5, -8, -8, -5, -29,
          -32, -25, -6, -9, -28, -5, -3, -27,
          -20, -33, -14, -5, -8, 13, -29, 3,
          1, 2, 3, 1, -1, 3, 2, 1,
          0, 0, 5, 0, -3, -3, 2, -6,
          2, 26, 11, 49, 81, 6, -18, -3,
          8, -5, 18, 3, 10, 3, -11, 0,
          -5, 4, 4, 4, 4, -13, -21, 0,
          4, 18, -4, -4, -17, -19, -19, 16,
          14, 4, 48, 12, 24, -3, 9, 25,
          45, 69, 30, -9, 16, -27, 33, 5,
          -3, -3, -4, -4, -2, 1, 0, 2,
          -4, -4, -2, 2, -2, 1, 5, 9,
          15, 7, -37, -35, -32, -16, -21, 7,
          -1, 1, -4, -1, 2, -9, 0, 10,
          10, 23, -25, 22, -1, 27, 15, 17,
          10, 20, 44, 17, 11, 18, -2, 20,
          26, 36, 14, 2, -11, -18, 3, 15,
          27, 29, 20, 9, -19, -1, 4, 2,
          2, -2, 2, 4, -4, -3, -3, 1,
          5, 5, -1, -4, 0, 2, 3, 34,
          32, -12, 58, 10, -4, -8, -20, 28,
          35, 1, -10, -6, 4, -4, -15, 21,
          27, 11, -1, 1, -1, 6, -1, 8,
          8, 17, 2, -2, -7, -1, -12, -1,
          36, 23, -11, 6, 17, 38, 39, 56,
          -35, 18, 1, -16, -22, 15, 12, 0,
          -3, 5, 3, -1, -3, 2, -2, -2,
          2, -2, 0, -1, 4, 2, -3, 8,
          -25, -12, 30, 35, 3, -7, 36, -22,
          -14, -6, 45, 30, 21, 14, -5, -7,
          -7, 10, 39, 36, 24, 6, -7, -13,
          -15, 3, 22, 11, 4, 7, 3, -11,
          1, 22, -9, -12, 16, -15, -12, -9,
          11, 17, -18, -12, -13, -17, -4, 5,
          -1, -3, 1, -2, 1, -4, 1, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif