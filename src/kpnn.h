#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS1 = -37;
int OUTPUT_BIAS2 = -17;
int HIDDEN_BIAS[N_HIDDEN] = {-13, -7, 28, 1, 35, 48, -8, 22, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {15, 32, -25, 16, 12, -15, 28, 23, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {4, 4, 8, 10, 11, -3, -8, 5, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -4, 2, 1, 3, 3, 3, 2, -2, -30,
          27, 57, 45, 18, 43, 19, -3, -27,
          1, -42, 50, -1, 45, 12, 7, -20,
          52, -30, -3, 8, 29, 1, 39, -9,
          0, -24, -28, -31, -38, -30, 8, -14,
          -7, 120, -9, 96, 17, -15, 14, -5,
          -15, 123, -55, -6, 14, -16, 18, 1,
          5, 3, 4, -3, -2, -1, -1, -1,
          0, -2, 5, -4, -2, -4, -2, 22,
          -57, -55, -6, -39, -49, -17, -36, 16,
          -15, -11, -15, -16, -31, 10, -43, 77,
          19, 45, -43, 15, -16, 13, -5, 8,
          54, 23, 62, 17, -15, 2, -4, 28,
          3, 126, -15, -13, -19, -19, 7, 13,
          100, -4, -20, 55, -6, 7, 18, -4,
          -4, 5, -2, -4, 2, 0, 1, 1,
          2, 4, 1, 3, 1, -4, 5, -15,
          -12, -3, -9, -2, -33, -19, -11, -12,
          -24, 7, -2, -5, -23, -40, -18, -39,
          -63, -2, 15, 4, -10, -21, -20, -62,
          -29, -12, -3, 24, 26, -14, -15, -86,
          -12, 27, 17, 64, 21, 4, -46, 0,
          3, 56, -11, 16, 13, 12, -7, 2,
          2, 1, -4, 3, -3, 4, -1, 1,
          -2, 1, 1, 1, 3, 5, 1, 12,
          18, -32, -29, 11, -51, -74, -69, 12,
          9, 31, -1, 18, 0, 9, 15, 33,
          10, 23, 6, -18, -43, -9, -23, 29,
          26, 3, 31, 9, -34, -40, -15, 33,
          39, 0, 16, 19, -9, -27, -41, 34,
          16, -12, -11, 12, 16, -39, -49, 3,
          5, 3, 2, 2, 1, -2, 1, 3,
          5, -3, 3, 2, -4, 0, -4, 16,
          20, 29, 40, 67, -7, -1, 18, 23,
          30, 43, 41, 9, 7, -6, 4, 14,
          20, 33, 18, 36, 19, -3, -20, 21,
          24, -1, -42, 7, 18, 14, 8, 1,
          21, -36, -38, -72, -1, -5, -57, -21,
          -96, -85, -50, 2, -82, 66, -51, -2,
          5, 0, 4, 3, -1, -2, -1, -3,
          -2, 4, 5, 2, -4, 2, -2, 53,
          -61, -4, 77, 10, 6, -51, -37, 18,
          10, 9, 35, 53, 9, 54, -53, -33,
          -6, 30, 22, 5, -1, -38, -50, -36,
          -19, -11, 69, 17, 2, -21, -25, -38,
          -19, -28, 43, -10, -7, 1, -21, -27,
          -17, 20, -22, -20, 34, 15, -15, -1,
          2, 0, -4, 4, 4, 3, 0, 2,
          0, 1, 2, 4, 3, 0, 5, -5,
          0, -21, 9, 35, 27, -9, -8, -4,
          -17, -20, -3, -16, -10, -19, -11, 2,
          17, -23, -9, -20, -30, -52, -60, -11,
          29, 12, -10, -62, 6, -84, -47, -10,
          25, 3, -20, -26, -67, -53, -68, 9,
          -33, 30, 19, -40, 13, -38, 11, -3,
          3, 4, -2, 2, 3, 4, 4, -1,
          -1, -3, 2, -4, 5, 4, -1, 6,
          -25, -72, 5, 27, -86, 23, -27, 2,
          6, -29, -4, -88, -34, 10, 2, -46,
          1, -50, -2, -1, 44, -26, -2, -43,
          -36, -51, -12, 2, 16, 9, 20, -49,
          -48, -13, -7, 14, 2, 8, 14, -35,
          -36, 9, -2, 11, 6, 17, 33, 0,
          -4, 4, -4, -4, 2, 3, -1, -1,
          5, -1, -3, -4, 3, -3, 4, 42,
          35, -0, 53, 13, 11, -6, -20, 34,
          23, 12, 6, 14, 9, -1, -19, 53,
          27, 48, 3, 13, 2, 13, 1, 41,
          9, 31, -1, 9, -15, -1, -11, 61,
          43, 46, -21, -37, 41, 36, 52, -50,
          31, -6, 16, -6, -32, -1, 41, 3,
          3, 4, 3, 2, -4, 5, -1, 1,
          -3, -4, 5, 0, 0, -2, 3, -23,
          -3, 19, 33, 39, 17, 24, 29, -9,
          11, 39, 64, 27, 56, 8, -34, -12,
          -7, 45, 45, 14, 36, 10, 1, -14,
          -15, 0, -2, -3, 8, 9, -2, -2,
          -10, 19, -14, -23, 8, -19, -17, -6,
          -19, 92, -36, -37, -26, -23, -13, 4,
          -4, 4, -2, -4, 2, 0, 5, 1,
          -3, -4, 3, -1, 5, -3, 5, -4,
          18, -15, -5, 1, 18, 45, 12, 1,
          -38, 79, 31, 4, -14, 12, 27, 2,
          -7, -13, 27, -16, -12, 10, 25, -1,
          -26, -27, 17, 29, 13, -29, -7, -10,
          -21, -29, -60, -4, -16, -11, -0, -9,
          -21, -45, -23, -18, 12, 39, -52, 4,
          -3, 1, -3, -1, 3, -3, 3, -4,
          2, -1, -1, -4, 2, -2, 0, -66,
          7, -22, -30, 21, 58, 45, -92, -52,
          -16, -27, 8, -110, -82, 90, -4, -33,
          -5, 1, 67, 45, 1, 9, -22, -22,
          -9, 10, 46, 30, -21, -10, -9, -6,
          2, 22, -38, 31, -30, 20, -15, -38,
          -8, 8, -49, -13, -11, -7, -2, 5,
          5, 2, 2, 3, 0, 0, -2, 3,
          0, 1, 2, 2, -2, 0, -2, 14,
          14, 23, 31, 110, 75, 9, -38, -1,
          13, 42, 6, -2, 7, -14, -26, -7,
          15, 3, 18, -20, -8, -7, -32, -20,
          12, 57, -18, -10, -30, -36, -15, 66,
          53, 55, 63, 54, 15, -12, 40, 78,
          65, 77, 73, -6, 40, 4, 13, 5,
          4, 1, 5, 1, -2, 2, 3, -1,
          3, -2, 0, -1, -4, -3, 3, -34,
          17, -38, -46, -58, -4, 15, 10, -50,
          -20, -39, -1, -31, -24, 5, -28, 3,
          27, -25, 47, 86, 8, 11, -7, 23,
          4, 56, 47, 46, -9, -15, 11, 20,
          45, 31, 28, 6, -10, -19, 6, 8,
          67, 57, 49, 28, -22, -7, 3, -1,
          -1, -2, 4, 5, 3, 0, -4, 4,
          2, 1, 1, 5, 2, 5, 2, -17,
          -19, 18, -42, -12, -21, 20, 53, -32,
          -41, -11, -11, 21, -6, 35, 34, -25,
          -35, -7, -8, -3, 69, 55, 40, -25,
          -26, -47, 5, 1, 29, 45, 20, -33,
          -9, 2, 35, -7, 49, 37, -5, 43,
          -31, 36, 74, -20, -12, -62, -15, 5,
          4, 2, 0, 4, 0, -1, 0, 4,
          -4, -4, 2, 0, -3, 2, -4, -14,
          31, 75, -31, -46, -26, -11, 43, -14,
          -18, -23, -27, -93, -46, -14, 45, 13,
          14, -13, -5, -33, -22, 4, 28, 11,
          32, -30, -15, 1, -13, 14, 26, 2,
          2, -13, -17, 22, 12, 30, 41, 6,
          -15, -26, 97, 56, 44, 17, 17, 1,
          5, 0, 2, -1, 4, 0, 4, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif