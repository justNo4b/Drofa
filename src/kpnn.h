#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (16)

int OUTPUT_BIAS1 = 7;
int OUTPUT_BIAS2 = -1;
int HIDDEN_BIAS[N_HIDDEN] = {25, -5, -13, -1, 11, -36, 1, -21, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {-13, -18, -11, -30, 28, 21, 12, 28, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {11, -8, -6, -1, 4, 1, 0, -0, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          1, 5, 0, 0, 1, -3, 0, 2, -1,
          -9, 12, -21, 39, -18, -7, 28, -8,
          -14, 2, 3, -14, 29, 20, 6, -3,
          -28, 12, -24, -12, -5, -2, 20, 35,
          34, -50, -49, -6, 37, 52, 32, 5,
          42, -15, -11, -105, -55, 49, 102, 4,
          62, 65, 25, 89, -111, -41, 41, 3,
          -4, 3, -2, 0, 5, -3, 1, 2,
          -1, -3, -1, -4, -1, 2, 4, -65,
          -61, -98, -40, -58, 16, -30, -75, -21,
          -3, -37, 16, -7, -20, 44, -34, 2,
          -16, -13, 8, -4, -8, -45, -8, -6,
          -6, 9, -36, -11, 13, -29, -9, -5,
          -20, -3, 28, -3, -12, 18, 3, -12,
          125, 35, 27, -21, 15, 24, 28, -4,
          4, -1, 3, -4, -3, 0, 0, -4,
          -4, 5, -1, 0, -1, 1, -2, 10,
          -14, -7, 77, 8, 39, 20, 26, 16,
          10, -3, 12, 14, 15, 15, 42, 19,
          22, -5, -22, 2, 2, 1, 20, 92,
          155, -24, -5, -7, -6, -2, -10, 62,
          -82, -29, 1, -4, -6, 17, 31, 11,
          -8, -12, 13, -29, 2, -16, 49, 2,
          -2, 0, -3, 0, 5, 4, 5, 2,
          1, 3, -1, 4, 4, 1, 4, -1,
          60, 81, 35, 7, 87, 88, 89, -2,
          -27, -9, 33, -134, 49, 55, -1, -22,
          -5, -21, 16, 13, 33, 25, 49, -23,
          -39, -1, -19, -13, 31, 63, 68, -16,
          -27, 12, -29, -16, 0, 14, 50, -25,
          -31, 6, -9, -13, 8, 13, 49, -1,
          1, 4, 1, 2, 5, 0, -2, 4,
          2, 4, 2, -3, -4, 5, 4, 1,
          -8, 56, 20, -25, -26, 11, -7, -10,
          -11, 35, 7, 17, -12, 7, -3, -13,
          -19, 9, 8, 20, -10, 48, 60, -26,
          8, -23, 31, 33, 10, 17, 25, -10,
          -21, -27, -28, 32, 10, -143, -72, -37,
          38, -9, 18, 16, 2, 56, -28, 5,
          1, 2, 4, -1, -1, 0, 2, 3,
          3, -4, 5, 3, -2, 4, 0, 5,
          36, 63, -21, 65, 88, 20, -33, -17,
          10, 49, 34, 61, -2, -5, 1, 21,
          -29, 49, 38, -11, -30, -29, -0, 47,
          3, 79, -4, -0, -2, -19, -24, 49,
          20, 17, -23, 16, -10, 23, -11, 23,
          38, 38, -37, -1, 13, 8, -37, 1,
          3, 0, 1, -3, 1, -2, -3, 2,
          3, 4, 3, -4, 3, 2, 2, -35,
          -21, -25, -68, -139, -59, -7, 25, -15,
          -22, -32, -27, 3, -25, 10, 24, -16,
          -45, -7, 9, 20, -6, 25, 13, -16,
          -53, -40, 11, 38, 43, 9, 6, -13,
          -51, -47, -44, -11, 33, -30, -7, 3,
          -79, -65, -68, 1, -6, -12, -88, 1,
          3, 0, 3, -1, 5, 2, 4, -4,
          -3, -3, -4, -2, -2, -2, 1, -4,
          22, 37, 58, 32, 94, 67, 2, 49,
          -10, 71, 17, 75, -28, 52, 38, 12,
          -10, -7, 2, -9, -47, 8, -7, -3,
          -4, -23, -70, -26, 7, 14, -4, -23,
          -49, -49, 1, 6, 9, 20, -8, -12,
          -55, -38, -32, 12, 20, 11, -6, 1,
          4, 5, 1, -1, -1, 4, 3, 5,
          5, 2, 3, -3, 3, -1, 5, -36,
          -19, -12, -45, -27, -22, 15, 46, -28,
          -29, -24, -7, 25, 7, 28, 28, -34,
          -23, -34, -27, -13, 41, 32, 36, -21,
          -11, -57, -18, -12, 22, 38, 18, -19,
          -16, 5, 26, 21, 49, 13, -6, -20,
          -11, 20, 57, -12, 2, 97, 13, -4,
          -3, -4, 0, -2, 5, 4, -1, -1,
          -4, 2, 1, -1, 2, -4, -1, -47,
          -107, -65, -73, -25, -35, -16, 5, 1,
          -40, -27, -37, -61, -28, -16, 38, 10,
          22, 7, -24, -43, 0, -2, 33, 6,
          64, -19, -1, 5, -1, 23, 27, 16,
          9, -7, -14, 23, 28, 47, 43, 25,
          9, -19, 85, 78, 46, 33, 44, 5,
          4, -2, 4, 5, -4, -3, 4, -1,
          -4, 4, -2, 3, -3, 4, -1, -10,
          -14, 9, -20, 5, -30, -19, -2, 3,
          -10, 2, 39, 7, -39, -35, -12, -24,
          -23, 9, 19, 27, 13, -20, -38, -29,
          9, -9, -2, 54, 38, -38, -75, -48,
          -25, 37, 4, 71, 24, 17, -42, -1,
          21, -26, 2, 44, 41, -6, 4, -2,
          3, 4, -4, 5, 1, -2, -4, -3,
          0, 5, 5, 0, 5, -3, 5, -51,
          48, 32, -19, -19, -1, 22, 23, 35,
          12, 60, 52, 45, -11, 29, 11, 40,
          4, 24, 2, 26, -57, -16, -7, 15,
          9, 11, 9, -7, -21, -31, 0, 17,
          16, 27, 6, -18, -5, -37, -15, 18,
          4, 16, 7, -1, 33, -39, -21, -4,
          0, -2, 5, 5, 2, 1, 4, 3,
          -3, -2, 1, 5, 0, 4, 2, 7,
          30, 8, 71, 36, 12, -10, -10, 10,
          29, -36, -58, 19, 43, 20, -5, 13,
          13, 5, -17, 12, 3, 25, 10, 28,
          7, 5, -12, -82, -25, 17, -40, 33,
          55, 49, 13, 150, 19, -55, 2, -7,
          -42, 82, 31, -77, 6, 0, 19, 1,
          5, 5, -3, 2, -2, 0, 2, 4,
          5, -1, 4, -2, 1, -4, -4, 5,
          27, 34, 4, -27, -5, -10, -9, 1,
          -73, 21, 47, -58, 60, -2, -10, 13,
          -20, -18, 103, 33, -10, 6, 23, 1,
          -52, 12, -98, -7, 8, 25, 31, -11,
          -40, 0, -11, 7, 4, 3, 22, 1,
          -17, 21, -9, 29, -21, 17, 18, -3,
          -1, -4, -3, 2, 0, -2, 4, 4,
          4, -1, 3, 3, 3, -3, -3, -14,
          -44, -14, 21, -1, 25, 18, -17, -28,
          -16, 8, -2, -18, -35, 5, -19, -37,
          -24, -14, -10, 0, -68, 11, 23, -28,
          -24, -26, 25, 29, 26, -43, 32, 6,
          1, 58, 10, 28, 27, 21, 36, 121,
          2, 91, 61, 21, 30, 23, 48, 0,
          0, 2, 5, -4, 3, -3, -1, -4,
          4, 0, -3, 2, 0, 2, -1, 11,
          -108, -53, -47, 0, -85, -13, 23, 6,
          4, 27, -0, -43, -40, 17, -7, 13,
          -6, 20, -4, -29, -1, 15, 8, 30,
          -16, 19, 34, 4, 5, -4, 7, 30,
          -4, 6, -24, 15, -11, -9, -35, 18,
          -9, -14, 8, -23, -8, -59, -17, -3,
          -3, -3, 4, -1, 3, 1, -2, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif