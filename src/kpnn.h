#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (16)

int OUTPUT_BIAS1 = 6;
int OUTPUT_BIAS2 = -4;
int HIDDEN_BIAS[N_HIDDEN] = {13, -5, -6, -1, 11, -23, 1, -13, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {-11, -16, -11, -30, 26, 23, 11, 26, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {9, -7, -2, 2, 3, -0, 2, -2, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          1, 5, 0, 0, 1, -3, 0, 2, -0,
          -7, 9, -2, 13, -12, -7, 21, 6,
          -10, 8, 4, 4, 8, 14, 16, 8,
          -22, 23, -19, -1, 8, 4, 10, 19,
          20, -45, -39, 3, 41, 35, 16, 17,
          42, 0, -26, -36, -32, 53, 60, -21,
          42, 36, 1, 55, -92, -32, 14, 3,
          -4, 3, -2, 0, 5, -3, 1, 2,
          -1, -3, -1, -4, -1, 2, 4, -71,
          -40, -43, -13, -40, 14, -26, -45, -11,
          -5, -19, 18, -14, 3, 12, -37, -16,
          4, -5, 15, 5, 6, -24, -4, -23,
          -5, -10, -15, -10, 8, -20, -11, -10,
          -22, -12, 28, -7, -2, 3, -13, -13,
          65, 46, 20, -14, 18, 16, 13, -4,
          4, -1, 3, -4, -3, 0, 0, -4,
          -4, 5, -1, 0, -1, 1, -2, 8,
          -8, 2, 47, 4, 28, 22, 18, 6,
          8, -3, 10, 3, 4, 4, 41, 10,
          3, -4, -10, 7, 7, -4, 0, 61,
          93, -11, -10, -7, -3, -3, -1, 45,
          -46, -22, -5, 2, -14, 14, 15, 19,
          7, -13, 7, -8, 4, -3, 26, 2,
          -2, 0, -3, 0, 5, 4, 5, 2,
          1, 3, -1, 4, 4, 1, 4, -3,
          54, 51, 23, -14, 40, 55, 62, -6,
          -18, -8, 33, -95, 18, 26, -10, -2,
          3, -9, 13, 5, 28, 25, 25, -17,
          -23, 1, -11, -9, 35, 47, 61, -16,
          -21, 13, -20, -15, 4, 16, 36, -13,
          -20, 14, 5, -4, 12, 5, 36, -1,
          1, 4, 1, 2, 5, 0, -2, 4,
          2, 4, 2, -3, -4, 5, 4, 6,
          -1, 26, 30, 6, -17, 15, -11, 8,
          -6, 34, 25, 24, -17, 15, 9, 11,
          -6, 4, 18, 17, -6, 32, 41, -15,
          14, -5, 10, 17, 17, 4, 11, -34,
          -30, -33, -11, 15, 2, -57, -24, -45,
          21, -19, -10, 5, 2, 55, -19, 5,
          1, 2, 4, -1, -1, 0, 2, 3,
          3, -4, 5, 3, -2, 4, 0, 18,
          19, 31, 3, 44, 58, 8, -30, -1,
          8, 11, 40, 39, -17, 10, -4, 2,
          -29, 30, 41, -11, 1, -17, -3, 20,
          6, 33, -15, -4, -17, -6, -21, 2,
          -5, 16, -11, 15, -3, 33, -5, 1,
          16, 56, -41, -10, 13, 16, -34, 1,
          3, 0, 1, -3, 1, -2, -3, 2,
          3, 4, 3, -4, 3, 2, 2, -17,
          -14, -12, -39, -85, -40, -7, 20, -13,
          -24, -37, -12, 8, -8, 10, 19, -10,
          -32, -1, 9, 23, -2, 18, 6, -10,
          -38, -12, 4, 34, 36, 5, 8, -2,
          -31, -42, -25, -5, 18, -21, -3, 6,
          -34, -45, -39, 5, -7, -17, -53, 1,
          3, 0, 3, -1, 5, 2, 4, -4,
          -3, -3, -4, -2, -2, -2, 1, -2,
          20, 32, 23, 14, 65, 37, 12, 26,
          -7, 48, 14, 57, -15, 28, 31, 6,
          -2, -2, -3, -8, -21, -3, -13, -2,
          -9, -15, -43, -24, 3, 6, -3, -11,
          -37, -28, -5, 4, 9, 10, -8, -7,
          -45, -25, -22, -2, 10, 7, -10, 1,
          4, 5, 1, -1, -1, 4, 3, 5,
          5, 2, 3, -3, 3, -1, 5, -22,
          -11, 5, -35, -20, -12, 15, 33, -22,
          -20, -25, -15, 12, 11, 18, 21, -24,
          -16, -29, -19, -1, 41, 28, 21, -10,
          -4, -42, -13, -10, 24, 20, 21, -23,
          -11, -4, 9, -3, 20, 15, -9, -14,
          -24, 21, 28, -14, -5, 62, 5, -4,
          -3, -4, 0, -2, 5, 4, -1, -1,
          -4, 2, 1, -1, 2, -4, -1, -31,
          -59, -48, -42, -13, -27, -14, 3, 3,
          -17, -24, -30, -48, -25, -19, 18, 8,
          10, 9, -13, -27, -3, 8, 33, 3,
          31, -18, -1, 0, 1, 13, 20, 8,
          1, -8, -12, 15, 15, 34, 28, 15,
          -1, -16, 53, 59, 36, 26, 23, 5,
          4, -2, 4, 5, -4, -3, 4, -1,
          -4, 4, -2, 3, -3, 4, -1, -4,
          -3, 12, -47, 19, -28, -13, -5, -1,
          -4, 4, 14, 1, -16, -29, -7, -14,
          -21, -2, 23, 12, 12, -20, -32, -20,
          -2, -9, -6, 37, 27, -29, -67, -27,
          -26, 27, 16, 49, 29, 13, -41, -1,
          20, -31, 4, 33, 31, 0, -10, -2,
          3, 4, -4, 5, 1, -2, -4, -3,
          0, 5, 5, 0, 5, -3, 5, -33,
          24, 22, -20, -20, 0, 9, 17, 25,
          1, 46, 44, 37, 1, 20, 8, 25,
          17, 27, 9, -1, -55, -13, -11, 9,
          11, 7, 9, -11, -15, -24, -5, 14,
          14, 14, 4, -14, -1, -22, -8, 12,
          7, 14, 5, 10, 20, -19, -21, -4,
          0, -2, 5, 5, 2, 1, 4, 3,
          -3, -2, 1, 5, 0, 4, 2, -2,
          18, -4, 39, 47, 7, -1, -5, 4,
          17, -23, -32, 13, 19, 12, 10, 20,
          9, 6, -18, 21, 6, 19, -13, 12,
          -2, 32, -18, -51, -16, 6, -15, 14,
          43, 47, -5, 102, 7, -41, 17, -10,
          -18, 46, 9, -55, 4, -4, 3, 1,
          5, 5, -3, 2, -2, 0, 2, 4,
          5, -1, 4, -2, 1, -4, -4, 5,
          8, 27, 5, -15, -3, -7, -3, 2,
          -35, 24, 18, -19, 34, -4, -9, 6,
          -27, -29, 68, 24, 10, 6, 7, -12,
          -37, 1, -57, -8, -3, 14, 34, -8,
          -28, -3, -12, 3, 9, 3, 25, -9,
          -11, 23, -16, 20, -14, 8, 18, -3,
          -1, -4, -3, 2, 0, -2, 4, 4,
          4, -1, 3, 3, 3, -3, -3, -13,
          -33, -9, 12, -9, 13, 15, -14, -13,
          -22, 4, 13, -11, -27, 5, -10, -29,
          -27, 1, -4, -7, -30, 7, 14, -31,
          -10, 1, 28, 23, 15, -33, 22, 11,
          3, 39, 13, 27, 15, 27, 18, 79,
          -1, 42, 55, 4, 15, 14, 44, 0,
          0, 2, 5, -4, 3, -3, -1, -4,
          4, 0, -3, 2, 0, 2, -1, 3,
          -60, -34, -23, 2, -57, -12, 20, -9,
          -4, 16, 9, -32, -33, 9, 2, 18,
          2, 17, -3, -30, -5, 10, -2, 20,
          -4, 4, 26, -2, -1, 8, 6, 16,
          -3, 3, -27, 18, -11, -9, -27, 12,
          -15, -11, -5, 1, -6, -42, -22, -3,
          -3, -3, 4, -1, 3, 1, -2, };


int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif