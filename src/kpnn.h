#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (16)

int OUTPUT_BIAS1 = 7;
int OUTPUT_BIAS2 = -3;
int HIDDEN_BIAS[N_HIDDEN] = {22, -5, -11, -1, 11, -31, -1, -16, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {-12, -16, -11, -30, 30, 21, 11, 28, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {11, -7, -5, 0, 4, 2, 1, 0, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          1, 5, 0, 0, 1, -3, 0, 2, 1,
          -13, 13, -17, 19, -14, -10, 24, 0,
          -10, 3, 6, -6, 21, 20, 14, 1,
          -23, 24, -24, -8, -2, -0, 24, 33,
          28, -42, -40, -5, 39, 39, 21, 6,
          44, -4, -30, -74, -49, 52, 69, -7,
          48, 46, 16, 77, -112, -38, 19, 3,
          -4, 3, -2, 0, 5, -3, 1, 2,
          -1, -3, -1, -4, -1, 2, 4, -54,
          -55, -71, -27, -51, 21, -28, -69, -15,
          -11, -14, 18, -8, -12, 37, -39, -5,
          2, -10, 4, -3, -10, -38, -16, -6,
          -6, 12, -28, -8, 3, -20, -7, -6,
          -20, -7, 22, 1, -9, 12, -2, -10,
          105, 50, 17, -21, 15, 16, 25, -4,
          4, -1, 3, -4, -3, 0, 0, -4,
          -4, 5, -1, 0, -1, 1, -2, 9,
          -12, -8, 55, 10, 39, 23, 21, 11,
          7, -0, 20, 2, 12, 13, 37, 12,
          6, -5, -21, 6, -4, 1, 9, 83,
          127, -17, -7, -9, -3, -4, -6, 55,
          -56, -25, -1, -1, -5, 9, 19, 28,
          3, -9, 4, -17, 0, -7, 42, 2,
          -2, 0, -3, 0, 5, 4, 5, 2,
          1, 3, -1, 4, 4, 1, 4, -5,
          63, 68, 23, -2, 68, 65, 77, 2,
          -27, -9, 36, -117, 31, 39, -17, -14,
          0, -23, 6, 16, 32, 17, 33, -26,
          -33, 5, -19, -12, 38, 56, 68, -19,
          -20, 17, -24, -13, 4, 11, 36, -22,
          -32, 7, -9, -12, 12, 9, 37, -1,
          1, 4, 1, 2, 5, 0, -2, 4,
          2, 4, 2, -3, -4, 5, 4, 7,
          -6, 39, 39, -1, -22, 12, -9, -8,
          1, 20, 17, 21, -10, 7, -7, -0,
          -15, 13, 12, 29, -9, 40, 47, -12,
          12, -29, 32, 28, 4, 7, 18, -19,
          -15, -43, -10, 22, 6, -112, -54, -47,
          32, -11, 8, 10, -2, 62, -26, 5,
          1, 2, 4, -1, -1, 0, 2, 3,
          3, -4, 5, 3, -2, 4, 0, 18,
          28, 52, -14, 54, 74, 17, -25, -6,
          4, 26, 21, 58, -7, 13, -6, 18,
          -32, 38, 31, -11, -19, -28, -2, 31,
          3, 56, -6, -3, -7, -15, -19, 35,
          8, 27, -18, 11, -15, 30, -5, 14,
          32, 50, -25, -7, 11, 13, -38, 1,
          3, 0, 1, -3, 1, -2, -3, 2,
          3, 4, 3, -4, 3, 2, 2, -22,
          -7, -19, -58, -113, -53, -8, 25, -11,
          -20, -25, -20, -0, -14, 8, 19, -11,
          -34, -2, 13, 22, 2, 21, 7, -14,
          -38, -14, 9, 34, 39, 14, 7, -7,
          -41, -38, -31, -12, 27, -25, -8, 5,
          -56, -56, -54, -1, -7, -19, -74, 1,
          3, 0, 3, -1, 5, 2, 4, -4,
          -3, -3, -4, -2, -2, -2, 1, -4,
          23, 41, 30, 28, 77, 55, 4, 44,
          -8, 59, 21, 80, -23, 42, 29, 10,
          -4, -1, 2, -23, -37, 5, -13, -1,
          -7, -24, -69, -18, 0, 12, -3, -14,
          -43, -40, -2, -1, 13, 17, -5, -6,
          -54, -27, -25, 2, 18, 12, -7, 1,
          4, 5, 1, -1, -1, 4, 3, 5,
          5, 2, 3, -3, 3, -1, 5, -32,
          -10, 7, -36, -31, -14, 8, 38, -26,
          -36, -23, -3, 15, 11, 17, 20, -32,
          -23, -33, -24, 0, 31, 26, 30, -19,
          -12, -54, -19, -13, 21, 35, 14, -31,
          -19, -4, 24, 7, 34, 24, -7, -18,
          -19, 23, 43, -13, -4, 75, 10, -4,
          -3, -4, 0, -2, 5, 4, -1, -1,
          -4, 2, 1, -1, 2, -4, -1, -33,
          -86, -55, -64, -19, -28, -21, 2, 3,
          -26, -39, -50, -51, -27, -15, 34, 3,
          17, 4, -26, -40, 11, -1, 20, 9,
          36, -15, -0, 3, -4, 24, 23, 12,
          6, -3, -20, 24, 32, 37, 41, 14,
          12, -16, 69, 84, 42, 28, 27, 5,
          4, -2, 4, 5, -4, -3, 4, -1,
          -4, 4, -2, 3, -3, 4, -1, -7,
          -8, 9, -49, 11, -37, -19, -5, -6,
          -4, 4, 20, 0, -26, -29, -17, -26,
          -34, 14, 23, 20, 9, -15, -36, -26,
          6, -6, -1, 34, 29, -24, -69, -39,
          -34, 43, 11, 48, 10, 15, -51, -2,
          14, -37, -1, 28, 34, -9, 3, -2,
          3, 4, -4, 5, 1, -2, -4, -3,
          0, 5, 5, 0, 5, -3, 5, -42,
          36, 38, -20, -14, -9, 24, 21, 34,
          6, 65, 51, 48, -4, 17, 15, 34,
          11, 30, 5, 18, -50, -13, -10, 21,
          8, 19, 3, -12, -15, -15, 1, 18,
          17, 21, 1, -15, -5, -30, -16, 13,
          2, 12, 9, 7, 28, -29, -25, -4,
          0, -2, 5, 5, 2, 1, 4, 3,
          -3, -2, 1, 5, 0, 4, 2, 2,
          20, -2, 55, 37, 8, -2, -15, 2,
          28, -39, -44, 13, 23, 13, 2, 16,
          13, 12, -15, 15, -8, 20, 1, 17,
          2, 21, -9, -66, -24, 16, -24, 14,
          53, 53, 2, 131, 2, -49, 7, -12,
          -20, 60, 6, -72, 5, -8, 4, 1,
          5, 5, -3, 2, -2, 0, 2, 4,
          5, -1, 4, -2, 1, -4, -4, 2,
          1, 28, 3, -17, -2, -5, -1, 9,
          -60, 39, 31, -28, 43, -3, -12, 12,
          -21, -28, 86, 32, 4, 3, 4, -1,
          -51, -2, -73, -5, 6, 16, 48, -14,
          -43, -2, -14, 5, 6, 1, 20, -10,
          -17, 15, -13, 8, -23, 14, 20, -3,
          -1, -4, -3, 2, 0, -2, 4, 4,
          4, -1, 3, 3, 3, -3, -3, -16,
          -39, -13, 17, -11, 25, 16, -18, -30,
          -19, 8, 11, -16, -27, 2, -15, -31,
          -30, -19, -8, -11, -49, 4, 22, -30,
          -13, -7, 31, 28, 20, -35, 25, 13,
          -0, 41, 21, 28, 21, 33, 22, 99,
          -5, 60, 51, 11, 21, 21, 38, 0,
          0, 2, 5, -4, 3, -3, -1, -4,
          4, 0, -3, 2, 0, 2, -1, 5,
          -87, -39, -41, -2, -66, -16, 14, -4,
          -4, 23, 9, -38, -37, 12, 2, 20,
          -5, 15, 8, -25, -10, 15, -6, 21,
          -10, 6, 26, -2, 11, -5, 2, 29,
          -0, 7, -27, 12, -7, -6, -29, 15,
          -17, -15, 1, 1, -8, -55, -18, -3,
          -3, -3, 4, -1, 3, 1, -2, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif