#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS outputs
// inputs = passersColumn + AllPawns
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS = -42;
int HIDDEN_BIAS[N_HIDDEN] = {29, -3, 4, 7, 1, 3, 26, -5, };
int OUTPUT_WEIGHTS[N_HIDDEN] = {14, -33, 32, 17, 19, 21, 15, -16, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {-29, -16, -75, -2, -26, -15, -13, -54, 2, 18, -0, 27, 20, -14, -6, 12, -3, 2, 13, 12, 30, -0, 3, 9, 13, 13, 16, 5, 31, 8, 27, 35, 19, -1, -3, 21, -11, 44, -23, 96, 6, 22, 65, -9, 12, 91, 106, -25, 25, -47, 72, -60, -45, 22, -75, 5, 52, 2, 58, -1, 10, 53, 38, 38, 3, -2, -3, -2, 4, -2, -4, -4, -20, 50, 19, -6, -26, -34, 28, 2, 54, 3, 45, 23, -27, -17, -86, 25, 2, -5, 76, -14, -16, 9, 1, 1, -17, 63, -28, -26, -38, -11, 3, 45, -7, -23, -24, -8, -27, -20, -13, 33, -12, -25, -18, -1, -12, -17, -4, 31, 5, 2, 5, 4, 5, 3, 0, -2, 20, -6, -25, 19, 22, 50, -6, -0, 9, 10, -8, 20, 5, 29, 9, 20, 11, 3, 4, -10, 5, 23, 32, 28, 35, 36, -8, -12, -7, 5, 14, 10, 46, 27, 12, -10, -36, -20, -2, 32, 39, 19, -23, -5, -44, -8, -14, 50, 7, 31, 10, 17, -29, -6, 1, 30, -2, 14, -55, -8, 5, 0, 10, -52, 3, 4, -2, -4, 3, 2, -1, 4, -0, -8, 15, 7, 30, 37, 70, 10, -4, -14, -16, -8, -3, 4, 0, -21, -22, -5, -16, -17, -8, 40, 17, 37, -21, -26, -3, -14, -4, 32, 39, 19, -27, -28, -10, -11, -11, 6, 23, 32, -16, -18, 14, -3, -12, -12, 34, 45, -1, 4, -4, 3, 3, -4, 2, 1, 2, -4, 9, -5, -25, -17, 9, -29, -11, 7, 24, 2, 90, 79, 22, -13, -7, -3, 34, 26, 19, 55, 12, -2, -4, 10, -2, 1, 3, -2, -16, -7, -9, 8, -26, -20, -30, -23, -24, -13, -9, 13, 70, 117, 0, 3, -11, -22, -5, -15, 52, 57, -9, 2, 1, 0, -25, -21, 29, -15, 59, 12, 19, -9, 0, 1, -2, 4, 5, -2, 1, -4, 28, -8, -21, -19, 6, -33, -67, -25, 24, -2, 3, -14, -56, -65, -5, -25, 53, 33, 30, -25, 9, -22, -5, -10, 32, 39, 31, 29, 15, -5, -7, -1, 24, 30, 55, 12, -21, -23, -17, -3, 19, 63, 33, 9, 22, -12, -5, 30, 2, 4, 4, 1, -1, 3, -3, -3, -32, 8, 31, 6, -0, 11, 30, -16, 23, 22, 17, 32, 48, 45, -14, -30, 4, 44, 6, 4, -3, 11, -13, -31, 21, 40, 6, 7, -12, 10, -19, -20, 16, 35, 46, 11, -17, -40, -47, -13, -11, 15, 36, 39, 41, 9, 101, 36, -15, 4, 11, 46, -6, 8, -60, 48, 21, -16, -3, 28, -44, -17, 8, 33, 1, 4, 1, 3, 2, -2, -4, -2, -5, -21, -35, 32, -48, -49, -6, 18, -51, 19, -20, -2, -28, 7, 17, -9, 4, 8, -31, 8, 28, 39, 66, -23, 8, -20, 2, 96, 21, 19, -5, -7, 3, 42, 16, 14, -3, -6, -36, -6, 13, 47, 40, 12, -18, 3, -8, -12, 2, 4, 3, 0, 5, -2, 4, 1, 10, -12, -1, 20, 6, -7, -2, -42, -12, -22, -47, -50, -52, 26, -10, -15, -25, -40, -39, -26, -22, 5, 1, -5, 2, -31, -32, -5, -40, -6, 5, -6, 4, -20, -41, -0, -26, -21, 24, -15, -31, 32, 3, 35, -16, -46, -36, 37, 62, -15, 35, 38, -43, 3, 1, 27, 62, 12, -51, 41, 50, 38, -7, 0, 0, -1, -4, -4, -1, -3, -1, 5, -1, -84, -96, -24, 30, 13, 39, 55, -1, -17, 1, -23, -86, 34, 5, 44, 17, 20, -35, -2, 5, 35, 12, 49, -9, 2, -0, -31, 10, 5, 30, 18, 2, -30, 9, -12, 7, -2, 13, 12, 2, 7, 1, 39, 1, -34, 7, 24, 4, -2, -1, -1, 0, 1, -4, 3, -48, -8, -38, -7, -2, -44, 35, -22, -35, -19, 14, -38, -13, -7, 17, 40, -25, -22, -15, -17, 8, 27, 30, 18, -25, -22, -27, -2, -15, 61, 7, -9, -25, -17, -50, -14, -18, 25, 13, -5, -4, -17, -11, 29, -6, -26, -2, -9, -35, -37, 45, 78, 8, 6, -65, -4, 19, -10, -10, -1, 21, 4, -7, 7, 0, 3, 1, -2, -4, 0, -1, -2, 3, -73, 0, -27, -22, -29, 18, 55, 18, 5, -6, -38, -63, -11, 8, 8, 47, 21, -9, -9, -22, -8, 13, 52, 24, 18, -18, -5, -3, 3, 9, 11, 23, 14, -16, -6, 21, 25, 35, 12, 25, 1, -26, 93, 43, 57, 35, -4, 5, -4, -2, 3, 1, -4, 5, 3, -37, -7, -32, -4, -26, 26, -47, 4, 30, 41, -1, 47, 35, -4, -11, -29, 42, 50, 1, -13, -6, -3, -15, -12, 37, 30, 15, -11, 20, -2, 14, -29, 11, 14, 42, -22, 6, 9, 11, 16, 22, 30, 68, -4, 78, 69, 51, 56, -29, -51, 36, 17, -34, -18, -12, 23, 15, -11, 19, 30, -33, -4, 52, -25, -2, -2, 1, 1, 5, -4, 1, 5, -12, 11, -34, 12, -11, -63, -26, -5, 18, -9, -16, 53, 34, 30, 26, -5, -17, 6, 27, 33, 43, 10, 5, -2, -8, -10, 2, 38, 13, 2, 28, 21, -8, -5, 31, -15, -15, 25, -7, 7, 3, 17, 44, -35, 15, -35, -18, 6, 0, 0, -4, -4, 4, 3, 0, -2, 6, 6, 20, 2, 19, -19, 2, 83, 9, 4, 1, -4, -17, -22, -11, 9, 3, 7, 6, -6, 19, 16, 1, 8, 16, -18, -7, 12, 10, 15, 14, 7, 6, -29, -58, -12, -1, 3, 37, 6, -25, -10, -27, 29, 13, -1, 68, -54, 9, 35, -59, -52, 22, 2, 47, -17, -91, -9, -32, -35, -1, -1, -5, 1, 5, -4, 0, 1, -4, 5, -4, -2, 37, 69, -10, -46, -18, 94, -7, -6, 12, 21, -19, 8, -124, 25, -0, 20, 33, 38, 16, 14, 25, -1, -6, -18, 26, 30, 11, 18, -8, -3, -16, -44, 39, 35, 5, 21, -11, -10, 3, -20, 31, 39, 11, 3, -19, -1, 3, -26, 3, 0, 3, -4, 0, 3, -4, 2, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif