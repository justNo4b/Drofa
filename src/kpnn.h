#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

double OUTPUT_BIAS = -2;
double HIDDEN_BIAS[N_HIDDEN] = {408, 375, -332, -259, 187, 137, -40, 175, };
double OUTPUT_WEIGHTS[N_HIDDEN] = {2, 4, -0, -2, -1, 3, -1, 4, };


double HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {374, 172, -286, 386, 195, 321, 27, 269, -32, -371, -50, 343, 67, -119, -117, -280, 269, -175, -362, -149, 315, 197, -357, 365, -38, -23, -268, -10, 400, -231, 192, 30, 322, 312, -16, -199, 220, -384, -353, 222, 78, -34, -171, 143, 226, 86, 276, -236, -65, 307, 37, -122, -228, -287, 251, 108, 97, 39, 126, -278, 202, 367, 121, 137, 273, -294, 314, -252, 166, 9, 11, -158, 355, 214, 42, -124, 347, -83, 27, -115, 266, 89, -216, -377, 211, -349, -213, 341, 87, -20, -323, 347, -76, 178, -290, -197, 320, 100, 413, 80, -310, 7, -27, -322, -168, -378, 391, -202, 379, 13, -252, 260, 165, -72, -74, -402, 1, 146, 354, 109, 135, 82, 37, -334, -121, 159, 317, 229, -157, -35, 345, -65, 375, -97, -343, 256, 361, -332, 109, 349, -294, 259, 229, -85, -221, 168, 355, -244, 369, 312, -103, 106, -365, 339, -210, 398, -253, -271, 189, -41, -265, 144, -25, -309, 89, -335, 13, 44, -290, -300, -370, -178, 295, -140, -281, 80, -378, -382, -126, 356, -17, 125, -342, 5, -311, -150, -45, -187, 400, 182, -173, -286, -94, -176, 252, 29, -122, -155, 109, -33, -69, -249, -202, 259, 16, -103, 371, -330, 379, -160, -388, -57, -15, -320, 352, 95, 391, 392, -47, 381, 169, 164, -310, 109, 409, 5, 202, 330, 260, -100, -98, 206, 91, -251, -255, 118, -297, -280, 186, -307, 388, 227, -316, -23, -67, 106, 139, -75, 51, -373, 312, -195, -157, 47, -38, -165, -367, -253, -248, -89, 41, -316, -283, 150, 226, -163, -142, -31, 385, 98, -335, 334, 365, -287, 345, -131, 220, -315, -207, -130, -284, 162, -301, -399, -186, -278, -180, 295, -138, -334, -185, -50, 163, 372, 130, -337, 260, 64, 39, 239, -218, 112, -190, -317, 220, 216, -25, -328, 295, -184, 361, 54, 375, 122, 64, 230, 236, -52, 118, -303, -369, -36, -305, 198, -73, 242, -85, -225, -99, 345, -378, 55, 33, 259, -189, 323, 83, -165, 41, -343, 46, -4, -241, -344, -281, -140, -44, 364, 218, -338, 107, -80, 30, -142, 148, 11, -311, -351, 201, -340, -405, -169, -231, -319, 149, -15, 41, 282, 207, -310, 339, 311, 91, 145, 28, -136, -393, 379, -173, 221, -354, -22, 161, -274, 224, -100, -220, -40, -47, 361, 1, -45, 231, -185, -314, -360, 189, 180, 351, -344, 281, 269, 346, 405, -305, -19, -145, -316, -15, -248, -55, -338, -237, -287, 215, 25, -0, -383, 424, 346, -7, -354, 359, 312, -144, -326, 364, 97, -123, 280, 133, 155, -200, 82, 161, -137, -345, 78, -61, -325, 225, -75, -287, 392, 25, -14, 32, -376, -9, -321, 24, -395, -272, -21, -44, -370, -312, -112, 116, -49, -218, -168, -275, -370, 316, -66, -100, 14, -379, -112, -269, 234, 216, 276, -109, -167, -105, -56, 311, 257, 46, 379, -70, -186, -44, 300, -164, -312, 242, 370, 62, -412, -181, -194, 76, 167, 134, 407, 245, 152, 313, 371, -346, 150, 256, 362, 19, -266, -79, 374, 51, 7, 353, 21, 221, 359, -101, 112, -353, 174, 104, -259, -173, -93, -52, 327, 141, 112, 288, -33, 347, 222, 360, 345, -377, 230, 290, 26, -6, 266, -340, -345, -117, -366, -278, 132, 367, -312, -155, 72, 228, -29, 172, -319, 265, 169, 394, -335, 319, -30, 29, 261, -228, -350, -170, 268, 265, 161, -99, 315, 52, -390, 20, -21, -377, 145, -274, 42, 216, -16, 157, 61, 359, -398, 128, -92, 182, -198, -32, -214, 133, 24, -388, 330, 48, -175, -127, 373, -377, 135, 305, -290, -214, -99, 88, -173, -341, 229, -88, 266, 261, -324, 390, 220, -329, 122, 153, -108, -71, -279, 46, -340, -206, -284, 66, 270, 377, 303, -142, 69, -301, -238, 168, -112, -295, -139, 110, 203, 127, 70, -283, -23, 138, -308, 234, -143, -148, -13, 136, 194, -266, 271, 252, -69, 373, -83, 252, 342, -182, -303, 22, -80, 288, 234, 213, 402, 151, 363, -162, -141, 24, -40, -118, 223, 68, 158, -315, -48, -231, -142, -265, 370, -242, 69, 345, 166, 396, 154, -230, 265, -77, -169, 231, 230, -337, -343, -125, -150, 80, 120, 118, -293, -317, 58, -31, -215, -168, 39, 139, -359, -42, -67, 31, 68, 403, -22, 291, 45, 168, -346, 335, 118, 314, 177, -56, 37, -104, 215, 284, 360, -51, -351, 150, -317, 110, -296, -121, 11, -205, -396, 21, 149, -65, -342, 276, 378, -299, -203, 13, 255, -158, -28, -14, 231, 192, 356, -121, -320, -176, -253, 102, 171, -191, -169, -103, -36, 377, 161, 351, 209, -189, -374, -49, -205, 144, 279, -236, 207, -302, 179, -266, -437, 176, 125, 226, -354, -269, -286, 142, -31, 330, -154, 168, -257, -246, -343, -244, 171, -121, -308, -14, 107, 177, 324, 272, -76, -139, -324, 222, -52, -92, 368, -26, 154, -245, 262, -161, -91, 56, -385, -85, -18, 339, 156, -227, -325, 235, -70, 246, 173, -314, 274, -126, 267, -148, 217, 241, 108, -64, -301, -345, -105, -333, -333, -332, 281, 328, -94, -230, 1, 362, 103, -2, 299, 296, 188, 359, 147, 169, -164, 348, 223, 185, -192, -255, -383, 65, 35, 133, -377, 150, -136, -94, -129, 360, -368, -287, -35, -63, -108, -35, -128, 36, 387, -202, -60, 131, 185, 155, -75, 114, 114, 216, -103, -6, 374, 380, -309, -331, 122, -277, 214, 21, -303, -341, -15, -277, -176, 355, -295, -237, 374, 35, -117, 353, -150, -99, -218, 82, -341, -251, 258, -169, 356, 207, 210, -27, 154, -48, 91, 371, -286, -146, -35, -180, 399, 21, -73, -190, -373, 46, -383, 383, 106, -99, 352, 8, 163, 177, 132, -109, 310, -16, 102, 283, -216, 357, 320, 363, -97, -375, -39, -332, -104, 331, -118, 334, -61, -127, 168, 395, -45, 213, 351, 120, 130, -69, -276, -85, -288, 236, 197, -368, 256, 341, -45, -340, -69, -125, 60, -93, -103, -369, -7, -137, -4, -82, 228, -5, 173, 15, -39, 189, 225, 389, -96, -66, -48, -377, -77, 56, -59, 161, -285, -206, 95, 89, 276, -336, 18, -69, -33, -28, 395, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif