#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS1 = -3;
int OUTPUT_BIAS2 = -7;
int HIDDEN_BIAS[N_HIDDEN] = {-2, 3, -7, 3, -4, 5, -2, 3, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {12, 11, -13, 4, -9, 0, 10, -16, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {4, 4, -10, 8, -8, 8, -3, -10, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -1, 4, -4, 4, -2, -2, 5, 5, 4, 3, 4, 9, 2, 3, -2, -6, 4, 3, 5, 2, -1, 2, -0, -4, 4, 2, 0, -2, 1, 1, -3, -3, 1,
          0, 4, -1, -4, -4, -3, 1, -1, 4, 6, 6, 3, 5, 5, 2, -2, -0, 6, 7, 3, -3, -7, 6, 4, -2, -2, -2, 0, 0, -4, 1, -1,
          1, 4, 3, 3, 3, 5, 3, -3, -2, -2, 2, -0, -8, -4, 0, -1, 0, 0, 2, 4, 0, -1, -0, 0, 5, 0, 1, 7, 5, 0, 5, 0,
          -2, -1, 13, 6, 1, 1, 2, 0, 2, 8, -2, -2, 0, 1, -0, 2, 4, 8, -0, 1, -3, -0, 0, 1, -2, -2, 2, 5, 2, 4, -3, 4,
          5, -4, 3, 1, 4, 2, 4, 2, 2, -2, 0, 0, 4, -3, -4, 1, 3, -4, -1, 0, -1, -3, -4, 2, 5, 2, -0, -1, -2, -2, -3, 1,
          3, 6, -1, 1, -2, 1, -2, 0, 7, 3, 0, -2, 1, 8, 2, 5, 9, 4, 1, -3, -2, -3, 1, -1, -4, 3, -1, 0, -3, -4, 2, 2,
          1, 2, 4, 1, -4, -2, 1, 3, -2, 6, -4, 4, 6, -9, -4, -2, -0, 1, 3, 11, 7, -4, -4, -1, -1, 10, 0, 2, 7, 1, -4, 0,
          0, 4, 3, 2, -2, 4, -1, 2, 7, 6, -0, -1, -1, -6, -1, 0, 8, 7, -3, -1, -2, -1, 1, -3, 2, 1, -4, 5, 0, 1, 1, 2,
          1, 1, -3, 4, -3, 5, -4, 1, 1, 2, 2, 1, 4, -1, -5, 2, 5, 3, 3, -4, 1, -1, -1, -0, 3, 3, 3, -3, -1, -5, -5, -0,
          2, 1, -3, 4, -13, -1, -5, -3, -3, -7, -4, 4, 3, 0, -1, 0, -1, 1, -5, 8, 3, 1, 2, -3, -4, -4, 0, 4, -3, 2, -3, 5,
          2, 0, 1, 1, 3, 4, 3, 6, 7, 7, -7, -4, 1, 1, -12, 4, -1, 0, -1, -1, 2, -1, -1, -0, 0, -0, -2, 2, 1, 2, -2, -2,
          1, 4, -3, 2, 3, 0, -0, -3, 4, -1, 1, -1, 2, -1, -1, -4, 2, 4, -1, -4, -8, -2, -1, -2, 2, -2, 3, 3, -1, -3, 1, 5,
          -4, 5, -3, 1, 5, 4, 2, -5, -4, 2, -3, -1, 5, -2, 2, -3, -4, 4, 0, 5, 3, -1, 1, -4, -3, -3, 10, -6, 2, -5, 4, -2,
          -1, -3, 1, -2, 2, 1, -1, -2, 0, 2, 4, 0, -2, 8, -3, 1, -5, 4, 3, -1, -1, 3, -1, 4, 0, 4, 5, -4, -4, 4, 0, -2,
          2, 0, -2, -3, 5, 3, -1, -1, -5, -8, -7, -3, -6, -5, -1, -1, -3, -5, -5, -7, -4, -1, -3, 4, 6, -6, -5, 1, -2, -2, -1, 3,
          5, -1, 2, 3, 3, 0, -4, 1, 9, 6, 1, 2, 3, -2, 0, 0, 6, 0, 4, 4, 7, 6, 3, 0, -3, -1, -3, -4, 2, 5, 1, 0,
          -4, -3, 4, 2, -2, -3, 5, 1, 3, 1, 10, 0, 1, 1, 1, -1, 0, 2, 1, 4, 1, 0, -0, 5, 1, -3, 1, 2, -6, -3, -0, 0,
          -3, 2, 11, -5, -2, -2, -2, -4, -4, -9, -0, -8, -0, 0, 1, -3, 9, -7, -2, -0, -0, 1, -5, 0, 0, 5, -2, 1, -3, -1, 3, -1,
          -2, 1, 1, -2, -4, 2, -1, 2, 11, 17, -7, 7, 8, 9, 4, -3, -7, 4, 6, -6, -7, 6, -4, -3, 1, -6, -5, 5, 2, 1, 1, -2,
          -2, -3, -0, 3, 1, 2, -2, -0, 1, -1, -7, -4, 4, 1, 2, -0, -1, 4, -1, -5, 5, 6, 5, -1, 1, 1, -3, 3, -2, -3, -4, -1,
          0, 2, 1, 0, 1, -3, -4, -0, -3, -2, 0, -1, -3, 4, -1, -4, -1, 2, -1, 1, 1, 1, -0, -4, -2, -2, 2, -1, 1, -2, -1, -4,
          3, -5, 1, -4, 0, -3, 4, -1, 0, 9, 2, 1, 1, 0, -1, 0, 0, 4, 5, 1, -5, -1, 5, 0, -3, 0, 2, 5, 3, -1, 5, 0,
          0, -1, 2, 3, 5, 2, -3, -3, -3, -9, -4, -5, -7, -4, -7, -3, 2, -5, -7, -4, -5, -0, -5, 2, 4, -3, -4, -4, -1, 1, -3, 0,
          8, 1, -3, 2, 3, -5, -4, 1, 8, -5, -5, 2, 2, 2, 2, 4, 5, 6, 2, 11, 5, 1, 1, 0, -3, -3, 3, -4, 5, 0, 0, -1,
          4, 0, 0, 3, -1, 2, -3, 2, 1, 3, 1, -4, -2, -0, -7, -0, -0, 1, 4, 1, 1, -2, -7, 2, -2, 7, 5, 4, 1, 1, -3, -1,
          -9, 3, 4, 5, 1, -1, 4, 2, 2, -4, 0, 7, 7, -2, 8, -9, 4, -2, 3, 2, 11, 5, -5, -2, 0, -3, 5, 0, -3, 4, -1, 0,
          -2, 4, 4, -3, -2, -2, -4, -1, 7, 4, 5, -3, 6, 9, 8, 1, -2, -1, -1, 6, 1, 2, 3, 2, 0, 2, -1, -1, -11, 5, -1, 3,
          3, 0, 3, -4, -2, 3, 3, 4, 4, 1, 1, 1, 5, -2, 0, 2, -1, -4, 5, -0, 2, -6, -8, 0, 4, -3, 0, -4, -1, 2, 2, -1,
          2, -1, -1, 4, -3, 1, -2, 1, -1, 3, -2, -5, -4, -2, -1, 0, -2, 2, 2, -1, -1, -1, -1, -0, -4, 1, 0, 0, 5, 3, 3, 1,
          -4, -0, 2, 6, 9, 6, 2, -2, -5, -1, 2, 1, 9, -0, -3, 3, 2, -3, -2, 2, 6, 9, 0, -1, 2, 1, 1, -1, 3, 4, 3, -2,
          4, -4, 5, -3, 1, -1, 3, 2, -2, -2, -2, -0, 0, -1, 4, 2, 3, -9, -2, 7, 1, 6, 1, 4, -1, 7, 1, 1, -3, -1, -2, 4,
          4, 4, 3, 0, -3, -1, -4, 4, 6, 2, 1, 0, -3, 0, -4, 4, 7, -0, -1, 0, -0, -1, -6, 1, 1, -3, -2, -2, 4, -2, 1, };
int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif