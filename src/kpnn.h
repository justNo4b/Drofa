#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS1 = -17;
int OUTPUT_BIAS2 = -1;
int HIDDEN_BIAS[N_HIDDEN] = {1, -12, 1, 1, 12, 3, -2, -22, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {-22, -17, 15, 15, -18, 21, 34, 19, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {17, 0, 7, -2, -6, -1, -4, 3, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -24, -33, -13, 1, 7, -11, -46, -44, 2, -13, -19, -1, 17, -11, -39, -9, 2, -15, 8, 7, 8, -4, -28, -9, 8, 3, -8, -14, 7, 6, -2, -0, 12,
          14, 13, 4, 14, -19, 22, 5, 17, 15, 18, 14, 12, 5, 22, 14, 11, -22, 21, 20, 17, 2, 9, 37, 22, 28, 54, 13, -1, 22, 23, 30, 0,
          2, -4, -1, -2, 0, -4, 0, 7, -24, -24, -31, -5, -49, -8, -23, 1, -3, 4, -24, -10, 13, 12, 3, -5, -1, -10, 1, -9, -4, -5, -9, -14,
          -1, -1, 5, 1, -0, -15, -5, -2, -7, -2, 1, -3, -3, -6, -6, -0, 7, -3, -18, 4, 0, -3, 1, -3, 5, -3, 0, -2, 5, -4, -4, 24,
          8, -17, 3, 4, -13, 26, 13, -15, -18, -2, -21, -9, -7, 0, 18, -11, -16, -8, 14, 6, -4, 1, 13, 1, -14, -6, 6, 3, 4, -3, 2, 4,
          -19, -11, 0, 6, 12, 6, 3, -3, -21, -27, -7, -22, -9, -8, 4, -18, 34, 1, -5, 5, 8, -2, -1, -11, -15, -5, -24, 11, 1, -11, 2, 4,
          5, 3, 5, 1, -3, 2, -3, 21, 24, 14, 16, -16, 28, 15, 16, 29, 6, 16, 0, -19, -9, 19, 20, 5, -6, 5, -24, -16, -22, -13, 0, 5,
          3, -10, -28, -4, -5, -5, -5, 7, 0, -24, -2, 11, 6, 9, 1, -0, -17, -40, 7, -7, 7, 9, -1, 5, -4, -1, -2, -2, 4, -1, -1, -39,
          -9, -26, -0, 15, -19, 16, -41, -17, -11, 2, -13, -9, -0, 11, 20, -11, -17, -7, -7, 15, 8, 14, 11, -11, -8, -16, -2, -11, 22, 14, 18, -11,
          -9, -17, -6, -12, 8, 10, 11, -16, 17, 47, 21, 2, 3, -15, -13, -9, -12, 11, -13, -3, -31, 11, 3, 9, 2, 5, 3, 22, 24, 6, -5, 2,
          2, -1, 5, -3, -3, 0, 0, -18, -31, -33, 1, -4, -6, -9, 1, 1, 4, -1, -12, -24, -5, -1, 20, 5, 12, 11, -5, -13, -7, 1, 2, 8,
          13, -4, -1, -5, -13, -3, 2, 11, 8, -0, -2, 7, -0, 3, 9, 9, 4, -11, 13, 20, 28, 12, 10, -1, -2, -3, 0, 4, 3, -4, -4, -9,
          16, -5, 14, -4, -13, -8, -20, -3, -3, -14, -18, -16, 14, -14, -6, -4, -12, -25, -18, -14, 11, 0, 0, -4, -20, 2, -13, -4, 8, 1, -1, 3,
          -8, 6, -2, -8, 3, 4, 5, -13, -33, 13, 8, -0, -15, 1, 12, -7, 10, 17, 14, -21, -20, 8, 7, 25, -1, 88, 15, -1, 6, 7, 22, 2,
          1, 5, 3, 3, -4, 3, 4, -2, 40, 30, 6, -3, -2, -3, 5, -1, 2, -67, -21, -25, 8, -11, 13, 6, 8, -40, -7, -14, 5, 5, 18, 6,
          5, -8, -17, -7, 7, 11, 9, 9, -2, 3, -2, 2, 12, -2, -4, 12, 3, -13, 13, 19, -18, 2, 0, 0, -3, -1, -2, 5, -4, 3, -2, 6,
          10, -6, 6, -6, -4, 7, 34, -1, -1, 11, -6, -11, -5, -7, -2, 0, -3, 8, -2, -5, -2, -4, -3, -6, -12, 6, 3, 3, 8, 9, 15, -3,
          -13, -3, 3, 19, 42, 12, 6, -9, -10, 9, 18, 7, 55, -2, -27, -1, 10, -17, 6, 20, 13, 15, -19, -40, -4, -1, -7, -12, -3, -5, 1, 2,
          0, 3, 0, 5, 2, 1, -2, 1, 21, -7, -4, 3, 30, -5, -1, 2, 12, -1, 0, -58, 12, -0, 15, 17, 7, 11, 7, 3, -9, 12, -6, 15,
          17, 14, 7, -3, -12, -11, -17, 13, 22, 10, 6, -4, -4, -6, -15, 16, 24, 0, 4, 1, 1, -8, -20, 5, -3, 0, 3, 1, 4, -4, 2, -19,
          9, 4, 12, -14, -18, 6, -5, 3, -1, 5, 2, 8, 26, -3, -12, 0, 10, -0, 36, 4, 8, -4, -11, 9, 10, 5, 18, 3, -0, -8, -8, 14,
          21, 16, -6, 4, -17, -12, -1, 10, 20, 18, 20, 7, 2, -12, 33, -7, 23, 18, 25, -1, -1, -26, 14, -3, -10, 9, -4, -21, -5, 6, -23, -1,
          5, -1, 4, -2, -3, -1, -3, 7, 2, -16, -11, -11, -32, -29, -14, -16, 6, -11, 5, -18, 32, -4, -14, 2, -4, 27, -19, 9, 12, 2, -7, 8,
          11, 2, -1, 15, -4, -9, -8, 15, 27, 16, -0, -1, -6, -17, -6, 6, 25, 15, 18, -3, -11, -3, 1, 5, 5, 5, 3, 5, -3, -4, 5, -15,
          -0, 5, 2, -8, -26, 7, -3, -2, -4, 0, -3, 3, -12, -7, -9, -1, -3, 4, -1, 1, -15, -19, -13, -6, -3, -1, 4, 0, 1, -7, -11, -22,
          -3, 6, 1, 13, 14, 0, -10, -4, 7, 23, 8, 13, 13, 22, -27, 31, 55, -12, 6, 13, 14, -6, 4, 18, -9, 38, 8, -2, -4, 7, 37, 3,
          -3, 2, 4, 1, -3, 2, 5, 17, 14, -8, -17, -14, -5, -29, 29, 18, 1, 23, 10, -9, -9, -9, 5, 14, 4, 10, 15, -8, -18, -7, -2, 5,
          10, 1, 12, 2, -20, -16, -2, 8, 11, 4, 0, 10, 1, -7, -12, 9, 2, -35, -8, 6, 8, -19, -20, -4, 4, -4, 4, 1, -3, -3, 3, 1,
          2, -24, -10, -19, -29, 10, -10, -3, -2, 10, -16, -17, -29, -20, 6, -11, -3, -4, -2, -3, 5, -12, -4, -3, -8, 2, -2, 7, -5, -11, -3, -6,
          -25, 13, -6, -3, -3, 8, -7, -4, 20, 12, 19, 14, -0, 8, -7, 19, 22, 33, 16, 15, 25, -8, -6, 11, -4, -5, 14, -17, 13, -3, 24, 5,
          2, -3, -1, -1, -4, 2, 4, -26, 27, 28, -1, 15, -18, 8, 6, 14, -26, -3, -14, 6, 1, -7, 14, 20, 14, 2, -31, 29, -12, 15, -3, 11,
          9, 3, -32, 8, -4, 4, 2, 6, 12, -7, 19, -5, -1, -9, 4, 8, 13, 6, 23, 4, 2, 0, -4, 5, -3, 3, 5, 2, -4, 0, 3, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif