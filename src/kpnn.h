#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (16)

int OUTPUT_BIAS1 = -20;
int OUTPUT_BIAS2 = 6;
int HIDDEN_BIAS[N_HIDDEN] = {-3, 36, 10, -22, 19, 17, -38, 35, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {36, -11, 49, 11, -31, 20, 52, -42, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {-14, -23, -16, 34, 15, 19, -14, 11, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -19, -35, -54, -63, -37, 8, 27, 37, 16,
          26, 18, 11, 32, 20, -8, -41, 21,
          22, 27, 16, -1, 9, -13, -27, 23,
          12, 8, 6, -7, -3, -20, -25, -3,
          8, 21, -5, -17, -30, -2, -21, 18,
          26, 27, 40, 13, -20, -12, -14, 26,
          29, 42, 40, -2, 31, -7, -14, 29,
          13, 2, 7, 30, 21, -17, -14, 2,
          -2, 3, 2, 0, -4, 3, -3, -9,
          9, -5, -8, -5, -92, -31, -16, 2,
          -18, -24, -32, -38, 13, 80, -55, 3,
          -8, -15, 4, 11, 25, 16, 8, 10,
          -4, 13, 29, 16, 11, 25, -8, 26,
          28, 27, 25, 6, -4, 5, -4, 13,
          30, 26, 19, -5, -14, 6, 6, 0,
          1, 4, -4, -4, 2, -4, 3, -23,
          -11, -13, -14, -7, 27, 62, 77, 9,
          -19, -16, -11, 58, 32, 9, -13, -9,
          -22, -3, 36, 12, 6, 8, 11, -24,
          -31, -8, -18, 4, 16, 1, 6, -30,
          -34, -32, -2, 5, 17, 4, 9, -26,
          -42, -54, -4, -7, 9, 21, -3, -32,
          -36, -57, -19, -3, 21, 34, -12, 59,
          60, 58, 46, 26, -4, -20, -18, -3,
          -1, 2, 5, 1, -4, -1, 5, -43,
          -24, -66, -28, -9, 74, 53, 52, -4,
          -36, -74, 52, 81, 77, 69, 51, -31,
          -5, -2, 28, 23, 47, 25, 34, -1,
          -1, 8, 12, 8, 9, 14, 24, 3,
          17, 2, -13, -8, -3, 14, 4, 1,
          7, -11, 9, -7, -14, 1, 11, 0,
          2, 0, 0, -1, -2, 1, -1, 114,
          129, 99, 49, 9, -28, -36, -24, -26,
          -21, -21, -31, -6, 1, 28, 55, -31,
          -30, -25, -5, 1, 22, 36, 40, -23,
          -22, -15, -4, 8, 20, 21, 19, -25,
          -35, -15, -17, 0, -6, 23, -4, -1,
          -7, -7, 26, 26, 44, 1, 2, -13,
          -3, 12, 1, -22, 38, -30, -5, -4,
          -19, -10, 8, 13, 10, 21, -5, 4,
          3, 5, 4, -3, 3, -2, -3, 51,
          -3, 57, -37, -32, -43, 25, 34, 40,
          31, 59, -17, -55, -37, -36, 34, 37,
          15, 25, 4, -24, -23, 1, 64, 22,
          5, -0, -9, -0, 3, 14, 37, 6,
          2, -1, 4, 10, 5, 28, 32, 14,
          9, -17, 11, 31, 19, 25, 31, -2,
          -3, 3, -1, -4, 2, -3, 0, -81,
          -66, -53, -33, -10, 8, 21, 20, -18,
          -27, -17, 26, -2, 12, -9, -17, -26,
          -37, -14, -1, -3, 6, -5, -8, -44,
          -31, -13, -4, 10, 3, -2, 0, -30,
          -16, -21, 12, 22, 15, 13, 17, -18,
          -34, 0, 24, 41, 17, 32, 24, -11,
          5, 45, 20, 35, 25, 41, 32, 26,
          20, 18, 12, 2, -6, -29, -12, 4,
          2, 3, -4, 2, 3, 5, -4, -30,
          -58, -58, -43, -20, -60, 21, 39, -35,
          -53, -68, -29, -52, 54, 44, 59, -28,
          -43, -18, -10, -4, 22, 23, 34, -11,
          1, -10, 9, -3, 5, -17, 17, 17,
          1, 6, -3, -1, -7, -47, -14, 3,
          0, -17, -15, 7, -2, -8, -14, 1,
          5, 1, -1, 0, -4, 4, 1, -21,
          -9, -19, -31, 35, 10, -13, -5, 10,
          3, -0, 17, 5, 11, 6, 6, 10,
          -5, -0, -13, 8, 45, 14, 5, 22,
          6, -9, -7, 3, -3, -0, -19, 13,
          26, 2, -40, -16, -21, 39, -18, 23,
          77, 62, 0, -55, -30, -48, -32, -11,
          85, 77, 5, -17, -74, -0, 27, 109,
          114, 97, 69, -37, -34, -17, -32, 3,
          0, -2, 3, 5, 1, 3, 3, 57,
          11, -48, -23, 3, 6, -60, -74, -21,
          -10, -14, -15, 31, 1, -15, -7, -15,
          -16, -19, -22, 1, 9, 13, 12, -10,
          -12, -5, -18, 2, 61, 17, -3, -6,
          -15, -18, 36, -16, 13, 38, 22, -11,
          7, -2, -18, -19, 8, 66, 27, 0,
          2, 4, 5, -1, 5, -3, 1, -8,
          -2, -11, -5, -7, 7, 3, 9, 32,
          -7, 9, -29, -5, 26, 11, -10, 4,
          4, 1, 7, 20, 14, 6, 4, -0,
          13, -4, -7, -16, -5, -4, -2, 7,
          58, 38, -30, -39, -7, -14, -18, 37,
          68, 92, 26, -43, -20, -4, -27, 62,
          79, 65, 33, -37, -9, -49, -35, 87,
          40, 36, 60, 54, -4, -16, -15, 1,
          2, 2, 2, 2, 4, 5, 2, 10,
          -25, 19, 25, 2, -10, -56, -31, 20,
          9, 26, 23, 11, -38, -51, -29, 12,
          52, 54, -6, 0, -2, -8, -3, 1,
          49, 21, 25, 6, -4, -3, 0, 9,
          60, 24, -16, -11, 1, -4, 16, 11,
          83, 39, -10, -17, -15, -3, 24, 5,
          0, 2, 1, 0, 1, 3, 4, 7,
          15, 19, 3, -9, -3, -7, 7, -8,
          -15, 7, 7, 6, -10, -10, -26, -4,
          -11, -1, 4, 2, -5, -12, -31, -14,
          -33, -5, 11, 5, 4, -8, -24, -46,
          -8, -30, -3, 31, 25, 9, -30, -9,
          -5, 17, -16, 22, 38, 18, -75, 12,
          -0, 15, 37, 8, 32, 15, -60, -59,
          -90, -99, -45, -20, 17, 26, 25, -1,
          5, 1, -3, -2, 5, -3, -2, 9,
          32, -35, -38, -56, -17, -68, -51, 5,
          -28, 18, 20, 75, -42, -13, -15, 25,
          6, 26, 10, -8, -21, -35, -28, 26,
          22, 4, 20, 8, -10, -31, -32, 28,
          22, 4, 10, 2, -2, -22, -35, 22,
          21, 9, 18, 14, 8, -15, -46, 0,
          -1, -3, 1, 1, 3, -3, 1, 15,
          22, 26, 2, 28, 26, -6, 2, 2,
          11, 18, -9, -5, -4, 7, 3, 7,
          2, 17, 4, -0, 2, 4, -8, 1,
          -13, 6, 3, 7, 11, 15, -11, -21,
          -23, -11, -13, 8, 22, 16, -28, -24,
          -33, -31, -28, -34, 22, 26, -66, -6,
          -39, -39, -68, 5, -13, 37, -49, -27,
          -55, -54, -53, -26, 21, 27, 33, 5,
          0, -2, 2, 3, 5, -4, -3, 23,
          37, 56, 51, -1, 1, -36, -43, 21,
          3, 20, 2, 26, -19, 4, -23, 17,
          4, 18, 18, -2, -24, -27, -9, 14,
          21, 17, 19, -7, -21, -24, -38, 30,
          42, 24, 9, -2, -6, -25, -34, 21,
          42, 18, 17, -7, -14, -31, -39, 2,
          1, 4, 0, 2, -4, -3, -4, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif