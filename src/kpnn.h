#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS = 25;
int HIDDEN_BIAS[N_HIDDEN] = {6, 8, -5, 8, 11, -4, 31, 29, };
int OUTPUT_WEIGHTS[N_HIDDEN] = {16, 24, -10, 26, -19, -30, -14, -19, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -4, 3, 1, -3, 4, 2, -1, 5, -35,
          -29, 12, -17, 23, 37, 32, 28, -5,
          -16, 6, 53, 11, 16, 19, 3, -7,
          -14, -25, 42, -8, -1, -11, -14, 18,
          9, -12, 73, -1, -17, -43, -12, -14,
          -11, 47, 49, -24, -4, -16, -10, -16,
          -24, 68, 22, -42, -38, -38, -3, -1,
          3, -3, -1, -4, 1, 3, -4, -3,
          4, 4, -2, -2, 3, -1, 4, -101,
          18, 4, -27, 7, -19, -24, 13, -2,
          63, 11, 9, -29, 4, -3, 7, 22,
          30, -6, -19, -21, -12, -12, -10, 35,
          52, 14, -40, -23, -2, -11, -9, 25,
          16, 3, 113, -4, -28, 1, 6, 8,
          -2, -12, 88, -22, -7, 21, -1, -1,
          1, 2, -1, 4, -2, 0, 2, 2,
          2, 5, 3, -2, 5, 5, 0, 19,
          17, 23, 55, 96, 53, -7, -34, 15,
          17, 5, 19, -15, 20, -9, -39, 16,
          25, 3, -7, -15, 3, -18, -15, 3,
          32, 30, 0, -17, -24, -21, -14, 11,
          15, 54, 48, 40, 17, 58, -6, 37,
          -44, 44, 55, 5, -5, -51, 31, -1,
          2, 2, 5, 3, 0, 5, -1, -4,
          4, -4, 2, 2, -3, 5, 2, -0,
          -36, -35, -39, -20, -55, -36, -42, -53,
          -6, -22, -11, -50, 22, 33, -39, 10,
          4, 6, 3, 51, 27, 7, 4, -5,
          -4, 20, 84, 28, 3, -9, -6, 1,
          31, 41, 11, -3, -2, -21, 7, 16,
          53, 62, -13, -1, -17, -5, -0, 5,
          2, 0, 3, -4, 3, 4, -3, -4,
          -1, 3, -1, 3, -3, -4, 1, -8,
          -16, -2, -17, -41, -4, 24, 3, 14,
          -16, 52, 34, -31, -15, 6, -31, -17,
          -16, -6, 23, -33, -8, 6, 30, 14,
          17, 60, 11, 1, 26, -33, 10, 17,
          -50, -40, -19, 8, 43, 25, 2, 26,
          23, -49, -8, 38, -0, 29, -17, 4,
          2, 0, -1, 5, 1, 5, 0, -2,
          2, 2, -4, -1, -2, -4, 2, 1,
          -9, 8, 14, -45, 8, -29, -44, 6,
          -24, -0, -38, -20, -13, -8, -27, 99,
          -23, 57, 46, -23, -12, -16, -20, 24,
          16, 3, 29, 1, -15, 3, -22, -2,
          8, -21, 24, 56, -19, 27, -16, -5,
          16, 7, -21, 1, 11, 1, -38, 3,
          -3, 2, 2, -1, 1, 3, 5, 5,
          5, 3, 2, 4, -2, 2, -1, -29,
          -15, -5, -8, -5, -18, 24, 43, -26,
          -30, -20, -12, 1, 14, 21, 24, -39,
          -28, -23, -19, -0, 50, 22, 31, -34,
          -23, -41, -14, -31, 57, 26, 15, 32,
          -16, -15, 37, 9, 52, -29, -6, 5,
          -20, -7, -2, -9, 35, -40, -5, -1,
          5, 5, -1, -1, 4, -1, 3, 0,
          4, 4, 5, 5, -1, -2, -2, -3,
          37, -42, -8, -18, -26, 8, 6, -2,
          -9, 12, -29, -81, -21, -26, 30, 22,
          12, -9, -9, -20, -7, 6, 35, 19,
          19, -8, -2, 2, -7, 19, -7, 1,
          6, -12, -16, 14, 28, 51, 27, 15,
          10, -21, 46, 78, 62, 31, 12, 3,
          5, 0, 0, 2, 1, 0, -4, -2,
          0, 1, -3, 3, -2, 3, 5, 5,
          6, 35, 14, -6, -19, -0, 9, -5,
          6, 10, 12, 2, -4, -1, 9, -12,
          -32, 10, 7, 15, 30, 18, 9, -5,
          -26, -28, 10, 43, 36, 28, -10, -31,
          -34, 26, -13, 15, -16, 36, -16, -4,
          30, -30, -45, 37, -20, 66, -20, 3,
          4, -4, -3, -2, 0, -4, 5, -4,
          5, -2, 5, 2, 0, 5, 1, -14,
          56, 79, 10, 10, 73, -34, -6, 1,
          20, -13, 50, 67, 3, -16, 30, 14,
          9, 23, -12, 8, -35, -34, -2, 23,
          21, 41, 21, -5, -31, -33, -39, 21,
          58, 10, 15, -15, -8, -2, -22, 26,
          51, -14, -9, -21, 19, -8, -37, 4,
          2, -1, -2, -3, -2, 2, 1, -3,
          5, 0, 0, -2, 3, -4, 2, 21,
          15, 16, -34, 16, 6, 2, 21, 22,
          16, -1, -1, 3, 38, 26, 24, 31,
          14, -8, 0, 9, 27, 9, 11, 53,
          17, 3, -35, -28, -29, 35, 11, 38,
          -6, -55, 16, -30, -9, -54, -17, 7,
          39, -24, -47, -24, -5, -4, -7, -1,
          -3, 4, 5, -4, 5, 0, 4, 0,
          -2, -4, 0, -1, 1, 1, -3, -0,
          26, 2, 1, -2, 38, 62, 36, -20,
          -18, -41, 16, 53, 39, 7, 1, -17,
          -1, -23, 9, 16, 44, 4, 27, -26,
          -15, -11, -37, -12, 26, 3, 2, -28,
          -12, -10, 34, 1, 9, 20, 15, -21,
          18, 58, -25, -2, 2, 47, 13, -4,
          1, -3, 4, 5, 0, 2, 0, 2,
          -3, -1, 0, -3, -3, 0, 3, -6,
          -20, 5, 12, 27, 13, 24, 29, -2,
          -8, -8, 45, 10, -6, 10, 33, 9,
          -6, -29, -12, -2, -13, -8, -19, 4,
          10, -61, -6, -3, 10, -22, -13, -9,
          -15, -38, -22, -23, -35, -10, -59, -14,
          -7, -41, 42, -31, 20, -9, 36, 3,
          -3, 4, -2, 5, 2, 1, 3, 2,
          -4, 2, 1, 2, 0, 3, 1, -37,
          92, -11, 24, 85, 93, 47, -53, -39,
          33, 28, 25, 96, -1, 10, -37, -35,
          -45, -8, 34, 43, 39, 29, -6, -29,
          -24, 20, -6, 30, 12, 18, -22, -19,
          -25, 20, -10, -52, -1, 10, 33, -24,
          -33, 20, 55, -38, 11, 25, 40, 2,
          1, 0, 0, -1, -3, 3, -3, 0,
          0, 1, -4, 1, 0, 5, 0, 0,
          5, -11, 48, 12, 39, 22, 11, 6,
          12, -5, -3, 11, 25, 23, 16, 17,
          43, -2, -19, -6, -6, 6, 18, 51,
          3, 21, 2, -28, -6, 3, 18, 29,
          13, -26, -7, -51, 4, 1, 80, -2,
          -7, -85, -8, -36, -6, 2, -31, -3,
          3, 3, 1, -1, -1, -2, -1, 0,
          -2, 3, 4, 4, 0, 2, 0, -37,
          -41, 5, 27, -0, 13, 85, -8, -30,
          -17, -34, -22, -91, 10, -17, -7, -32,
          6, -33, -22, -17, 38, -5, 27, -27,
          -20, -8, -15, -3, 20, 36, 12, -34,
          -21, -20, -8, 7, -2, 22, 22, -28,
          -16, -20, -12, -10, -17, 29, 38, 3,
          5, 2, 1, -4, 0, 3, -2, };


int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif