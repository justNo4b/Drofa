#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

double OUTPUT_BIAS = 2;
double HIDDEN_BIAS[N_HIDDEN] = {-260, -37, -328, -360, 362, 311, -293, 40, };
double OUTPUT_WEIGHTS[N_HIDDEN] = {-0, 1, 1, -1, 1, -1, -1, -1, };


double HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {-38, -71, -268, -68, 56, -155, 219, 238, -34, 87, 280, 310, -167, 254, -181, -122, 33, 353, 241, 42, -344, 252, 102, -244, 217, -296, 93, -307, 237, -249, 177, -206, 72, -44, 121, 174, -156, 377, -340, 216, 77, 344, 125, 315, -170, -11, -217, 249, -83, 86, -114, -365, 359, 24, 250, 166, 128, 365, -107, -54, -292, -345, -226, -171, -3, 286, 53, -120, -87, 116, -313, 379, -298, -143, 277, -71, -116, 100, 224, 208, 238, 159, -105, 174, -238, -268, 379, 287, -296, -113, 283, 244, 394, -338, -322, -381, 1, 150, -99, 321, -146, 4, 287, -30, -90, -184, -69, 184, -26, -233, -361, -206, 283, -83, 19, 117, -291, 5, 1, -216, -75, 328, 82, -91, 384, 158, -61, -25, 335, 248, 326, 228, 292, 208, 223, -211, 68, -250, 7, -374, 355, 40, 257, -109, 353, 310, -387, -340, -77, -358, 274, -118, 379, -368, 175, 12, 177, -281, 389, -254, 21, -59, 388, -90, -260, 218, -266, -143, 27, -189, 344, -44, 255, 185, -90, -137, 96, 365, 382, 44, -378, -82, 322, 48, -41, -248, -337, 193, 320, 97, 362, -65, -344, 6, -109, 271, -174, -317, -249, 245, -113, -293, 268, 190, -60, 222, 111, 94, 192, 98, -254, 216, 75, 111, 320, 86, -85, 388, 326, -156, -273, 276, 169, -218, 351, 100, -348, 204, 193, 256, 61, 120, 352, 374, -73, 358, 179, 76, 43, -14, -202, 197, 269, -82, 377, 184, -400, -116, -182, 332, 122, -54, -132, 345, -222, 257, -294, 281, 72, 301, 135, 180, -317, -264, 141, -362, -322, 392, 137, 98, -378, -31, 333, 293, -41, 325, -272, -50, 226, -401, 334, -378, 383, 244, 347, -234, 104, -345, -348, -216, 7, -169, 7, -243, -40, -232, -181, 45, 201, 18, 231, 238, -384, 187, -204, -18, -217, 384, -3, -353, 387, 385, 133, 39, -91, -240, -137, -369, 292, -80, 272, 373, -193, -107, -263, 182, -288, -391, 290, 320, 30, 118, 178, -296, -70, 380, -271, -238, 5, -223, 257, 2, -217, -18, -367, 73, 139, -93, -247, -312, -141, 74, -337, 59, 13, -216, 285, -240, -206, 179, -311, -130, -98, -78, -23, -120, 335, 105, -310, -43, 289, 370, 17, 104, -407, -303, 261, -182, -323, -376, -88, 400, -245, -22, 83, 179, -171, -357, 10, 41, 244, 118, -44, 189, 82, 371, 161, 50, -259, 259, -361, 100, -130, -312, -184, -100, -175, -319, 115, -104, 157, -363, -108, -51, -339, 27, 186, -120, 87, -205, -17, 357, 315, 376, -182, 25, -20, 390, 119, 131, -86, -206, -171, 188, -102, 55, 168, 113, -198, -123, 66, 364, 361, 365, -72, -377, -358, -282, 361, -237, 367, -60, -273, 285, 349, -47, 357, -76, 386, 61, -335, -101, 260, -102, -313, -245, 16, 247, -67, -128, 178, 397, 276, -212, -5, 238, -201, 42, 14, 216, 191, -26, 199, -27, -135, 143, 337, 261, -319, 326, -69, 185, 267, 250, 131, 1, 34, -258, -145, 371, -336, 73, 3, 328, 267, 61, 190, 121, -295, -195, -64, -40, 187, -261, 342, 101, 290, -76, -35, 22, 304, 309, -175, 166, -213, 360, -225, 229, 157, -313, -132, 236, -182, 243, -179, -320, -82, -380, -158, -326, -195, 196, -332, 45, -38, 71, -259, 308, 400, 125, 381, -71, -328, -195, 155, -162, 219, -29, 125, -371, -300, 394, 273, -77, -101, 147, 1, -129, 161, -99, -55, 31, -314, 29, -313, -295, 151, -155, -385, -203, 15, 394, 139, -271, 238, 339, -370, -301, -82, 152, -270, 18, 136, 52, 347, 92, -214, 400, 355, 359, -104, -97, -16, -373, -24, -288, -275, -273, -390, 202, 375, 23, -180, 121, -208, 119, -301, -171, 230, 22, 392, 339, -356, -220, 21, 30, 278, -159, -309, 237, -200, -22, 184, -169, -348, 212, 397, 235, -9, -393, -319, -33, -321, 368, 129, -120, 97, 231, -235, -61, -141, -243, 335, 364, 391, 415, -349, 257, -160, -295, -263, -290, -260, -28, 383, 214, -203, 372, 77, -177, 33, -208, 178, -238, -242, 362, -310, 246, 203, -148, 225, 88, -13, -190, -337, -386, -187, 146, 262, -320, -117, 41, -227, -341, 56, 190, 265, 224, -199, 366, 86, 220, -253, -134, 366, -103, -176, -360, 191, 60, -129, 11, -249, -101, -138, 260, -99, 68, 4, 211, 150, 288, 294, -39, 331, -57, 196, -161, 210, 391, -188, -98, 229, 411, -185, -162, -86, -315, 331, 142, 157, 252, 201, -54, 200, -330, 251, -314, -217, -137, -48, -35, 173, 278, 316, 102, 258, -233, 342, 78, -249, 188, 2, 17, 187, 208, 249, 131, -66, -183, -134, -328, -344, 107, -349, 239, 184, 317, -13, 321, 180, -16, -100, -16, -140, 230, 118, -309, 381, 58, -196, 187, 294, 184, -189, 78, -338, 98, 259, -1, 320, -293, -287, 25, -131, 210, -145, -378, 103, -139, -22, -126, 221, -92, -120, 100, -275, 369, -180, 148, -343, -346, 373, 322, 239, 202, -384, -68, -112, 249, -42, 239, -5, -295, -154, 247, 302, -261, 261, -359, 6, 288, 368, 272, -215, -159, -388, -93, 257, -174, 101, 304, -123, -289, 210, 160, 321, 246, 152, -203, -268, -295, 99, 139, 266, 2, -22, -175, 135, 286, -141, 194, 200, 270, -309, 376, 165, -295, 333, 7, 366, 23, 346, -165, 122, 173, 57, -314, -377, -223, -138, -251, 321, -6, 270, 170, 371, 286, 17, -265, 163, -95, 302, -71, -258, 11, 314, -64, 113, 208, -53, -299, 262, -108, -38, -362, -370, 383, -325, 109, 211, -389, 235, 137, -11, -236, 360, -30, 108, -375, 109, -145, -84, -341, -162, 73, 82, -229, 52, 255, -382, -380, 391, 295, -84, -401, -10, -395, 51, 102, 120, -119, 123, -372, 70, -265, 252, -320, -234, -37, -293, 284, 236, 39, 351, -314, 172, -301, 304, -162, 373, 333, 320, 12, -118, -161, 29, 261, -144, 128, -368, 368, 57, 144, 29, -287, -66, -109, 250, 89, 252, 353, -379, -268, -369, 373, 256, -143, -324, 177, 86, 89, -243, -343, 135, -330, -108, 218, 14, -205, -48, 39, 223, -403, 231, -142, 190, 229, 175, 43, -73, -315, 2, -43, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif