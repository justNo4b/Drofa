#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS = -18;
int HIDDEN_BIAS[N_HIDDEN] = {-4, 3, -15, -25, 5, 19, 19, -13, };
int OUTPUT_WEIGHTS[N_HIDDEN] = {-33, 26, -13, -24, 28, 18, 18, -27, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          20, -26, -14, -0, -15, -19, -44, 13, 26,
          28, 18, -44, 14, -11, 9, 3, 11,
          31, 10, 11, 13, 8, 17, 2, 24,
          38, 6, 3, 19, 55, 29, -6, 42,
          40, 3, -4, -31, -18, 11, -40, 5,
          -40, -33, -15, -16, -20, -38, -14, 4,
          74, -53, -52, -4, 13, 31, -43, -15,
          -4, -13, 3, -0, 35, -0, -1, 2,
          -1, 5, 4, 1, 1, 1, -4, 3,
          34, 15, 22, 76, 56, 16, 21, 13,
          2, -31, 38, 76, 29, -13, 6, 1,
          4, -19, 20, 2, -13, -12, -7, -6,
          -0, 6, -31, -13, -10, 1, -17, -21,
          -22, 17, -9, -9, -1, 14, 17, -4,
          43, 71, 25, 38, 21, 86, 22, 5,
          0, -4, 0, 4, 1, 0, 1, -57,
          -37, -4, 11, -14, -5, -43, 17, -15,
          -2, 2, -46, -34, -27, -14, -23, -14,
          -9, 20, -6, -16, -37, -33, -31, -29,
          -4, -3, 16, 6, 2, -2, -11, -21,
          -8, 15, -5, 30, 7, 2, 11, -10,
          5, 26, 3, 62, 29, 54, 133, 24,
          20, 29, -7, 21, -33, 25, -16, 2,
          5, -1, 9, 20, -15, 35, 14, -1,
          -2, 4, 1, -2, -1, 1, -1, 9,
          23, 17, -28, -20, 3, 35, 62, 35,
          6, 42, 25, 16, -15, -1, 1, 25,
          4, 28, -21, -19, -53, -12, -5, 28,
          25, 9, 14, -10, -39, -6, -24, 27,
          33, 10, 8, -1, -23, -21, -38, 18,
          21, 9, 20, -0, 11, -29, -55, 4,
          5, -2, -1, 2, 2, 3, 3, -66,
          -54, -69, -7, 48, 39, 60, 26, -6,
          -22, 17, -36, -28, -16, 3, -5, -3,
          -15, 54, -10, -28, -15, -11, -10, -16,
          -7, 2, 14, -22, -5, -6, 9, -25,
          -8, -26, -5, 29, 1, -14, 5, -31,
          -8, 16, -1, -43, 35, -8, 2, -101,
          86, -2, 8, -22, 39, -31, 31, 19,
          -15, 19, 56, 0, -34, -39, -3, 1,
          4, -4, -3, 2, 4, 5, 1, -14,
          -1, -36, -23, 9, -13, -15, -71, -3,
          25, -31, -64, -29, -46, -11, -49, 7,
          -2, 80, 35, 1, 15, -13, -19, 27,
          10, -42, 54, 27, -11, -21, -39, 9,
          27, 12, -1, 7, -5, 4, -14, 17,
          43, 11, -11, -16, 11, -9, -9, -3,
          -2, -1, 0, 1, 2, -3, 0, -2,
          -1, -40, -113, -18, -53, -1, 33, -33,
          -18, -15, -22, -23, -13, -18, -16, -26,
          -7, -7, -2, -26, -8, -15, 2, 34,
          -52, 42, 13, -1, -12, -15, -4, 33,
          -15, -8, 6, 77, -34, 33, -4, 29,
          -26, -105, -6, -85, -35, 40, 8, -19,
          32, -51, -27, 21, -61, -19, -34, 8,
          2, 6, -8, -14, 31, 13, -33, 1,
          4, 2, 4, 0, 4, -4, 5, 9,
          21, 82, -10, 29, 29, 23, 19, -22,
          11, -19, 20, 18, 8, 7, -50, -14,
          -40, -11, -13, 11, 23, 6, -4, 6,
          -6, 15, -38, -11, 20, 13, 2, -11,
          5, -103, 12, 33, -6, 4, 2, 1,
          -45, 3, 22, -93, -23, 1, -1, -3,
          -4, 5, 0, -2, -1, -3, 0, 11,
          6, -2, 5, -3, 26, -27, -18, -2,
          1, 9, -52, 80, 79, -3, -34, 12,
          13, -2, 9, 13, 8, -19, -29, -4,
          18, 1, 15, -11, -9, -30, -23, 7,
          34, -14, -15, -4, -21, -10, -31, 12,
          25, 17, 41, 21, -7, -22, 17, 33,
          -45, 47, 52, 9, -0, -33, 19, 1,
          -5, 4, 18, -13, 23, -37, 27, -3,
          5, -4, 3, -2, 2, 3, 3, 2,
          -26, -3, -46, 15, -42, -16, -31, 2,
          -7, -21, -26, -11, 38, 74, -23, -9,
          35, 30, -12, 15, 74, -22, -22, 8,
          36, 31, 15, 41, 10, -14, -21, 19,
          63, 32, 24, 29, -9, -15, 3, 17,
          56, 33, 57, 27, -2, -11, 7, 3,
          -1, 3, -4, -2, -4, 1, -4, -14,
          12, 8, 52, 37, -10, 9, -2, -25,
          -14, 1, -67, -25, -16, 3, 43, -22,
          -5, -3, -28, 42, 10, 21, 41, 7,
          4, -12, 28, 2, 96, 43, 28, 2,
          -24, -5, -26, 38, 33, 68, -2, -11,
          23, 35, 37, 5, 65, 27, -35, -18,
          -56, 53, 59, 15, -4, -33, -5, -4,
          -2, 29, -21, 11, -14, -16, -32, -4,
          1, 4, -4, 0, 3, -4, -2, -4,
          6, -44, -15, -48, -17, -24, 10, -2,
          24, -27, -26, -92, -4, -59, 33, 21,
          -10, 39, 5, -19, 12, -23, -3, -5,
          16, -53, 4, 4, -6, 9, -1, 2,
          -16, 37, -6, 16, 2, 5, 20, 16,
          3, -6, 42, 27, 31, 17, 28, 3,
          -3, -2, 5, -3, 4, -3, 3, 2,
          10, 4, 27, 22, -18, 43, -16, 25,
          17, 5, 47, 17, 25, -9, -30, 23,
          22, 10, -46, -7, 13, -18, -12, 30,
          34, 42, -21, -15, -4, -15, -15, 7,
          25, 25, -4, -6, -1, -10, -18, 2,
          23, 56, -13, 15, 10, 55, 26, 16,
          -59, 26, 10, -33, 2, -13, 25, 8,
          -6, 10, 10, -10, 16, -23, -13, 4,
          -4, 3, -4, -3, -2, -3, 2, -20,
          -57, -20, 23, 43, -64, 7, -17, -37,
          -9, -65, 30, 50, 29, 18, -30, -2,
          -9, 12, 80, 39, 30, 28, -2, 5,
          -28, 5, 106, 23, 18, 3, -1, -12,
          -12, 52, 10, -2, 20, -15, -1, 6,
          26, 90, -5, -2, -32, -3, 6, -1,
          -2, 5, 2, 4, -2, 2, 1, 16,
          5, -9, -9, 16, 14, 12, 37, 27,
          15, -26, 15, 26, 5, -31, -41, 25,
          17, 9, 2, 8, -51, -31, -37, 20,
          31, 22, 8, 4, -46, -14, -19, 24,
          13, 34, -1, 2, -12, -0, 13, 22,
          47, -4, -37, -35, 49, 19, 34, 22,
          19, -76, -26, 42, -9, 46, -34, -64,
          -35, -41, 1, -24, -21, -15, 6, 0,
          -2, -4, 0, 4, -2, -1, 3, 52,
          12, 46, 46, 12, 41, 8, -35, -2,
          5, 35, 38, 57, 31, 27, -35, -28,
          -22, 31, -23, 22, 16, -8, -4, -47,
          -14, -3, 13, -17, -19, 28, 2, -4,
          -1, 19, 3, -26, -22, -11, -14, -15,
          -14, 19, -85, -45, -34, -12, -14, 4,
          2, 5, 2, 0, -1, 3, -1, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif