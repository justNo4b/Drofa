#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS = -13;
int HIDDEN_BIAS[N_HIDDEN] = {-2, 2, -12, -20, 2, 10, 11, -10, };
int OUTPUT_WEIGHTS[N_HIDDEN] = {-30, 21, -12, -20, 20, 18, 18, -20, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          4, -22, -5, 9, -13, -12, -24, 5, 24,
          15, 11, -14, -4, -10, 2, 1, 4,
          24, 6, 9, 12, 2, 10, 5, 15,
          31, 13, 2, 14, 39, 22, 2, 28,
          21, 4, -11, -14, -6, 15, -25, 3,
          -17, -19, -10, -13, -12, -10, -6, 8,
          64, -23, -52, 19, -12, -5, -23, -12,
          -9, -3, 1, 5, 39, -10, 13, 2,
          -1, 5, 4, 1, 1, 1, -4, 7,
          18, 6, 6, 39, 43, 16, 4, 9,
          6, -14, 45, 57, 11, -1, 4, 4,
          -1, -11, 11, 3, -9, -12, -12, 3,
          5, 4, -21, -6, 5, -6, -13, -4,
          -16, 17, -13, -7, 1, 6, 16, -1,
          30, 62, 16, 33, 23, 52, 13, 5,
          0, -4, 0, 4, 1, 0, 1, -51,
          -44, 12, -10, -12, -14, -31, 33, -10,
          2, 7, -28, -16, -22, -16, -23, -13,
          -5, 10, -19, -10, -22, -16, -19, -18,
          -5, 0, 14, 4, 4, -2, -6, -12,
          7, 3, 3, 26, 10, 6, 15, 21,
          8, 19, 20, 18, 42, 51, 96, 18,
          21, -1, -2, 5, -16, 12, -27, -6,
          6, -6, 11, 19, -3, 38, 24, -1,
          -2, 4, 1, -2, -1, 1, -1, 5,
          14, 7, -28, 4, -14, 20, 37, 9,
          -0, 15, 14, 10, -1, -16, 14, 13,
          7, 20, -17, -20, -41, 18, -4, 14,
          22, 2, 14, 4, -20, -15, -1, 14,
          23, -5, 4, 5, -14, -14, -27, 14,
          22, 11, 7, 10, 7, -22, -38, 4,
          5, -2, -1, 2, 2, 3, 3, -38,
          -42, -27, -10, 28, 23, 29, 20, -6,
          -18, 14, -10, -17, -7, 7, -2, 4,
          -13, 49, -6, -3, -5, -10, -3, -11,
          -16, 1, 20, -19, -7, -6, 9, -16,
          -1, -22, 1, 25, -11, -0, 15, -12,
          -7, 24, 9, -21, 38, -41, 11, -60,
          55, 5, 9, -8, 29, -17, 26, 9,
          -25, 5, 22, -3, -22, -39, -4, 1,
          4, -4, -3, 2, 4, 5, 1, -16,
          -0, -15, -6, -10, -5, -23, -30, -16,
          30, -32, -23, -9, -46, -5, -20, 3,
          4, 56, 18, 2, 1, -3, -6, 20,
          9, -37, 40, 20, -6, -18, -40, 4,
          19, 1, 1, 9, -11, 6, -6, 7,
          32, 8, -10, -3, 10, -6, -6, -3,
          -2, -1, 0, 1, 2, -3, 0, 2,
          -6, -30, -84, 11, -20, -0, 23, -19,
          -25, -14, -7, -9, -11, -21, -13, -6,
          0, 5, -7, -13, -18, -11, 2, 14,
          -34, 28, 16, 3, -7, -11, -1, 20,
          -9, 3, 11, 57, -21, 15, 1, 14,
          -15, -65, -12, -51, -27, 19, 6, -14,
          35, -37, -21, 29, -52, -17, -16, 13,
          -10, 3, -0, -4, 30, 3, -7, 1,
          4, 2, 4, 0, 4, -4, 5, -6,
          25, 54, -1, 17, 17, 23, 6, -34,
          9, -16, 11, 18, 4, -15, -30, -11,
          -34, -20, 3, 8, 12, 6, -2, -3,
          -9, 12, -26, -15, 11, 1, 6, -9,
          -0, -55, 11, 21, -2, 3, 5, -8,
          -31, 6, 9, -59, -19, -1, -5, -3,
          -4, 5, 0, -2, -1, -3, 0, 1,
          8, -2, 6, -1, 25, -12, -4, -5,
          -0, 2, -20, 60, 69, -3, -22, 7,
          7, -0, 17, 9, 4, -13, -29, 6,
          13, 0, 15, -1, -8, -20, -27, -5,
          30, 3, -10, 3, -23, -14, -22, 13,
          23, 30, 27, 18, -4, -14, 14, 27,
          -40, 46, 29, 10, -3, -20, 13, 3,
          -6, -9, -4, -15, 11, -28, 15, -3,
          5, -4, 3, -2, 2, 3, 3, -2,
          -7, 9, -20, -3, -42, -10, -9, -7,
          4, -1, -9, -4, 23, 47, -31, -3,
          24, 28, -7, 26, 35, -7, -11, 6,
          19, 22, 11, 19, 9, -16, -14, 18,
          34, 29, 22, 15, -8, -12, 6, 5,
          31, 25, 43, 16, -15, -8, -4, 3,
          -1, 3, -4, -2, -4, 1, -4, -8,
          9, 8, 32, 42, -13, 10, -0, -13,
          -5, -1, -33, -25, -7, 3, 27, -10,
          -9, 5, -22, 30, 7, 23, 26, -1,
          -2, -6, 4, 1, 55, 36, 28, 1,
          -16, -15, -20, 39, 19, 36, -20, -3,
          16, 1, 33, 5, 28, 20, -15, -13,
          -32, 34, 23, 26, 12, -15, -7, 2,
          6, 17, -19, 16, -1, -14, -28, -4,
          1, 4, -4, 0, 3, -4, -2, -4,
          9, -27, -21, -21, -42, -11, 15, 4,
          4, -16, -17, -57, -14, -45, 30, 11,
          -6, 16, 11, -20, 0, -19, -18, -3,
          6, -39, 2, -4, 7, 7, 10, -3,
          -11, 18, -11, 24, 5, 3, 14, 11,
          0, 1, 27, 13, 21, 10, 17, 3,
          -3, -2, 5, -3, 4, -3, 3, 14,
          9, 3, 18, 13, -20, 28, -8, 16,
          16, 12, 39, 13, 17, -15, -24, 16,
          25, 7, -24, -10, 3, -14, -5, 20,
          28, 30, -12, -8, 0, -20, -7, -4,
          14, 22, -7, -6, -0, -12, -1, -8,
          6, 42, -2, 32, 10, 51, 38, -2,
          -33, 26, 15, -13, 13, -20, 22, 4,
          -10, 8, 15, -2, 5, -13, 2, 4,
          -4, 3, -4, -3, -2, -3, 2, 3,
          -38, -26, 12, 31, -32, -4, -18, -30,
          -3, -37, 21, 26, 18, 14, -32, 9,
          1, -3, 49, 26, 29, 15, -4, 5,
          -15, 7, 77, 29, 13, -3, -6, -3,
          -6, 38, 7, -9, -5, -16, -4, 9,
          26, 63, -9, 0, -13, -6, 3, -1,
          -2, 5, 2, 4, -2, 2, 1, 8,
          11, -12, -12, 14, 15, 20, 25, 20,
          20, -8, 9, 4, 0, -19, -30, 16,
          19, 7, 6, 4, -27, -17, -28, 15,
          19, 12, 6, 1, -31, -6, -10, 17,
          13, 31, -6, -0, -8, 1, 13, 11,
          34, -16, -24, -20, 39, 16, 31, 11,
          17, -50, -1, 22, -9, 47, -23, -50,
          -20, -38, -4, -13, -12, -4, -7, 0,
          -2, -4, 0, 4, -2, -1, 3, 34,
          21, 32, 11, 13, 33, 12, -25, -2,
          5, 27, 22, 43, 13, 12, -22, -1,
          -25, 17, -10, 4, 13, 6, -17, -20,
          -11, -10, 14, -10, -6, 8, 16, -7,
          5, 15, 1, -20, -17, -18, -14, -9,
          8, 21, -48, -25, -27, -9, -7, 4,
          2, 5, 2, 0, -1, 3, -1, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif