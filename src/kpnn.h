#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS1 = 13;
int OUTPUT_BIAS2 = 9;
int HIDDEN_BIAS[N_HIDDEN] = {-4, 6, 6, -6, -5, 30, 5, -17, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {-21, -7, 20, 30, -15, -7, -13, 14, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {-7, -5, -4, 1, -5, -10, 16, 8, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          17, -3, -11, 12, 0, -6, -5, -7, 12, 1, 3, 7, 30, 10, -3, 6, 6, 4, -6, 9, -0, 15, 3, 12, 21, 16, 10, -14, -4, 4, 0, -8, 22,
          23, 14, 24, -12, -21, -6, -2, -14, 7, 1, -18, -22, -16, -16, 33, -8, 12, -11, 5, -15, 4, -3, -2, -7, -4, 6, -5, -2, 5, 12, 27, 15,
          -9, -13, -2, -12, 12, 5, 33, 8, 17, 35, 22, 15, 3, 22, -14, 8, 3, -20, 5, 29, -8, -17, -30, 1, -0, -9, 3, 22, 16, -13, -8, 6,
          -13, 4, -12, -3, 30, 8, -7, -3, -10, 9, -9, -14, 5, -2, 15, -10, 8, 21, 16, 2, -13, 17, 17, -1, -5, 12, -4, -1, -5, 16, -23, -25,
          -16, 1, 8, 30, 86, -1, -1, -8, -2, 9, 40, 36, 2, 2, -12, 4, 3, 36, 27, 14, -16, -10, -15, -3, 5, -3, 5, 8, 7, -8, -17, -4,
          7, 7, 15, 4, 19, 6, -21, -24, -3, 6, -18, 24, 8, 30, -41, -26, -25, 1, 13, 4, 6, 25, -23, 4, -9, 12, -9, 6, 8, -1, -1, 32,
          10, -10, 24, -10, 28, 18, 41, 2, -2, -10, -22, -13, -8, 3, 10, -19, -9, -6, -38, 15, -28, -15, 5, 6, -16, 18, 21, 9, -12, -9, -8, 2,
          3, 33, 7, 3, -9, -2, -2, -2, 6, 2, -4, -4, -3, 1, -7, -1, -5, 1, -14, -4, 14, 6, -5, -27, -5, 6, 10, 4, -5, -4, -16, 1,
          -5, 1, 14, -3, 1, -44, 2, 10, 12, 3, 19, 9, 18, -10, -26, 0, 18, -7, -9, -6, 4, -8, -6, 4, 15, 6, -7, 2, -3, -16, -11, 5,
          0, 31, -5, -6, -6, -18, 4, 15, 19, 31, -1, 8, 12, -10, 66, 27, 24, 13, 11, -10, 40, -31, 18, 8, -0, 13, 12, 8, -4, -6, -3, -27,
          8, -22, 7, -20, 9, 15, -10, -15, -1, -15, -6, -15, -38, -8, 4, -33, -13, -13, -14, -3, 21, -5, -14, -4, -8, -14, 13, 35, 20, 11, 6, 6,
          -9, 1, 64, 14, 10, 12, -3, 2, -0, 8, -8, -6, 1, -7, 1, 6, 14, 28, -7, 0, -11, -0, -2, 7, 13, -1, 19, 27, -4, 11, -4, -0,
          -4, 9, 10, 23, 24, -9, -31, -2, 3, 0, 32, 56, 47, 1, -6, 4, 0, -1, 4, 4, 4, -9, -9, 5, 17, -15, -3, -11, -6, -13, -9, 2,
          21, -12, -18, -19, -16, -2, -8, 7, 26, 29, 11, 2, 2, 8, -9, 6, -15, 42, 23, -17, -14, 10, 5, 5, 20, 22, 3, 10, -4, -4, -4, -21,
          3, 21, 14, -0, -1, 32, 4, -0, -25, -27, -21, -17, -30, -20, -17, -8, 1, -15, -19, -15, -21, -11, -19, -1, 6, 30, -14, 5, 7, -2, -10, -2,
          0, 9, 7, 10, -2, 2, -6, 3, 25, 44, 7, 0, -0, -1, 4, -3, 44, 1, 3, 14, 1, 4, 9, 6, 32, 5, 2, 1, -3, -3, -3, 5,
          -0, -14, 2, 6, -9, -8, 11, 4, -5, 7, -12, -24, -14, -10, 0, 2, 2, 14, -0, -23, 8, -1, 2, -7, -8, 8, 5, 3, 1, 15, 26, -11,
          -12, -8, -7, 29, 15, -1, 13, 5, -15, -11, 2, 3, 12, 4, -38, -10, 11, -4, 3, 21, 11, 8, -13, 13, 23, 19, 20, -1, -4, -0, -4, 19,
          7, 17, -12, -1, -3, -1, 32, -12, 1, 17, -1, 3, -20, 9, 17, 11, 13, 47, 17, -22, -14, 28, 37, 15, -0, 31, 1, 7, -9, 13, 7, 18,
          0, 5, 14, 4, -10, -8, 1, 3, 17, -9, 8, -2, -7, -2, -12, 6, 25, -1, 5, 6, 8, -5, -20, -30, -6, -7, 6, 6, -10, -26, -23, -4,
          -10, 6, 15, 27, 33, 36, 2, -9, -12, -2, -0, -11, 0, 11, -9, -12, -14, -5, 0, 28, 4, 6, -5, -10, -15, -3, 2, -19, 8, 14, 0, -11,
          -12, -24, 12, 6, 3, 36, 6, -13, -12, -4, 3, -10, 32, 16, -12, -1, 5, -13, -1, -1, -12, 17, -18, 12, 7, 3, -3, 11, -5, -0, -7, 26,
          0, -3, 7, 28, 5, 10, 33, -20, 30, -34, -28, -19, 18, -17, -14, -18, -23, -35, -27, 38, 9, 32, 23, -14, 1, -9, -1, 33, 16, -8, -12, -0,
          4, 6, 9, 5, -1, 4, -25, 8, 1, 6, -7, -3, -6, 5, -5, 2, 4, -1, -7, -7, -11, -8, -7, -20, 12, -9, 0, -3, -5, 20, -8, -2,
          -11, 6, 21, 12, -16, -1, -7, -5, -5, -13, 4, 30, 9, 6, 11, -7, -7, -4, -18, 21, 20, 29, 8, 1, -1, -13, -13, -1, 19, 15, 20, 16,
          3, 19, -10, -8, -9, 17, 16, 11, 25, 31, 1, -6, -7, 8, 22, 3, -3, 21, -10, 10, -42, -8, 41, 8, 7, 8, -3, -5, 4, 11, 5, -3,
          -15, -26, 14, -1, -5, -29, -35, -7, -36, -41, -24, -19, -20, -15, -17, -4, -3, -19, -16, -5, -23, -11, -14, -2, 0, -18, -9, 4, 11, -11, -3, -12,
          -0, 16, -4, 10, 7, -7, -11, -1, -6, -7, 16, -12, 7, 8, -1, 10, 8, 32, 8, -13, -2, 16, 16, 11, -12, -10, -2, -3, 1, 24, 17, -25,
          13, 11, 21, 4, 3, -16, -2, -7, -10, 13, -17, -12, -35, -26, -7, -7, -7, -5, 5, 2, -1, -21, -17, -7, -24, 2, 8, -5, 20, -1, -11, -31,
          -9, -1, 9, 11, 4, -10, 5, -37, 12, 18, 12, 19, -0, 19, 2, 34, 8, 33, 14, 21, 19, 3, -14, 14, 6, 11, 3, 7, -3, -7, -6, -32,
          10, 7, 5, 9, -25, 20, -16, -35, -1, 15, -21, 8, 3, -15, 13, 5, -6, 10, -4, 20, 1, 13, 32, 9, -4, 16, 3, 12, -23, -8, -2, 11,
          7, 15, 5, -7, -16, -10, -6, 11, 5, 2, 3, -8, 6, -5, 7, 7, 5, -5, 3, 1, 12, -1, -4, 27, 3, 17, -20, -8, -12, -28, 2, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif