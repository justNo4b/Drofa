#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (16)

int OUTPUT_BIAS1 = 6;
int OUTPUT_BIAS2 = -4;
int HIDDEN_BIAS[N_HIDDEN] = {7, -8, -7, -8, 8, -18, -1, -9, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {-11, -12, -10, -31, 22, 23, 9, 25, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {9, -7, -0, 5, 2, -2, 2, -1, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          1, 5, 0, 0, 1, -3, 0, 2, 7,
          8, -2, -10, 10, -16, -5, 24, 6,
          -3, -1, 18, 7, 16, 11, 4, 6,
          -9, 10, -16, 6, 0, 5, 2, 6,
          14, -19, -20, -6, 14, 30, 13, 19,
          38, 0, -18, -33, -8, 26, 44, -13,
          35, 31, -2, 35, -60, -14, 10, 3,
          -4, 3, -2, 0, 5, -3, 1, 2,
          -1, -3, -1, -4, -1, 2, 4, -45,
          -25, -39, -9, -25, 17, -18, -27, -6,
          -8, -6, 36, -8, 1, 13, -33, -14,
          4, -7, 3, 4, 7, -19, -5, -14,
          -12, -6, -10, -3, 10, -18, -5, -2,
          -18, -13, 25, -7, -1, -6, -3, -8,
          42, 18, 8, -6, 13, 29, 16, -4,
          4, -1, 3, -4, -3, 0, 0, -4,
          -4, 5, -1, 0, -1, 1, -2, 1,
          0, -5, 26, -5, 36, 7, 20, 1,
          6, -2, 5, -5, 3, 4, 24, 8,
          14, 7, -18, 1, -0, 5, 4, 33,
          55, -2, -5, -13, 4, 2, -2, 22,
          -26, -22, -7, -2, 4, 15, 21, 13,
          11, -5, 3, -3, 3, -0, 3, 2,
          -2, 0, -3, 0, 5, 4, 5, 2,
          1, 3, -1, 4, 4, 1, 4, 1,
          20, 21, 25, -0, 14, 31, 39, -1,
          -8, -10, 27, -45, 10, 24, -2, -12,
          2, -13, 4, -18, 23, 15, 36, -18,
          -22, -5, -11, 7, 32, 19, 45, -11,
          -12, 9, -10, 1, 10, 9, 22, -14,
          -13, 9, -5, -9, 13, 4, 25, -1,
          1, 4, 1, 2, 5, 0, -2, 4,
          2, 4, 2, -3, -4, 5, 4, 15,
          3, 12, 36, 18, -15, 11, -8, 7,
          1, 17, 29, 23, -9, 13, 4, 20,
          -2, -0, 13, 6, -5, 26, 24, -7,
          12, -7, -0, 6, 6, 2, 5, -11,
          -21, -14, -7, 3, 5, -38, -19, -33,
          18, -19, 2, -7, 2, 33, -15, 5,
          1, 2, 4, -1, -1, 0, 2, 3,
          3, -4, 5, 3, -2, 4, 0, 1,
          20, 28, 10, 40, 44, 13, -22, -3,
          4, 4, 19, 14, -17, 11, -8, -13,
          -1, 7, 36, -11, -1, -16, -2, 11,
          -3, 11, -10, -12, -17, -13, -23, -1,
          -2, 2, -17, 2, -12, 31, -0, -13,
          7, 47, -25, -8, 11, 17, -17, 1,
          3, 0, 1, -3, 1, -2, -3, 2,
          3, 4, 3, -4, 3, 2, 2, -12,
          -9, -15, -24, -52, -30, -5, 17, -12,
          -9, -21, -12, 0, -4, 5, 11, -5,
          -24, 6, 6, 11, 2, 9, 5, 5,
          -17, -15, 4, 19, 29, 6, 7, 6,
          -12, -20, -24, -1, 11, -12, 0, 13,
          -15, -28, -24, 5, -0, -6, -40, 1,
          3, 0, 3, -1, 5, 2, 4, -4,
          -3, -3, -4, -2, -2, -2, 1, 4,
          26, 28, 22, 16, 49, 31, 7, 5,
          -5, 18, 9, 32, -25, 18, 10, 3,
          -17, -1, -1, -2, -15, -1, -11, -7,
          -4, -12, -31, -13, -3, 9, -1, -3,
          -32, -20, -2, -0, 9, 8, -9, -11,
          -38, -22, -11, -1, 6, 3, -10, 1,
          4, 5, 1, -1, -1, 4, 3, 5,
          5, 2, 3, -3, 3, -1, 5, -18,
          -9, 6, -26, -24, -4, 4, 24, -17,
          -18, -18, -8, 3, 3, 11, 18, -17,
          -13, -19, -6, -6, 24, 23, 13, -17,
          -11, -23, -12, -7, 14, 16, 5, -15,
          -8, -11, 13, 7, 12, 9, -5, -9,
          -10, 13, 13, -3, -0, 21, 4, -4,
          -3, -4, 0, -2, 5, 4, -1, -1,
          -4, 2, 1, -1, 2, -4, -1, -26,
          -36, -27, -37, -6, -15, -12, -11, -0,
          -13, -17, -13, -35, -22, -8, 24, -5,
          5, 1, -14, -18, 2, -6, 25, 7,
          7, -8, -3, 3, -0, 8, 16, 5,
          4, -4, -8, 15, 16, 24, 19, 12,
          -1, -14, 37, 47, 30, 22, 11, 5,
          4, -2, 4, 5, -4, -3, 4, -1,
          -4, 4, -2, 3, -3, 4, -1, -0,
          -0, 1, -36, 6, -23, -11, -7, -1,
          -9, -0, 14, -11, -10, -18, -7, -16,
          -19, 14, 16, 19, 8, -7, -12, -32,
          4, -11, -1, 12, 18, -14, -40, -13,
          -8, -10, 4, 35, 22, 15, -36, -4,
          10, -28, -1, 14, 17, -4, -17, -2,
          3, 4, -4, 5, 1, -2, -4, -3,
          0, 5, 5, 0, 5, -3, 5, -3,
          22, 16, -16, -24, -2, 10, 12, 11,
          8, 28, 16, 36, -6, 12, 5, 13,
          4, 18, -9, -6, -44, -3, -2, 15,
          11, 2, 11, -6, -19, -20, -5, 13,
          10, 8, 11, -8, -5, -16, -12, 5,
          6, 7, 4, 1, 16, -20, -25, -4,
          0, -2, 5, 5, 2, 1, 4, 3,
          -3, -2, 1, 5, 0, 4, 2, 1,
          13, -10, 21, 31, 10, -5, -2, -0,
          10, -32, -19, 15, 16, 12, 3, 13,
          10, 7, -13, 16, 4, 8, 3, 11,
          6, 40, -13, -32, -16, 7, -8, -6,
          29, 30, -14, 54, 4, -16, 4, -4,
          -10, 32, 7, -34, 8, -4, -8, 1,
          5, 5, -3, 2, -2, 0, 2, 4,
          5, -1, 4, -2, 1, -4, -4, 10,
          5, 18, 4, -9, -4, -3, 3, 4,
          -32, 3, 14, -6, 27, -4, -4, 2,
          -8, -25, 45, 24, 9, 3, -2, -3,
          -29, 3, -37, -2, -1, 9, 25, -4,
          -15, -2, -6, 6, 15, -7, 10, -6,
          -14, 19, -14, 17, -9, 12, 13, -3,
          -1, -4, -3, 2, 0, -2, 4, 4,
          4, -1, 3, 3, 3, -3, -3, -8,
          -17, -9, 2, -7, 14, 8, -9, -14,
          -2, 10, 4, -15, -29, 2, -17, -17,
          -14, -7, 2, -9, -19, 4, 4, -22,
          -2, -4, 20, 16, 16, -39, 21, -1,
          9, 34, 10, 13, 13, 16, 18, 66,
          -5, 42, 35, -0, 12, 9, 33, 0,
          0, 2, 5, -4, 3, -3, -1, -4,
          4, 0, -3, 2, 0, 2, -1, 8,
          -41, -28, -12, 0, -43, -15, 1, -2,
          -8, 9, 3, -20, -25, 5, -7, 12,
          12, 11, 6, -13, -7, 2, -4, 8,
          -2, 4, 23, -3, -4, -7, 1, 14,
          -3, -9, -19, 7, -9, 3, -17, 5,
          -10, -20, -9, -3, -7, -31, -8, -3,
          -3, -3, 4, -1, 3, 1, -2, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif