#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

double OUTPUT_BIAS = -12;
double HIDDEN_BIAS[N_HIDDEN] = {7, 3, 21, -4, -0, 16, 4, 3, };
double OUTPUT_WEIGHTS[N_HIDDEN] = {24, 10, 16, -33, 32, -16, -22, 18, };


double HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {-1, -3, -1, 1, 0, -4, 2, 4, -14, -8, -1, -16, -9, -7, 10, 24, -12, -17, -10, -4, 7, 6, 20, 13, -14, -20, -12, -4, 3, 16, 12, 16, -11, -8, -26, -5, -8, 16, 11, 4, -28, -8, -8, 12, -12, -2, -17, -3, -17, -31, 5, -14, 0, 4, -6, -7, 2, 4, 1, -3, -3, 2, -4, 2, -2, 1, -1, 3, 1, 4, -4, -3, -3, 19, -13, -5, -1, -10, 11, 22, 4, -16, -2, -25, -21, -14, 2, 9, 7, 15, -4, -4, -11, -4, -0, 24, 7, 7, -5, -8, -4, -4, 11, 12, 5, -0, -6, -3, 4, 5, 16, 11, 2, -0, -17, 18, 40, 30, 10, 7, 0, -3, 2, 1, 4, 4, 2, 4, -2, 0, 0, 0, 0, -2, 2, 1, 3, 4, -0, 18, 3, 15, -10, -7, 2, -8, -13, -5, 9, 0, 5, 3, -6, 20, -6, 23, 27, -4, 8, -20, -2, 8, -11, -17, -19, -13, -9, -10, -8, 11, 31, 15, 51, 36, -15, 7, 3, -25, 57, 15, -16, 7, -28, 8, 4, 5, 0, -2, 5, -3, 2, -1, 1, -1, -3, 4, 3, 0, 4, 2, 1, -2, -21, -4, -3, -15, -12, -19, -37, 1, -1, -15, 16, 16, -2, 4, -3, 6, -2, 11, 24, 4, -2, -7, -11, -1, -4, 40, 15, -18, 15, 1, -2, -8, 70, 2, 3, -11, -5, -7, 4, 18, -2, -12, 50, 1, -0, 5, -4, 2, -3, 0, -2, 2, -3, 0, -2, 2, -3, -4, -4, -1, 2, 5, 16, 21, -5, 12, -2, 4, -3, -9, 15, 23, 1, -7, -1, -6, -6, -9, 13, 3, 8, -10, 3, 1, 2, 5, 18, 7, 43, -1, -0, -6, -4, 27, 11, 23, 38, -15, 5, 41, 29, 27, -26, 54, -0, 2, -16, 11, -12, -11, 0, -3, -1, 5, 1, 3, 3, 2, -4, -1, 0, 3, 2, -3, 0, 0, 3, 7, -11, 22, 18, 18, -14, 31, 1, -12, 0, 30, 30, 21, 3, -25, -4, -19, 20, 22, 7, 20, 2, -4, -3, -12, 2, 11, -0, 1, 10, 7, -2, -0, 12, 1, -11, -6, -12, 3, -4, 3, 33, -9, -7, -9, -11, -2, 2, 4, 2, -4, 1, 3, -4, 1, -1, 5, 5, 5, -2, -4, -4, 0, -7, 0, -15, -21, -53, -37, -10, 10, -6, -1, -16, -7, 2, -7, 1, 6, -4, -7, -1, 8, 10, 0, 15, 6, 0, -5, 0, 9, 10, 11, 17, 16, 2, -9, -28, -42, -6, 14, 14, 10, 4, 6, -18, -28, 5, -5, 19, -15, 0, 0, -2, -3, 0, 1, -3, -1, -4, 4, -1, 0, 3, 4, 1, 5, -10, 11, 33, 34, 16, 30, 29, 20, 2, -1, -13, 6, 30, 29, -16, 14, -17, -21, 4, 4, -4, -3, -1, -3, -8, -10, -12, -25, -14, 1, -4, 3, -7, -28, -14, -6, -2, 7, -0, -2, -13, -41, -12, -5, -4, 4, -0, -6, 1, -3, 4, -1, -4, -1, -4, 2, -2, -4, -4, 4, 4, -3, 2, -1, -6, -6, -1, 2, -8, -15, -5, -13, -3, -3, 7, 0, -3, -9, -15, -16, -7, -1, -4, 10, 0, -4, -3, -9, -25, -5, 2, -11, 11, 17, -0, -10, -28, 4, 7, -5, 27, 9, 9, -33, 13, -38, 26, 13, 16, -12, 4, 1, -4, 0, -3, 5, 5, 4, -2, 0, 1, -3, 1, -1, 2, -4, 4, -3, 5, 10, -4, -4, -9, -26, -33, -1, 4, 9, 27, 7, -10, 3, -8, 18, 12, 6, 9, 10, -10, -16, -11, -12, 11, 13, 2, 13, -1, -20, -19, -18, 10, 10, -0, 7, 9, -7, -8, -19, 9, 4, -7, -19, 3, 6, -14, -19, 3, 3, 0, -4, 5, -2, 2, 5, 2, 2, 3, -3, -1, 2, -3, 2, 7, -0, -7, 16, 17, 37, 19, -8, -0, -5, 20, 5, 6, -14, 12, 12, 1, 3, -6, 1, -3, -1, 1, 2, 5, 6, -23, -3, 18, 1, -12, 5, 9, -9, -19, -19, -8, -5, -17, -7, -7, -5, -16, 12, -2, -19, -0, -3, 0, 5, 5, 5, 3, 2, -2, 3, 4, 0, -3, 4, 4, -4, 3, -2, -22, 18, -27, 35, -19, -9, 1, -0, -22, -11, 41, 19, 6, -11, 0, -10, -12, -9, 10, 53, -1, 13, -9, 4, -22, -9, 9, 13, -3, -7, 6, 0, -15, -14, 7, -16, 2, -11, 12, -9, -13, -17, -4, -27, -8, 10, 1, -7, -3, -4, 4, -4, 2, -1, 2, -4, -4, 4, -4, 1, -4, 0, -1, 4, 3, -1, 17, -3, -14, -17, -6, 3, -1, 3, 12, 3, 2, -1, -4, 0, -3, -16, 11, 2, 8, 4, 2, 4, 6, -9, -11, 11, 24, 14, 8, -4, -1, -21, 8, 12, 1, 1, 13, -22, 10, 17, -7, -2, 21, 14, 31, -8, -2, 0, 0, 5, 1, -2, 1, -1, -1, 2, -3, 2, -4, 3, 1, 4, 15, 48, -23, -15, 2, 28, -28, -41, 1, 10, -0, -23, 33, 2, 21, 30, 19, -1, 22, 0, 3, -12, -9, 1, 15, 3, 19, 8, -2, -13, -14, -17, 17, 17, 13, 5, -10, -1, -0, -10, 16, 23, 1, 15, 3, 8, -3, -17, 0, 0, -1, -1, 1, 2, -1, -1, 5, -4, 4, -3, -2, -1, -4, 2, -7, -17, 0, -3, -6, 4, -0, -7, -14, -8, -16, -3, -4, -5, -4, 1, -12, -21, -3, -4, -2, -4, 6, -9, -16, -4, -18, 27, 11, -7, 7, 11, 59, -9, -4, 15, 2, 4, 33, 11, 63, 45, 19, 15, 0, 8, -19, 6, -1, -3, -2, -1, 2, 5, -2, -2, 0, -4, 3, 1, -4, -3, -1, 4, 5, 11, 21, 52, 8, -16, 17, 13, -3, -6, -20, 4, 56, 12, 4, 2, 7, -1, -15, -3, -0, 7, 5, 2, 11, -8, 21, -11, -13, 5, -12, 6, 18, -1, 25, -41, -10, 14, -7, -3, 14, -12, -5, 14, 2, -4, -9, -7, 4, 1, -1, 3, -4, 2, -3, 0, };
int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif