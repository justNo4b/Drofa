#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS = -8;
int HIDDEN_BIAS[N_HIDDEN] = {5, -1, -2, -9, -33, 4, -1, 12, };
int OUTPUT_WEIGHTS[N_HIDDEN] = {-18, -23, 22, 25, 16, 26, -23, 17, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {3, -4, 4, -3, 2, 3, 2, 4, -3, -7, 9, -12, -15, -15, -3, -9, 2, -4, 11, 16, -14, -2, -7, -6, -5, -15, 5, 1, 2, 19, 20, 8, 6, -26, -17, 8, 26, 40, 41, -0, -2, -27, 2, -8, 14, 42, 17, -15, 19, 20, -12, -7, 24, -12, 38, -7, -3, 1, 5, 5, 4, 1, -2, -3, 1, 3, 5, -1, 1, 0, -3, -1, -9, -7, 17, -1, 9, 52, 1, -16, 24, 9, -9, -11, 58, -7, -4, 13, 18, 9, 31, 12, 21, -12, -7, -12, 23, 21, 28, 32, 2, -14, -8, -38, 17, 33, 10, -2, 7, -15, 10, -22, 16, 31, 5, -1, -2, 5, -11, -27, -2, -1, -1, 4, 1, -2, -4, -1, 5, -1, 3, -4, 3, 1, 2, -2, 6, 7, -3, -9, 12, 9, -0, 27, 3, -1, -11, -21, 2, 19, 13, 30, 18, -15, -10, -13, 8, -0, 7, 19, 34, -2, -30, -12, -19, -11, 7, 10, -35, -44, -11, -14, -29, -0, -38, -37, 8, 47, -30, -39, -11, -2, -6, -32, 0, -1, -3, 3, 3, 0, 5, -1, 0, -3, 3, -4, 3, 0, -4, -2, -15, -5, -9, 16, -2, 20, 43, -5, -0, -8, -25, 7, 55, 50, -1, -2, -5, -13, -14, -22, 12, 24, 20, 44, -3, -8, -7, -25, 5, 21, 12, 13, -9, -4, 8, 46, -3, 11, 9, 17, -6, 49, 54, 18, 5, -4, 19, 16, -4, 5, -2, -4, 2, 1, 3, -1, 1, -1, 1, 3, -4, 3, 3, 1, -9, 3, 3, -45, -3, -22, -11, 2, -6, -18, 8, -18, -5, -22, -28, -12, -17, -41, -4, 21, 12, -3, -15, -16, -42, -7, -1, -1, 11, 13, -6, -25, -19, 7, 16, 13, 33, 7, 0, -28, -4, -15, 31, -4, -11, 12, -13, 3, -2, -4, -3, -3, -3, -4, -1, 2, 0, -1, -3, 2, -3, 4, 4, 2, 12, 14, 6, 2, -3, -37, -10, 71, 14, 10, 25, 21, 7, -10, 11, 14, 13, 3, 20, 5, -11, -39, 10, -6, 26, 10, 4, 11, 5, -33, -7, 6, 16, 16, 4, 11, 11, -3, -24, -14, 17, 17, 9, 0, 20, 9, -18, -31, 4, 4, 2, 1, 5, -3, 3, -2, 4, -1, 0, -3, 3, -3, 4, -1, -1, 5, 11, 30, 69, 71, 5, -16, 1, -1, 25, 15, 8, 2, -3, 1, 13, 1, 14, 2, 5, -7, -9, -11, 3, -17, 4, -13, -7, -15, 1, -10, 2, 16, 42, 57, 7, 15, -10, -15, 6, -1, 28, -0, -10, -15, -4, 11, 1, 5, 1, -4, -3, -3, -2, 2, -2, -1, 3, -2, -1, 5, -2, 4, 27, -21, -38, -16, -2, -34, -43, -18, 1, -11, 13, -24, -14, -24, -34, -14, 23, 15, 30, -27, 16, 16, -4, -24, 10, 32, 12, 24, 16, 7, 1, -6, 20, 28, 42, 7, 13, -4, -8, 14, 11, 26, 45, 34, 20, -12, 4, 22, -3, 5, -2, -1, -3, -4, 4, 1, -1, -3, -2, 3, 2, 1, 3, 2, -3, -4, 16, -8, -1, -20, -31, 3, -12, 10, -24, -0, -0, 12, -4, -13, -6, -15, 13, -16, 9, 11, 4, -8, 13, -10, -32, 14, 12, 8, 4, -1, -29, 7, 41, 2, 27, 10, 11, -14, 2, 18, 52, 4, 25, 38, 3, -25, 2, 5, 5, 1, -4, 0, 4, -1, -2, 1, -4, 1, 5, 3, 3, -3, -25, 9, 47, -7, -26, 16, -5, -1, -10, -17, -31, -13, 43, 3, -13, 18, 12, 10, -2, -15, 10, -21, -5, 20, 30, 10, 6, -50, -12, -13, -7, -7, 16, 16, 11, 22, -22, -3, -27, -8, 28, 20, -6, 42, 3, -3, -12, -5, 4, -2, 4, 0, 0, 1, 1, -2, -2, 3, 5, 3, 5, 3, 2, 4, -23, -12, 0, -14, -12, -10, 10, 30, -13, -13, -13, -2, 5, 14, 14, 23, -24, -9, -15, -7, 2, 46, 13, 21, -14, -18, -32, -14, -17, 13, 26, 3, -10, -8, 5, 21, 18, 19, -3, -16, -20, -33, 9, 35, -23, 2, -39, -1, -1, 1, -4, 2, 0, 5, -2, -4, 5, 0, 1, 0, -1, 2, 3, -4, 3, 44, -13, -14, -8, -23, 7, 11, 10, -43, -6, -25, -37, -20, 3, 28, 23, 29, 14, 4, -8, -5, 4, 21, 13, 28, -13, -2, 2, -3, 14, 2, 5, 7, -10, -14, 18, 24, 45, 19, 11, 5, -12, 59, 44, 40, 13, 10, 1, -2, -1, 0, -2, -3, -1, 2, -4, 1, -1, 2, 0, 5, 5, 5, 19, 14, 16, 13, 31, -24, -3, 31, 14, 14, 8, 5, 27, -7, -6, 3, 5, 25, 3, 17, 29, 9, -15, -11, 26, 18, 14, -32, -1, -1, 6, -19, 17, 23, -39, -34, -0, -19, 16, -7, -52, 19, -54, -23, 12, -0, -15, -9, 2, -1, 0, -4, 0, -1, 1, 4, 3, 3, 3, 4, 2, 1, 4, 4, 0, 75, 60, 22, -0, 14, 18, 3, -6, -17, -8, 15, 6, -17, 4, -12, -18, -9, 32, 10, 14, -22, 0, -6, -13, -18, -1, 5, 24, -1, 7, 0, -7, -1, -15, 46, -7, 11, 1, 12, -9, -1, 30, -10, -19, 19, 27, 6, 0, -2, 3, 5, 4, -1, 5, 5, 4, 3, 4, 4, -3, -1, 4, -4, 24, 26, -7, 34, 16, 22, -4, -20, 21, 36, -7, -7, -14, 14, -7, -14, 12, 28, 8, -2, 2, 4, -4, -17, 11, 21, 28, 2, -9, -29, -19, -12, -12, 22, 46, -4, 5, 2, 63, 26, 62, -13, 62, 41, -2, -38, -33, 16, 4, 5, 4, -4, -4, 2, 4, 5, -2, 0, 4, -4, 4, 5, 3, 3, 9, -8, 2, 3, 33, -38, 11, -23, -5, 4, -26, 47, 31, 40, 34, -26, -1, -5, 11, 31, 52, 15, 8, 21, -4, -13, 24, 38, 18, 1, 10, -4, -5, 7, 24, 10, -8, 5, -10, -7, 2, 22, 27, -5, -13, -12, -3, -9, 2, -2, -1, -2, -1, -2, -3, 5, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif