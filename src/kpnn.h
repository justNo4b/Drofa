#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS outputs
// inputs = passersColumn + AllPawns
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS = -50;
int HIDDEN_BIAS[N_HIDDEN] = {32, -1, 5, 7, 1, 0, 33, -6, };
int OUTPUT_WEIGHTS[N_HIDDEN] = {15, -32, 35, 18, 22, 22, 17, -17, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {-42, -23, -77, 3, -47, -14, -2, -72, 7, 19, 11, 15, 20, -9, -10, 21, 7, 4, 17, 16, 28, -4, 2, 12, 13, 18, 22, 5, 29, 8, 50, 33, 26, 10, 12, 18, -12, 68, -25, 120, 12, 3, 86, -2, -8, 139, 127, -26, 27, -58, 101, -84, -38, 34, -71, 2, 37, -9, 60, -4, 17, 59, 58, 37, 3, -2, -3, -2, 4, -2, -4, -4, -20, 50, 28, -18, -21, -42, 8, 4, 67, -13, 62, 47, -45, -18, -106, 30, -12, -12, 103, -30, -27, -6, 7, 27, -19, 70, -35, -28, -45, -22, 5, 61, -9, -17, -25, -8, -26, -36, -13, 41, -9, -35, -21, -9, -30, -28, -3, 41, 5, 2, 5, 4, 5, 3, 0, -2, 18, -23, -28, 10, 24, 59, -2, 0, 17, 15, -6, 37, 6, 35, 14, 19, 9, 9, -4, -5, 9, 26, 46, 29, 46, 35, -2, -14, -9, 5, 16, 12, 55, 17, 21, -4, -42, -22, -15, 34, 69, 25, -44, -19, -66, -12, -20, 60, 8, 30, 9, 28, -37, -5, 4, 34, 9, 6, -55, -5, 7, 6, 11, -74, 3, 4, -2, -4, 3, 2, -1, 4, -7, -2, 14, 26, 38, 43, 82, 11, -4, -4, -21, -16, -10, 7, 12, -24, -25, -5, -23, -18, -5, 58, 12, 22, -24, -23, -8, -21, -7, 45, 40, 28, -32, -28, -14, -14, -14, 3, 23, 41, -28, -18, 9, 2, -17, -17, 40, 58, -1, 4, -4, 3, 3, -4, 2, 1, 16, -13, 6, -0, -31, -19, 1, -46, -15, 4, 35, -0, 118, 98, 16, -12, -9, -8, 28, 27, 41, 63, 9, -7, -4, 7, 2, 6, 2, 0, -19, -11, -7, 35, -33, -29, -36, -28, -14, -10, -4, 2, 84, 124, -9, 3, -22, -38, -8, -7, 61, 80, -5, 1, 13, -0, -44, -43, 31, -34, 63, 15, 16, -14, 0, 1, -2, 4, 5, -2, 1, -4, 41, 6, -18, -39, 2, -38, -83, -23, 23, 7, 11, -29, -75, -75, -4, -33, 61, 40, 52, -21, -6, -15, -6, -3, 21, 56, 29, 38, 4, -4, -4, -9, 27, 59, 67, 3, -18, -24, -19, 0, 19, 73, 33, 12, 21, -16, 1, 30, 2, 4, 4, 1, -1, 3, -3, -3, -61, 11, 25, 1, -2, -12, 31, -33, 42, 23, 10, 32, 63, 49, -14, -35, 2, 50, 2, 0, 4, 18, -10, -28, 30, 55, 0, 2, -13, 23, -25, -27, 28, 43, 43, 16, -19, -36, -74, -8, -18, 1, 52, 62, 50, 8, 130, 42, -6, -5, 34, 42, -3, 26, -61, 44, 46, -10, 13, 33, -50, -15, 1, 39, 1, 4, 1, 3, 2, -2, -4, -2, -4, -17, -65, 48, -73, -52, -1, 15, -56, 15, -43, 7, -42, 7, 18, -5, 1, 5, -35, 11, 49, 47, 83, -12, 1, -14, 23, 120, 32, 29, -12, -1, 14, 40, 7, 21, -4, -5, -47, -7, 17, 51, 50, 14, -22, 1, -4, -15, 2, 4, 3, 0, 5, -2, 4, 1, 18, -36, 13, 8, 12, -8, -11, -43, -17, -31, -50, -43, -67, 26, -12, -28, -35, -60, -53, -35, -40, 2, -7, -6, -14, -38, -24, -9, -47, -14, -3, -7, -2, -21, -61, 17, -36, -26, 34, -9, -41, 41, -14, 38, -17, -45, -38, 50, 69, -18, 40, 41, -48, 11, 13, 26, 68, 19, -54, 64, 66, 49, -13, 11, 0, -1, -4, -4, -1, -3, -1, 5, -2, -90, -114, -22, 35, 20, 37, 53, -3, -16, 3, -19, -106, 37, 2, 45, 3, 7, -37, -19, -2, 41, 13, 29, 11, 0, 6, -38, 2, 10, 31, 19, 5, -39, 14, -33, 12, -7, 16, 18, 7, 14, 4, 54, 11, -40, 6, 28, 4, -2, -1, -1, 0, 1, -4, 3, -43, 8, -61, -1, -20, -49, 56, -11, -44, -23, 21, -48, -25, -5, 16, 55, -27, -28, -21, -9, 13, 39, 34, 25, -31, -24, -32, 2, -14, 79, 21, 2, -35, -23, -52, -20, -34, 36, 12, -10, -14, -13, -19, 49, -6, -40, 8, -20, -55, -42, 53, 102, 6, 7, -75, 3, 18, -12, -20, -5, 6, 4, -8, 12, 0, 3, 1, -2, -4, 0, -1, -2, -1, -95, 7, -42, -14, -38, 12, 55, 9, 11, -1, -42, -78, 0, 16, 5, 72, 36, -20, -17, -29, -17, 4, 49, 23, 23, -21, -5, 9, 7, 6, 14, 29, 11, -22, -9, 19, 37, 37, 14, 27, 4, -35, 108, 49, 69, 35, -4, 5, -4, -2, 3, 1, -4, 5, 3, -59, -23, -34, -4, -36, 17, -47, 11, 41, 51, 3, 53, 59, -5, -14, -41, 55, 51, 1, -16, -3, 2, -6, -12, 45, 32, 15, -7, 32, -8, 21, -41, 10, 23, 63, -33, 7, 13, 6, -17, 23, 59, 78, -17, 94, 91, 53, 77, -42, -63, 46, 29, -50, -21, -11, 32, 0, -31, 7, 54, -46, -23, 68, -32, -2, -2, 1, 1, 5, -4, 1, 5, -21, 15, -33, 32, -14, -80, -21, -6, 31, -2, -15, 76, 30, 14, 34, -16, -19, 5, 34, 42, 40, 8, 15, -8, -6, -16, 4, 38, 13, 3, 36, 7, -6, -10, 30, -18, -18, 21, -11, 5, 3, 12, 43, -43, 17, -40, -21, 8, 0, 0, -4, -4, 4, 3, 0, -2, 22, 6, 2, 12, 29, -23, 5, 101, 14, 4, 3, 6, -23, -26, -16, 3, 8, 9, -5, -8, 22, 20, 8, 7, 6, -17, -4, 13, 18, 21, 23, 9, 4, -27, -68, -11, -2, 13, 48, 11, -36, -22, -45, 36, 10, -17, 79, -67, 17, 40, -81, -70, 24, -0, 46, -27, -118, -16, -53, -29, 2, 3, -21, 1, 5, -4, 0, 1, -4, 5, -4, -2, 32, 85, 6, -49, -30, 122, -22, -13, 31, 18, -14, 7, -143, 30, -15, 33, 20, 43, 11, 17, 20, -2, -15, -5, 27, 37, 11, 30, -12, -4, -12, -52, 43, 55, 0, 33, -17, -17, 3, -19, 40, 47, 8, 10, -13, -5, 7, -27, 3, 0, 3, -4, 0, 3, -4, 2, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif