#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS = 25;
int HIDDEN_BIAS[N_HIDDEN] = {4, 5, -4, 7, 6, -5, 22, 17, };
int OUTPUT_WEIGHTS[N_HIDDEN] = {14, 23, -8, 26, -20, -25, -12, -20, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -4, 3, 1, -3, 4, 2, -1, 5, -14,
          -15, 6, -11, 21, 32, 12, 21, -6,
          -7, 2, 32, 2, 14, 8, 5, -18,
          1, -16, 27, -3, -1, -10, -9, 5,
          10, -34, 28, 4, -6, -27, -4, -12,
          -5, 39, 33, -24, -10, -7, -10, -10,
          -15, 48, 13, -24, -18, -23, -1, -1,
          3, -3, -1, -4, 1, 3, -4, -3,
          4, 4, -2, -2, 3, -1, 4, -94,
          20, -13, -22, 4, -12, 0, 4, -3,
          7, 26, 9, -25, -2, -4, -2, 20,
          10, 8, -17, -7, 2, -6, -5, 12,
          51, 23, -33, -19, 1, -8, -4, 20,
          30, -20, 75, 0, -17, -4, 27, 5,
          -3, -6, 61, -12, 1, 10, -2, -1,
          1, 2, -1, 4, -2, 0, 2, 2,
          2, 5, 3, -2, 5, 5, 0, 17,
          13, 5, 40, 68, 27, -3, -30, 9,
          20, -4, 5, -14, 17, -10, -16, 8,
          14, 6, -10, -9, 10, -15, -17, -2,
          21, 31, -3, -14, -13, -15, -4, 6,
          9, 39, 31, 28, 2, 33, 22, 22,
          -38, 24, 35, -6, -2, -32, 10, -1,
          2, 2, 5, 3, 0, 5, -1, -4,
          4, -4, 2, 2, -3, 5, 2, -1,
          -21, -22, -30, -10, -51, -22, -18, -34,
          2, -22, -2, -24, 15, 8, -32, -1,
          -3, 10, 14, 36, 27, 7, -1, 4,
          -3, 15, 69, 21, -0, 2, -1, 2,
          10, 30, -2, -8, -2, -14, -2, 3,
          37, 51, -5, -2, -11, -5, 1, 5,
          2, 0, 3, -4, 3, 4, -3, -4,
          -1, 3, -1, 3, -3, -4, 1, -1,
          -10, 3, -0, -37, -6, 10, -3, 30,
          -7, 21, 35, -29, -10, -2, -19, -17,
          5, -6, 20, -42, -12, 18, 13, -5,
          7, 34, 11, 3, 14, -9, 22, 6,
          -39, -24, -0, 17, 30, 17, 18, 17,
          7, -51, -7, 22, -0, 23, -6, 4,
          2, 0, -1, 5, 1, 5, 0, -2,
          2, 2, -4, -1, -2, -4, 2, -4,
          -7, 7, 5, -26, 13, -11, -29, -5,
          -9, -14, -27, -28, 1, 3, -10, 65,
          -16, 32, 28, -8, -8, -8, -46, 8,
          33, -8, 25, -2, -2, -16, -15, -4,
          14, -13, -3, 24, -15, 15, -6, -7,
          12, 11, -14, 1, 11, 1, -18, 3,
          -3, 2, 2, -1, 1, 3, 5, 5,
          5, 3, 2, 4, -2, 2, -1, -21,
          -13, -7, -6, -5, -13, 8, 25, -23,
          -21, -11, -6, 1, 16, 20, 17, -29,
          -21, -22, -15, -2, 35, 16, 17, -17,
          -11, -26, -17, -20, 29, 20, 12, 24,
          -4, -3, 29, 9, 35, -13, -1, 0,
          -11, -1, -4, -9, 33, -29, -7, -1,
          5, 5, -1, -1, 4, -1, 3, 0,
          4, 4, 5, 5, -1, -2, -2, -1,
          22, -22, -12, -12, -23, 4, -9, 4,
          -19, -3, -39, -50, -14, -8, 19, 18,
          4, -16, -8, -5, -7, 1, 22, 14,
          6, -16, -5, 3, -11, 7, 11, 5,
          -4, -4, -9, 10, 19, 36, 19, 18,
          8, -19, 45, 58, 48, 15, 12, 3,
          5, 0, 0, 2, 1, 0, -4, -2,
          0, 1, -3, 3, -2, 3, 5, 5,
          4, 17, -12, -12, -18, -1, 6, 2,
          1, 13, 9, 2, -0, 2, 2, -6,
          -25, 18, 1, 11, 22, 16, 0, -4,
          -11, -20, 7, 30, 32, 17, -5, -8,
          -14, 21, -2, 9, -10, 11, -11, 1,
          21, -8, -35, 34, -13, 43, -11, 3,
          4, -4, -3, -2, 0, -4, 5, -4,
          5, -2, 5, 2, 0, 5, 1, -13,
          32, 50, 4, -8, 53, -23, -15, -12,
          22, -10, 12, 46, 5, -19, 28, 19,
          7, 27, -5, 6, -19, -24, -9, 15,
          14, 32, 13, -6, -23, -13, -28, 18,
          34, 3, 11, -8, -3, -7, -12, 28,
          43, -9, -6, -13, 10, -6, -28, 4,
          2, -1, -2, -3, -2, 2, 1, -3,
          5, 0, 0, -2, 3, -4, 2, 14,
          14, 4, -16, 10, 4, 1, 14, 11,
          15, -7, -2, 6, 36, 23, 14, 26,
          13, -8, 2, 2, 20, -1, 12, 40,
          8, 0, -28, -21, -12, 29, 2, 35,
          -2, -46, 5, -22, -3, -36, -11, 10,
          20, -23, -26, -14, -0, 3, -6, -1,
          -3, 4, 5, -4, 5, 0, 4, 0,
          -2, -4, 0, -1, 1, 1, -3, -3,
          16, -3, -6, 1, 29, 46, 3, -15,
          -6, -23, 6, 26, 24, 4, -7, -16,
          -0, -11, 13, 7, 18, 4, 20, -20,
          -12, -11, -28, -1, 13, 7, -3, -21,
          -12, -8, 33, 2, 13, 18, 17, -14,
          9, 44, -5, -1, 1, 43, 7, -4,
          1, -3, 4, 5, 0, 2, 0, 2,
          -3, -1, 0, -3, -3, 0, 3, 2,
          -11, 5, -3, 33, 1, 16, 12, -6,
          -5, -3, 15, 3, -7, 11, 26, 8,
          5, -21, -2, 2, -3, -17, -10, 11,
          12, -48, -12, -8, -10, -24, -7, 2,
          -5, -34, -11, -17, -25, -3, -28, -9,
          -10, -26, 22, -11, 21, -4, 9, 3,
          -3, 4, -2, 5, 2, 1, 3, 2,
          -4, 2, 1, 2, 0, 3, 1, -31,
          65, -1, 17, 47, 54, 17, -38, -31,
          18, 19, 22, 56, -8, 26, -9, -28,
          -32, -3, 3, 28, 35, 18, -4, -22,
          -24, 18, -6, 7, 21, 3, -10, -13,
          -25, 13, -8, -39, 1, 11, 15, -19,
          -21, 34, 29, -29, 14, 17, 26, 2,
          1, 0, 0, -1, -3, 3, -3, 0,
          0, 1, -4, 1, 0, 5, 0, -2,
          -2, -12, 33, 4, 31, 8, 10, 3,
          11, -5, -3, 2, 20, 12, 9, 15,
          29, -0, -24, -4, -2, 6, 20, 36,
          2, 18, -6, -16, -2, -2, 13, 18,
          12, -21, -5, -44, -4, -4, 45, -15,
          1, -57, -13, -30, -2, 1, -21, -3,
          3, 3, 1, -1, -1, -2, -1, 0,
          -2, 3, 4, 4, 0, 2, 0, -25,
          -28, -12, 17, 1, 6, 58, -9, -21,
          -32, -27, -15, -63, 2, -1, -14, -18,
          2, -23, -10, -6, 43, 12, 14, -25,
          -13, -5, -11, 1, 12, 26, 15, -25,
          -14, -11, -2, 3, -2, 19, 16, -19,
          -13, -18, -17, -4, -10, 14, 26, 3,
          5, 2, 1, -4, 0, 3, -2, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif