#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS1 = -37;
int OUTPUT_BIAS2 = -16;
int HIDDEN_BIAS[N_HIDDEN] = {-13, -7, 35, 2, 40, 55, -13, 24, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {14, 33, -25, 14, 14, -16, 30, 22, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {4, 5, 8, 9, 11, -2, -7, 4, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -4, 2, 1, 3, 3, 3, 2, -2, -29,
          33, 76, 55, 14, 52, 17, 6, -28,
          -7, -47, 43, -2, 53, 21, 3, -20,
          62, -37, -8, 9, 31, 10, 47, -15,
          12, -24, -21, -35, -51, -27, 3, -20,
          1, 129, -5, 119, 18, -15, 15, -6,
          -9, 136, -61, -12, 17, -9, 16, 1,
          5, 3, 4, -3, -2, -1, -1, -1,
          0, -2, 5, -4, -2, -4, -2, 16,
          -56, -63, -8, -41, -64, -15, -33, 15,
          -24, -13, -11, -10, -36, 14, -42, 89,
          21, 55, -47, 18, -16, 15, -11, 3,
          59, 10, 79, 21, -21, -0, -8, 35,
          6, 169, -11, -15, -19, -16, 1, 7,
          100, -6, -21, 70, -7, 4, 21, -4,
          -4, 5, -2, -4, 2, 0, 1, 1,
          2, 4, 1, 3, 1, -4, 5, -17,
          -7, -5, -9, 0, -35, -17, -10, -14,
          -23, 7, -9, -5, -39, -37, -23, -40,
          -63, -7, 13, 4, -11, -22, -16, -74,
          -31, -10, -3, 21, 26, -18, -21, -99,
          -27, 44, 27, 68, 13, 3, -50, 3,
          4, 64, -17, 8, 14, 10, -11, 2,
          2, 1, -4, 3, -3, 4, -1, 1,
          -2, 1, 1, 1, 3, 5, 1, 11,
          13, -42, -34, 11, -53, -87, -86, 14,
          11, 43, -4, 10, 13, 13, 9, 33,
          29, 29, 6, -12, -43, -2, -24, 32,
          28, 11, 34, 12, -53, -50, -27, 29,
          40, 7, 21, 23, -15, -32, -51, 37,
          18, -7, -10, 20, 16, -42, -61, 3,
          5, 3, 2, 2, 1, -2, 1, 3,
          5, -3, 3, 2, -4, 0, -4, 21,
          16, 25, 24, 78, -20, -2, 11, 24,
          32, 44, 33, 11, 5, -3, -0, 15,
          28, 32, 22, 41, 15, -2, -30, 17,
          24, -8, -48, 5, 25, 13, -1, 4,
          2, -62, -39, -71, -13, -17, -62, -26,
          -111, -101, -49, 9, -84, 78, -67, -2,
          5, 0, 4, 3, -1, -2, -1, -3,
          -2, 4, 5, 2, -4, 2, -2, 56,
          -74, 3, 91, 7, 8, -50, -50, 12,
          5, 11, 42, 58, 9, 54, -50, -44,
          -7, 32, 31, -4, -11, -44, -55, -50,
          -23, -20, 79, 17, 5, -33, -30, -38,
          -29, -35, 64, -11, -4, 6, -20, -23,
          -18, 19, -25, -30, 33, 14, -19, -1,
          2, 0, -4, 4, 4, 3, 0, 2,
          0, 1, 2, 4, 3, 0, 5, -1,
          -11, -38, 10, 36, 33, -12, -11, -6,
          1, -31, -13, -1, -14, -17, -9, -7,
          21, -23, -15, -17, -20, -71, -61, -18,
          29, 14, -19, -56, 1, -100, -60, -18,
          29, -11, -26, -30, -70, -66, -49, 13,
          -36, 27, 30, -44, 4, -42, 6, -3,
          3, 4, -2, 2, 3, 4, 4, -1,
          -1, -3, 2, -4, 5, 4, -1, 8,
          -29, -91, 15, 40, -92, 22, -32, 6,
          18, -35, 10, -105, -36, 17, 8, -54,
          -6, -34, -8, 6, 62, -35, 5, -44,
          -33, -48, -16, 2, 10, 16, 16, -45,
          -59, -15, -5, 17, 1, 18, 14, -45,
          -54, 2, -1, -1, 6, 18, 41, 0,
          -4, 4, -4, -4, 2, 3, -1, -1,
          5, -1, -3, -4, 3, -3, 4, 40,
          42, 5, 48, 14, 11, -6, -25, 38,
          21, 14, 4, 16, 11, 3, -20, 62,
          37, 46, 6, 22, 3, 6, -3, 44,
          27, 41, 8, 11, -14, 3, -11, 64,
          49, 43, -18, -35, 44, 33, 56, -60,
          57, -8, 13, -16, -36, -4, 47, 3,
          3, 4, 3, 2, -4, 5, -1, 1,
          -3, -4, 5, 0, 0, -2, 3, -28,
          6, 32, 43, 33, 20, 29, 33, -20,
          15, 46, 76, 25, 62, 3, -38, -8,
          -9, 37, 42, 18, 22, 7, -5, -22,
          -17, -4, 1, 1, 16, 6, 3, -1,
          -8, 12, -8, -22, 13, -17, -16, -1,
          -17, 95, -32, -37, -30, -21, -15, 4,
          -4, 4, -2, -4, 2, 0, 5, 1,
          -3, -4, 3, -1, 5, -3, 5, -10,
          15, -17, -15, -3, 32, 54, 13, -6,
          -44, 92, 24, 10, -19, 13, 24, 0,
          -7, -3, 27, -25, -16, 13, 27, -23,
          -24, -25, 14, 22, 11, -42, -13, -23,
          -28, -43, -67, 4, -14, -18, -16, -18,
          -22, -32, -24, -19, 1, 49, -63, 4,
          -3, 1, -3, -1, 3, -3, 3, -4,
          2, -1, -1, -4, 2, -2, 0, -74,
          3, -32, -41, 20, 68, 47, -104, -60,
          -11, -35, 14, -122, -87, 108, -12, -39,
          -8, -1, 72, 43, 5, 13, -31, -31,
          -5, 16, 56, 35, -26, -7, -11, -18,
          6, 16, -37, 32, -37, 26, -20, -34,
          -13, 14, -58, -12, -9, -13, -13, 5,
          5, 2, 2, 3, 0, 0, -2, 3,
          0, 1, 2, 2, -2, 0, -2, 8,
          9, 20, 43, 133, 76, 17, -40, -1,
          13, 51, 11, -5, 5, -17, -27, -8,
          12, 5, 20, -37, -8, -18, -42, -22,
          18, 50, -19, -8, -22, -39, -12, 79,
          65, 74, 71, 47, 23, -20, 55, 87,
          73, 86, 89, -9, 50, -17, 33, 5,
          4, 1, 5, 1, -2, 2, 3, -1,
          3, -2, 0, -1, -4, -3, 3, -44,
          18, -53, -60, -55, 6, 15, 11, -61,
          -11, -51, -6, -27, -21, 9, -24, 4,
          13, -34, 35, 78, 2, 18, 2, 28,
          11, 59, 60, 47, -20, -21, 3, 29,
          48, 35, 21, 12, -18, -15, 15, 14,
          71, 69, 57, 16, -13, -4, 9, -1,
          -1, -2, 4, 5, 3, 0, -4, 4,
          2, 1, 1, 5, 2, 5, 2, -29,
          -21, 6, -38, -13, -32, 12, 59, -30,
          -45, -2, -12, 21, -5, 33, 37, -36,
          -33, -11, -3, -4, 66, 60, 44, -28,
          -29, -57, -0, -2, 36, 50, 15, -28,
          -12, 4, 40, -6, 35, 29, -9, 50,
          -39, 40, 92, 9, -9, -88, -21, 5,
          4, 2, 0, 4, 0, -1, 0, 4,
          -4, -4, 2, 0, -3, 2, -4, -13,
          21, 78, -32, -38, -35, -4, 49, -21,
          -26, -16, -31, -109, -50, -5, 36, 10,
          24, -31, 4, -44, -21, 11, 24, 11,
          27, -28, -21, 4, -5, 5, 31, 3,
          -1, -25, -12, 25, 20, 38, 43, 12,
          -24, -30, 100, 63, 43, 23, 29, 1,
          5, 0, 2, -1, 4, 0, 4, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif