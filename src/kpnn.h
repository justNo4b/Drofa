#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x8x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS1 = 19;
int OUTPUT_BIAS2 = -3;
int HIDDEN_BIAS[N_HIDDEN] = {-33, -54, -2, -24, -21, 18, 5, 41, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {16, -18, -8, -5, 15, 14, -13, -19, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {4, -3, -2, 16, -11, -3, -1, 4, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -16, 3, 3, -17, -4, 3, 35, -27, 10, -7, -15, -6, -22, -3, 23, -31, 12, 15, 8, -7, -19, -21, -5, -36, 20, 25, 12, 1, -1, 9, 10, 11, -9, 
          1, 32, 18, 8, 7, 5, 18, -21, 29, 33, 29, 23, 23, -1, -4, -11, 18, 26, 27, 54, 8, -6, 17, 20, -11, 9, 13, 23, 17, 8, 27, 3, 
          -1, -2, -1, 1, -1, -4, 5, 38, -32, -12, -53, -65, -84, 58, 35, 31, 13, -12, -32, -39, -47, -16, 12, 18, 25, 18, 10, -55, -56, -46, -36, -13, 
          17, 17, 19, -2, -24, -40, -24, -15, 6, -1, -1, 8, -1, -9, -15, 8, -17, -20, -12, 24, -4, 4, -51, 2, 5, 2, 2, 4, 4, 0, -3, 40, 
          0, -3, -4, 28, -3, 8, 39, -1, 19, 18, -1, 22, 12, -14, -29, -2, 21, 13, 8, 12, 6, -13, -17, -4, 17, 7, 3, -5, -13, -21, -17, -8, 
          6, 11, -3, -22, -9, -3, 0, 26, 8, 4, -12, -37, -8, 18, 32, -29, -27, -24, -42, -38, -62, -76, -65, 1, 20, 21, 4, -6, -6, 10, -12, 3, 
          -3, -3, 0, 0, 4, 2, 5, 26, 36, 18, 31, 34, 26, 21, 44, 1, 26, 28, 41, 42, 24, 14, -17, 40, 17, 4, 27, 24, 17, -6, -36, 20, 
          21, 15, 12, 11, -2, -14, 15, -6, 9, 3, 11, -14, -4, -15, 11, -3, 14, 19, -6, 1, -61, -29, 1, 4, 5, 1, 0, -2, 3, 1, 2, 32, 
          13, 1, 26, 15, 1, 18, 63, 5, 3, 4, 15, -2, -21, -3, -3, -9, 6, 3, -8, -11, -19, -4, -14, -13, -2, -0, -14, 4, -17, -20, -1, 9, 
          6, 8, -14, -78, 19, 115, 37, 11, 5, -4, -35, -96, 1, 30, 10, 19, 6, -49, -61, -68, 1, 23, 18, -45, -14, 6, -10, -7, 24, 30, -16, 5, 
          3, 1, -1, 2, -4, 4, 0, -9, 73, 71, -3, 14, 53, 28, 16, -3, 32, 5, 28, -3, -0, -8, -86, 18, 32, 23, 10, 15, 13, -15, -1, 27, 
          28, 16, 7, -7, -4, 9, -11, 26, 17, 6, 22, -10, 53, -7, 7, 18, 13, 3, 23, -1, -3, 145, -9, 5, -3, -4, 5, 1, 4, 4, 1, -1, 
          9, 5, 8, 52, 72, 2, -20, 17, 10, 16, 11, 10, 23, 10, 17, 15, 9, 13, 8, 18, 21, 22, 21, 13, 18, 19, 12, 21, 18, 19, 18, 3, 
          21, 15, 17, 21, 11, 22, 20, 8, -3, 12, 25, 18, 16, 16, 18, -47, -19, -41, 10, 7, -2, -13, -24, -4, -18, -4, -10, -35, -79, -5, 4, 0, 
          5, -4, 0, -1, 1, -4, -3, 60, 41, 31, -32, 29, 43, 21, 30, 11, 34, -10, 11, 15, 34, 44, -16, 27, 10, -3, -11, -25, 34, -29, -26, 8, 
          3, -4, -18, -18, -24, -17, -28, -1, -5, -11, 1, -13, -21, -21, -22, 0, 2, -13, -5, -9, -23, -18, -20, 3, -4, 4, 0, 0, 3, 1, 3, -6, 
          -4, -17, 7, -10, 14, -5, -4, 9, -21, -16, -0, 8, -16, -18, -14, 9, 5, -36, -8, -3, -15, -14, -20, 5, 22, 13, -174, -5, -21, -18, -26, 36, 
          19, 24, 30, -39, -20, -33, -26, -5, 75, 62, 28, 26, -16, 44, -19, 79, 58, 79, 44, 49, 70, 34, 65, -2, -5, 14, 11, 7, -10, -9, -35, 2, 
          2, 1, 2, -1, 4, -1, -2, -54, -25, -46, -37, -20, -56, -51, -35, 11, -35, -38, -2, 15, 8, 8, 10, -3, 2, -25, -49, 13, 15, 12, 14, -2, 
          -7, 10, 17, 13, 10, 13, 18, 5, -5, 21, 13, 15, 4, 15, 14, 9, 8, 11, 7, 6, 16, 28, 11, -3, 2, -4, 0, 0, 1, -3, 2, -27, 
          -6, -10, -41, -4, 8, 7, 22, 10, 13, -0, 3, 15, 11, -23, -8, 20, 12, -7, -10, 14, 9, -12, -16, 20, 10, -3, -6, 4, -0, 8, 12, -16, 
          7, 21, 51, 2, -3, 1, 18, -17, 46, 49, 12, -7, 45, 16, 21, 56, 78, 55, 52, 37, 69, -3, 46, 28, -12, -4, -36, 2, -16, -8, 15, 5, 
          3, 1, 4, 1, -1, -1, 3, -122, -86, -103, -46, -122, -136, -53, -60, -2, -46, -53, -33, -46, 27, -41, 26, 8, -3, -3, -7, 34, -14, -5, -14, 1, 
          -3, -13, 80, -13, -5, 4, -11, -18, -6, 77, 16, -22, -13, -3, -0, -16, 62, 22, -12, 0, -5, 9, -4, -3, -1, -1, 4, 2, 5, -2, 5, 24, 
          -16, -1, 16, 12, -15, -25, -2, 7, -2, -14, -22, 3, -1, 6, -12, 33, 32, 26, 5, -4, -3, 6, 4, -14, -9, 6, -4, 10, 1, 2, 7, -26, 
          -5, -28, -9, 15, 43, 7, 19, -22, -16, -13, -6, 12, 41, 9, 44, -86, -33, -62, -41, 14, -81, 28, 24, -55, -25, -1, -9, 25, 10, 21, 13, 4, 
          -3, -3, 2, 5, -3, 5, 1, 52, 52, 32, 25, 65, 63, 15, -24, -11, 43, 16, 44, 24, 31, -20, -9, 36, 36, 41, 29, -12, -21, -25, -11, 37, 
          47, 28, 27, -7, -7, -22, -14, 18, 14, 21, 6, 4, -11, -0, -19, 12, 5, 0, -0, 10, 34, -17, -29, 0, -2, 0, 5, 1, 3, -3, 4, -3, 
          -1, -17, -8, 17, 30, 15, 27, -0, -17, -20, -1, -9, 91, 73, -4, 4, -13, 1, -7, 12, -11, 9, -16, -21, -22, -24, -14, 9, 17, 27, -1, -30, 
          -14, -28, -33, -10, -14, 7, 24, -9, -45, -44, -46, -31, -31, -19, 22, 10, -26, -61, -41, -36, -65, -28, -42, -7, -6, -17, -13, -27, 1, -7, 10, 3, 
          -4, 2, 3, -3, 5, -3, 2, 23, 42, 32, 3, 96, 83, 61, 60, -13, -12, 9, 33, 44, -21, -24, -29, 27, -7, 4, 6, 31, -17, -13, -35, 1, 
          1, -5, 7, 3, 9, 10, 12, -13, -12, -8, 2, -7, -1, 8, 14, 1, -6, -7, -5, -15, -6, 0, 19, -3, 3, 0, 3, -2, 4, 2, 3, };




int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif
