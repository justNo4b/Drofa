#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS1 = -40;
int OUTPUT_BIAS2 = -16;
int HIDDEN_BIAS[N_HIDDEN] = {-17, -8, 37, 1, 45, 65, -17, 27, };
int OUTPUT_WEIGHTS1[N_HIDDEN] = {13, 31, -25, 14, 12, -16, 32, 24, };
int OUTPUT_WEIGHTS2[N_HIDDEN] = {5, 2, 8, 8, 10, -4, -9, 5, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {
          -4, 2, 1, 3, 3, 3, 2, -2, -31,
          29, 74, 60, 11, 53, 20, 7, -35,
          -3, -50, 65, -11, 55, 16, -0, -16,
          65, -40, 3, 9, 35, 9, 42, -13,
          1, -28, -25, -31, -40, -28, 10, -18,
          8, 154, 1, 135, 22, -16, 18, -2,
          -0, 145, -69, -13, 19, 18, 22, 1,
          5, 3, 4, -3, -2, -1, -1, -1,
          0, -2, 5, -4, -2, -4, -2, 20,
          -59, -65, -4, -42, -72, -22, -46, 19,
          -29, -22, -6, -22, -43, 20, -45, 100,
          24, 68, -54, 20, -20, 20, -28, -2,
          57, 5, 79, 13, -14, 0, -1, 23,
          14, 189, -19, -30, -24, -18, 3, 9,
          116, -12, -18, 82, -10, 12, 23, -4,
          -4, 5, -2, -4, 2, 0, 1, 1,
          2, 4, 1, 3, 1, -4, 5, -23,
          -16, -3, -2, -5, -39, -19, -17, -19,
          -12, 8, -15, -8, -42, -41, -16, -40,
          -74, 1, 21, 5, -12, -21, -15, -82,
          -35, -10, 3, 23, 24, -24, -4, -109,
          -40, 50, 32, 65, 19, -2, -62, 4,
          10, 66, -24, 22, 13, 15, -14, 2,
          2, 1, -4, 3, -3, 4, -1, 1,
          -2, 1, 1, 1, 3, 5, 1, 13,
          27, -55, -38, 15, -68, -92, -94, 14,
          14, 47, -13, 8, 17, 12, 20, 40,
          25, 33, 1, -6, -64, -10, -21, 45,
          36, 10, 35, 13, -49, -56, -21, 39,
          43, 10, 17, 26, -12, -40, -51, 36,
          31, -6, 1, 24, 24, -43, -61, 3,
          5, 3, 2, 2, 1, -2, 1, 3,
          5, -3, 3, 2, -4, 0, -4, 29,
          24, 29, 18, 103, -19, -5, 13, 22,
          40, 55, 32, 7, 7, -2, -3, 9,
          27, 40, 15, 46, 16, -8, -18, 23,
          19, 1, -49, 8, 24, 16, -6, 0,
          5, -67, -50, -89, -24, -26, -66, -31,
          -117, -118, -64, 22, -109, 92, -70, -2,
          5, 0, 4, 3, -1, -2, -1, -3,
          -2, 4, 5, 2, -4, 2, -2, 72,
          -74, -4, 100, 19, 7, -49, -53, -3,
          8, 7, 46, 61, 18, 62, -53, -48,
          -10, 32, 40, -3, -5, -52, -56, -42,
          -24, -21, 83, 21, -3, -34, -31, -47,
          -28, -31, 74, -13, -10, -0, -19, -29,
          -22, 41, -35, -24, 47, 9, -19, -1,
          2, 0, -4, 4, 4, 3, 0, 2,
          0, 1, 2, 4, 3, 0, 5, -0,
          -7, -48, 18, 43, 33, -11, -18, -3,
          2, -30, -14, -9, -19, -19, -9, -3,
          28, -11, -22, -16, -25, -74, -69, -17,
          33, 13, -25, -73, 2, -97, -54, -25,
          36, -0, -15, -27, -75, -73, -55, 28,
          -44, 43, 38, -54, 5, -37, 9, -3,
          3, 4, -2, 2, 3, 4, 4, -1,
          -1, -3, 2, -4, 5, 4, -1, 14,
          -37, -95, 18, 35, -94, 24, -37, 4,
          14, -40, -3, -113, -32, 29, 1, -66,
          -10, -43, -5, 7, 75, -49, 9, -41,
          -45, -54, -18, 3, 15, 16, 19, -42,
          -54, -11, -3, 26, 2, 10, 25, -43,
          -62, 9, -10, 6, 8, 23, 45, 0,
          -4, 4, -4, -4, 2, 3, -1, -1,
          5, -1, -3, -4, 3, -3, 4, 42,
          39, 1, 57, 16, 9, -5, -23, 36,
          27, 11, 10, 19, 10, 1, -24, 62,
          33, 47, 6, 19, 13, 3, -0, 51,
          25, 45, -3, 9, -16, 3, -14, 61,
          41, 48, -27, -54, 54, 44, 67, -63,
          75, -4, 18, -17, -40, -8, 52, 3,
          3, 4, 3, 2, -4, 5, -1, 1,
          -3, -4, 5, 0, 0, -2, 3, -31,
          -1, 32, 38, 30, 20, 42, 40, 10,
          10, 42, 80, 25, 59, 7, -41, -12,
          1, 45, 60, 23, 37, 11, 2, -28,
          -19, 5, -1, -9, 7, 4, 6, -9,
          -15, -2, -15, -27, 3, -22, -15, -8,
          -19, 97, -28, -35, -32, -28, -13, 4,
          -4, 4, -2, -4, 2, 0, 5, 1,
          -3, -4, 3, -1, 5, -3, 5, -11,
          18, -9, -3, 0, 21, 55, 9, -5,
          -48, 109, 22, 3, -25, 10, 40, -2,
          -9, -6, 37, -25, -19, 12, 23, -23,
          -26, -39, 16, 27, 16, -47, -13, -22,
          -17, -46, -60, -1, -20, -16, -11, -22,
          -35, -50, -35, -28, 1, 58, -72, 4,
          -3, 1, -3, -1, 3, -3, 3, -4,
          2, -1, -1, -4, 2, -2, 0, -72,
          5, -32, -34, 31, 75, 32, -114, -67,
          -20, -41, 9, -144, -99, 127, -6, -59,
          -7, -2, 79, 46, 10, 7, -42, -37,
          -5, 3, 59, 31, -35, 1, -13, -15,
          7, 20, -45, 41, -35, 22, -22, -36,
          -18, 14, -71, -16, -14, -8, -10, 5,
          5, 2, 2, 3, 0, 0, -2, 3,
          0, 1, 2, 2, -2, 0, -2, 5,
          21, 34, 68, 124, 83, 21, -47, -1,
          9, 52, 12, -12, 7, -14, -22, -19,
          16, 3, 21, -38, -8, -16, -49, -21,
          13, 57, -24, -16, -31, -46, -14, 97,
          57, 74, 71, 41, 22, -6, 51, 94,
          72, 83, 96, -11, 65, -11, 65, 5,
          4, 1, 5, 1, -2, 2, 3, -1,
          3, -2, 0, -1, -4, -3, 3, -54,
          20, -54, -71, -59, 4, 24, 14, -71,
          -8, -57, -16, -33, -24, 11, -26, -12,
          22, -33, 21, 75, 10, 27, 2, 26,
          13, 59, 51, 52, -14, -15, 11, 36,
          62, 42, 35, 13, -17, -16, 12, 28,
          70, 85, 48, 20, -18, -3, 14, -1,
          -1, -2, 4, 5, 3, 0, -4, 4,
          2, 1, 1, 5, 2, 5, 2, -35,
          -25, 10, -44, -25, -29, 19, 62, -33,
          -45, -4, -17, 26, -3, 34, 39, -33,
          -28, -14, -0, 1, 71, 64, 59, -26,
          -30, -62, -0, -0, 38, 60, 11, -48,
          -10, 4, 48, -2, 41, 34, -5, 60,
          -44, 48, 104, -1, -11, -89, -25, 5,
          4, 2, 0, 4, 0, -1, 0, 4,
          -4, -4, 2, 0, -3, 2, -4, -20,
          5, 84, -34, -48, -34, -8, 45, -18,
          -26, -19, -34, -100, -53, -6, 45, 1,
          17, -23, 5, -52, -35, 7, 28, 13,
          33, -32, -12, -5, 1, 12, 32, 21,
          -5, -27, -9, 31, 26, 60, 51, 10,
          -22, -32, 101, 80, 60, 29, 29, 1,
          5, 0, 2, -1, 4, 0, 4, };

int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif