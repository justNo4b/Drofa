#ifndef KPNN_H
#define KPNN_H

#include <math.h>


// use net Pnet => 128x16x2 => opS /egS outputs
#define N_INPUTS   (64 * 2)
#define N_HIDDEN   (8)

int OUTPUT_BIAS = 5;
int HIDDEN_BIAS[N_HIDDEN] = {1, -18, -20, 4, 3, 19, -13, 6, };
int OUTPUT_WEIGHTS[N_HIDDEN] = {-9, 17, 12, 5, -7, 12, -11, -11, };


int HIDDEN_WEIGHTS[N_INPUTS * N_HIDDEN] = {-4, 3, 1, -4, 0, 0, -2, -4, -4, 0, -1, -14, -3, -23, 12, 16, -1, -14, -7, -10, 4, -3, 10, 7, -1, -21, -2, 6, 7, -4, 12, 13, 4, -23, -1, 4, -1, 12, -5, 5, 9, -10, 6, -2, 1, -6, 6, 9, 1, -11, -21, -30, 20, -5, 26, -13, 4, 1, -4, 2, 4, 1, 0, 5, -2, 4, -2, 0, 4, 3, -4, 2, -3, 13, 15, 7, 1, 33, 9, 16, -2, -3, 20, 0, 15, 21, -12, 27, -4, -2, 12, 11, -22, 17, 11, 17, -1, 14, -5, -53, -17, 3, 5, 2, -6, -44, -21, 3, -3, -6, 9, -4, -5, -57, -28, -7, -1, 0, 3, -4, 5, -1, -1, -3, -3, -3, 3, 2, -3, 3, -4, 5, 0, -4, -3, 4, -8, -5, -1, -31, -2, -4, 0, -3, -8, -10, -0, -12, -4, -13, -10, -9, -17, -12, -13, 9, 0, -19, -4, 1, -21, -10, -5, 4, 13, 19, 5, -8, -36, 9, 18, 10, 10, 5, 13, -1, 16, 1, 13, 13, 17, 5, 8, 2, 3, -4, 4, -4, -1, 5, 2, -4, -2, 5, 0, -2, -2, 1, -3, -3, 26, -5, -0, -1, 3, 5, -19, -12, 23, -5, 5, -4, -1, -1, -3, 6, 12, -5, 8, 3, -17, -5, 7, -4, 9, 3, 3, 14, 6, 1, -9, 1, 18, 11, -1, 4, 17, -1, -7, -19, 16, -3, -27, -5, 2, 6, -23, -19, -3, 5, -1, 0, -1, 3, 4, 1, 2, -3, -4, 4, 4, 0, 2, 0, -3, -7, 11, 0, 1, -37, -8, -2, -6, -3, 0, 11, -1, -0, -9, -8, -8, -31, 8, 13, 5, 4, 3, -6, -29, -6, -6, 1, 10, -4, -4, -3, -16, -11, 5, 29, 16, 4, -1, -15, 15, -4, 17, 4, 20, -5, -15, -8, -3, -1, 5, 4, 0, 2, 5, 0, 0, 4, -2, -1, -1, -1, -4, 1, -21, 6, -13, -1, 26, 15, -17, 6, -24, 46, 13, 3, 25, 10, -10, 12, 19, 16, 16, -3, 10, -23, 0, -13, 20, 13, 7, 0, 7, -23, -6, -11, 20, 7, 7, 8, 0, 2, -13, -4, 16, 14, 6, 10, 4, -1, -8, -13, -3, 5, 4, -3, 1, 1, -3, -4, 1, 4, 5, 5, -3, 5, 0, -3, 5, -4, 7, 9, 11, 17, 3, 7, -11, 4, -5, -4, 15, 17, 14, 10, -23, 14, 2, -11, 17, 11, 1, 8, 15, -8, 10, -6, 1, -14, 9, -12, -8, -6, 31, -11, 11, -18, 43, -9, 46, -22, 28, -29, -6, -2, -40, 1, -1, 2, -2, 3, -1, 1, 3, 0, 3, 1, 4, 4, 2, -3, 4, 3, -68, 22, 23, -7, 22, -7, -11, 9, -2, -59, 39, 37, 59, -8, -10, 17, 35, 51, -2, 7, 7, -8, -5, 23, 7, 18, 4, -6, -15, -2, -9, 0, -2, -9, -2, -3, -5, -2, -12, 5, 2, -26, -7, 1, 20, -3, -13, -2, 1, 2, 2, 0, -1, -1, 4, 3, 3, -3, 2, -3, -1, -1, 2, -3, 6, -6, 17, 13, -4, -12, 2, -2, -1, 9, 17, 14, 2, -1, -3, -10, -14, 8, -1, 6, 2, -6, -2, 30, -2, 9, -22, 10, 31, 32, 5, -31, 5, -8, -5, -2, 10, 23, -13, -8, 7, 4, 1, -10, 9, -7, 21, -5, 4, -2, -1, -4, 4, -3, 4, 3, -1, 4, 5, -4, -2, -2, 4, -4, -8, 22, 35, -23, 13, 10, -14, -22, 13, 3, 18, 9, 5, -11, -7, 9, 15, -5, 24, 5, 12, -11, -1, -7, 18, -8, 18, 6, 4, -3, -3, -11, 13, -3, 36, -12, 9, -3, 10, 8, -2, 6, 32, -26, 3, 11, -7, -16, 4, -1, 0, 2, -2, 1, 4, -4, -1, 4, 4, 0, 2, 2, 1, 2, 17, 20, -3, 27, 11, 3, 0, -11, 19, 16, 1, -4, 1, -0, 3, -15, 24, 19, 7, 4, 7, -0, 3, -7, 23, 8, 15, 9, 2, -11, 1, -5, 9, 13, 22, -16, 36, 18, 13, 28, -40, 45, 3, 0, -7, -17, 3, -8, 1, -2, -2, 4, 0, -4, 3, -2, 1, 3, 4, 2, 0, 2, -4, 4, 4, -14, 10, 27, 28, 15, 39, 31, 3, -9, 14, 29, 22, 26, 19, -0, -3, -18, 15, 19, 18, 30, 10, 13, -10, -6, 9, 8, -6, -6, 8, 6, -3, -5, 7, 1, -14, 1, 0, -7, -5, -5, 5, -7, -13, -14, -6, -11, 3, 3, 0, -3, 1, -4, -2, -3, -3, 5, 5, 5, 2, 1, 5, 3, 20, 12, 5, 25, 6, 3, -9, -19, 17, 15, 12, 10, -11, -5, -18, -9, 16, 15, 14, 1, 6, -27, -14, -19, 20, 13, 19, -3, 12, -8, 1, -9, -7, 11, -22, -6, 5, -0, 23, -3, 27, 22, -9, 18, 8, 2, -14, -4, 4, 1, -3, -1, -4, 4, 4, 2, 1, -1, 3, 0, 1, 0, -4, -3, 12, -25, 13, 3, 14, 19, -8, -15, 1, 8, 2, 18, 15, -1, -6, -10, -2, -2, -0, 9, 14, -2, 8, -8, -6, -16, 3, 10, 3, 5, -3, -3, -4, 4, -2, 1, -6, -10, -15, -7, -6, -3, 11, -17, -12, -38, -11, -3, -4, 0, -1, 4, -1, 3, -4, 0, 3, 0, -4, 5, -3, 4, -2, -4, 1, 1, 6, -7, -5, -3, -3, -1, -1, 2, 3, 2, -5, 4, 2, -2, -3, -7, 6, -4, 2, 11, 12, 2, -1, -21, -1, 1, 29, -15, 16, 35, -7, -9, -7, -9, 27, 36, 29, -18, 4, 9, -6, -0, 21, 35, 21, -9, 5, 1, 1, 1, 3, -3, 4, -1, 1, 5, -4, 3, -3, 1, 5, 2, -8, 6, 20, -6, 3, 18, 9, -6, 18, 1, -10, 1, 28, 22, 16, 13, 14, 7, 12, 9, 18, -12, -8, 1, 8, 18, 17, 20, 1, -11, -12, -10, 20, 38, 3, 13, -11, 4, -8, -17, 21, 17, -8, 9, -6, 3, -10, -18, 5, 5, -4, -4, -1, 4, 2, 3, };


int sigmoid(int x){
    return round(1 / (1 + exp(-1 * x)));
}

#endif